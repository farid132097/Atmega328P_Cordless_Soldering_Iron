
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001014  000010a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001014  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800110  00800110  000010b8  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000060a  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000129d  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000769  00000000  00000000  000029ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000101d  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  00004188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000827  00000000  00000000  00004568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008e3  00000000  00000000  00004d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00005672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 37       	cpi	r26, 0x78	; 120
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 08 08 	jmp	0x1010	; 0x1010 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "uart.h"
#include "adc.h"
#include "pwm.h"

int main(void){
      a6:	af 92       	push	r10
      a8:	bf 92       	push	r11
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
  
  Timebase_Init(100);
      ba:	84 e6       	ldi	r24, 0x64	; 100
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Timebase_Init>
  UART_Init(38400);
      c2:	60 e0       	ldi	r22, 0x00	; 0
      c4:	76 e9       	ldi	r23, 0x96	; 150
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 3d 01 	call	0x27a	; 0x27a <UART_Init>
  ADC_Init();
      ce:	0e 94 17 06 	call	0xc2e	; 0xc2e <ADC_Init>
  PWM_Init();
      d2:	0e 94 89 07 	call	0xf12	; 0xf12 <PWM_Init>
      d6:	c0 e0       	ldi	r28, 0x00	; 0
      d8:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      da:	90 e6       	ldi	r25, 0x60	; 96
      dc:	a9 2e       	mov	r10, r25
      de:	9a ee       	ldi	r25, 0xEA	; 234
      e0:	b9 2e       	mov	r11, r25
  while(1){
    
	//while(Timebase_Timer_Get_SubSeconds() == last_val);
	//last_val=Timebase_Timer_Get_SubSeconds();
	
	if( (UART_Last_Received_Byte()=='o') && (temp<260) ){
      e2:	88 e9       	ldi	r24, 0x98	; 152
      e4:	c8 2e       	mov	r12, r24
      e6:	8a e3       	ldi	r24, 0x3A	; 58
      e8:	d8 2e       	mov	r13, r24
      ea:	0e 94 11 01 	call	0x222	; 0x222 <UART_Last_Received_Byte>
      ee:	8f 36       	cpi	r24, 0x6F	; 111
      f0:	39 f4       	brne	.+14     	; 0x100 <main+0x5a>
      f2:	c4 50       	subi	r28, 0x04	; 4
      f4:	d1 40       	sbci	r29, 0x01	; 1
      f6:	20 f4       	brcc	.+8      	; 0x100 <main+0x5a>
	  Iron_Heater_On(500);
      f8:	84 ef       	ldi	r24, 0xF4	; 244
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 46 07 	call	0xe8c	; 0xe8c <Iron_Heater_On>
     100:	c5 01       	movw	r24, r10
     102:	01 97       	sbiw	r24, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <main+0x5c>
	}
	_delay_ms(20);
	uint16_t curr = ADC_Read_Current();
     106:	0e 94 84 06 	call	0xd08	; 0xd08 <ADC_Read_Current>
     10a:	7c 01       	movw	r14, r24
	Iron_Heater_Off();
     10c:	0e 94 69 07 	call	0xed2	; 0xed2 <Iron_Heater_Off>
     110:	c6 01       	movw	r24, r12
     112:	01 97       	sbiw	r24, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <main+0x6c>
	_delay_ms(5);
	
	temp = ADC_Read_Temperature(80);
     116:	80 e5       	ldi	r24, 0x50	; 80
     118:	0e 94 40 06 	call	0xc80	; 0xc80 <ADC_Read_Temperature>
     11c:	ec 01       	movw	r28, r24
	volt = ADC_Read_Input_Voltage();
     11e:	0e 94 c2 06 	call	0xd84	; 0xd84 <ADC_Read_Input_Voltage>
	
	
	UART_Transmit_Number(volt);
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	bc 01       	movw	r22, r24
     12a:	cd 01       	movw	r24, r26
     12c:	0e 94 6f 02 	call	0x4de	; 0x4de <UART_Transmit_Number>
	UART_Transmit_Text((char*)",");
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 0a 02 	call	0x414	; 0x414 <UART_Transmit_Text>
	UART_Transmit_Number(curr);
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	10 e0       	ldi	r17, 0x00	; 0
     13c:	c8 01       	movw	r24, r16
     13e:	b7 01       	movw	r22, r14
     140:	0e 94 6f 02 	call	0x4de	; 0x4de <UART_Transmit_Number>
	UART_Transmit_Text((char*)",");
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	0e 94 0a 02 	call	0x414	; 0x414 <UART_Transmit_Text>
	UART_Transmit_Number(temp);
     14c:	be 01       	movw	r22, r28
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 6f 02 	call	0x4de	; 0x4de <UART_Transmit_Number>
	UART_Transmit_Text((char*)"\r\n");
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 0a 02 	call	0x414	; 0x414 <UART_Transmit_Text>
     15e:	c5 cf       	rjmp	.-118    	; 0xea <main+0x44>

00000160 <UART_Config_GPIO>:



void UART_Config_GPIO(void){
	
}
     160:	08 95       	ret

00000162 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     162:	08 95       	ret

00000164 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     164:	9b 01       	movw	r18, r22
     166:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     168:	60 e6       	ldi	r22, 0x60	; 96
     16a:	73 ee       	ldi	r23, 0xE3	; 227
     16c:	86 e1       	ldi	r24, 0x16	; 22
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     174:	21 50       	subi	r18, 0x01	; 1
     176:	30 40       	sbci	r19, 0x00	; 0
     178:	40 40       	sbci	r20, 0x00	; 0
     17a:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     17c:	e0 ec       	ldi	r30, 0xC0	; 192
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	82 60       	ori	r24, 0x02	; 2
     184:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     186:	bb 27       	eor	r27, r27
     188:	a5 2f       	mov	r26, r21
     18a:	94 2f       	mov	r25, r20
     18c:	83 2f       	mov	r24, r19
     18e:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     192:	20 93 c4 00 	sts	0x00C4, r18
}
     196:	08 95       	ret

00000198 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     198:	e1 ec       	ldi	r30, 0xC1	; 193
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	88 60       	ori	r24, 0x08	; 8
     1a0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	80 93 c2 00 	sts	0x00C2, r24
}
     1a8:	08 95       	ret

000001aa <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1aa:	e1 ec       	ldi	r30, 0xC1	; 193
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	80 61       	ori	r24, 0x10	; 16
     1b2:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1b4:	86 e0       	ldi	r24, 0x06	; 6
     1b6:	80 93 c2 00 	sts	0x00C2, r24
}
     1ba:	08 95       	ret

000001bc <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1bc:	e1 ec       	ldi	r30, 0xC1	; 193
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	80 68       	ori	r24, 0x80	; 128
     1c4:	80 83       	st	Z, r24
  sei();
     1c6:	78 94       	sei
}
     1c8:	08 95       	ret

000001ca <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
     1ca:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1cc:	80 91 c0 00 	lds	r24, 0x00C0
     1d0:	85 ff       	sbrs	r24, 5
     1d2:	fc cf       	rjmp	.-8      	; 0x1cc <UART_Transmit_Byte+0x2>
  UDR0=val;
     1d4:	90 93 c6 00 	sts	0x00C6, r25
}
     1d8:	08 95       	ret

000001da <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1da:	df 93       	push	r29
     1dc:	cf 93       	push	r28
     1de:	0f 92       	push	r0
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1e4:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1e6:	80 91 c0 00 	lds	r24, 0x00C0
     1ea:	84 ff       	sbrs	r24, 4
     1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1ee:	80 91 c6 00 	lds	r24, 0x00C6
     1f2:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1f8:	80 91 c0 00 	lds	r24, 0x00C0
     1fc:	83 ff       	sbrs	r24, 3
     1fe:	07 c0       	rjmp	.+14     	; 0x20e <UART_Receive_Byte+0x34>
    val=UDR0;
     200:	80 91 c6 00 	lds	r24, 0x00C6
     204:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 10 01 	sts	0x0110, r24
     20c:	05 c0       	rjmp	.+10     	; 0x218 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     20e:	80 91 c6 00 	lds	r24, 0x00C6
     212:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     214:	10 92 10 01 	sts	0x0110, r1
  }
  return val;
     218:	89 81       	ldd	r24, Y+1	; 0x01
}
     21a:	0f 90       	pop	r0
     21c:	cf 91       	pop	r28
     21e:	df 91       	pop	r29
     220:	08 95       	ret

00000222 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     222:	80 91 1a 01 	lds	r24, 0x011A
}
     226:	08 95       	ret

00000228 <UART_Struct_Init>:
}
#endif


void UART_Struct_Init(void){
  UART.Error=0;
     228:	10 92 10 01 	sts	0x0110, r1
     22c:	e1 e1       	ldi	r30, 0x11	; 17
     22e:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     230:	11 92       	st	Z+, r1
#endif


void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	e9 31       	cpi	r30, 0x19	; 25
     236:	f8 07       	cpc	r31, r24
     238:	d9 f7       	brne	.-10     	; 0x230 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     23a:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     23c:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     23e:	80 e2       	ldi	r24, 0x20	; 32
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	93 a3       	std	Z+35, r25	; 0x23
     244:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     246:	15 a2       	std	Z+37, r1	; 0x25
     248:	14 a2       	std	Z+36, r1	; 0x24
     24a:	20 e0       	ldi	r18, 0x00	; 0
     24c:	04 c0       	rjmp	.+8      	; 0x256 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     24e:	e0 5f       	subi	r30, 0xF0	; 240
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	80 91 3b 01 	lds	r24, 0x013B
     25a:	90 91 3c 01 	lds	r25, 0x013C
     25e:	e2 2f       	mov	r30, r18
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	e8 17       	cp	r30, r24
     264:	f9 07       	cpc	r31, r25
     266:	98 f3       	brcs	.-26     	; 0x24e <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
    
  #ifdef UART_CIRCULAR_BUFFER_READ  
  UART.AvailableBytes=0;
     268:	10 92 40 01 	sts	0x0140, r1
     26c:	10 92 3f 01 	sts	0x013F, r1
  UART.ReadIndex=0;
     270:	10 92 42 01 	sts	0x0142, r1
     274:	10 92 41 01 	sts	0x0141, r1
  #endif

  #ifdef UART_LAST_RECEIVED_TIMESTAMP  
  UART.LastRecivedTimeStamp=0;
  #endif
}
     278:	08 95       	ret

0000027a <UART_Init>:


void UART_Init(uint32_t baud){
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     27a:	0e 94 b2 00 	call	0x164	; 0x164 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     27e:	e1 ec       	ldi	r30, 0xC1	; 193
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	88 60       	ori	r24, 0x08	; 8
     286:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     288:	a2 ec       	ldi	r26, 0xC2	; 194
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	96 e0       	ldi	r25, 0x06	; 6
     28e:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     290:	80 81       	ld	r24, Z
     292:	80 61       	ori	r24, 0x10	; 16
     294:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     296:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     298:	80 81       	ld	r24, Z
     29a:	80 68       	ori	r24, 0x80	; 128
     29c:	80 83       	st	Z, r24
  sei();
     29e:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
}
     2a0:	08 95       	ret

000002a2 <UART_Transmit_Byte_Hex>:


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Hex(uint32_t val){
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	ab 01       	movw	r20, r22
     2aa:	bc 01       	movw	r22, r24

  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     2ac:	4f 3f       	cpi	r20, 0xFF	; 255
     2ae:	51 05       	cpc	r21, r1
     2b0:	61 05       	cpc	r22, r1
     2b2:	71 05       	cpc	r23, r1
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <UART_Transmit_Byte_Hex+0x16>
     2b6:	28 f4       	brcc	.+10     	; 0x2c2 <UART_Transmit_Byte_Hex+0x20>
     2b8:	e8 e0       	ldi	r30, 0x08	; 8
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	c2 e0       	ldi	r28, 0x02	; 2
     2be:	d0 e0       	ldi	r29, 0x00	; 0
     2c0:	11 c0       	rjmp	.+34     	; 0x2e4 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     2c2:	40 30       	cpi	r20, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	58 07       	cpc	r21, r24
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	68 07       	cpc	r22, r24
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	78 07       	cpc	r23, r24
     2d0:	28 f0       	brcs	.+10     	; 0x2dc <UART_Transmit_Byte_Hex+0x3a>
     2d2:	e0 e2       	ldi	r30, 0x20	; 32
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	c8 e0       	ldi	r28, 0x08	; 8
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <UART_Transmit_Byte_Hex+0x42>
     2dc:	e0 e1       	ldi	r30, 0x10	; 16
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	c4 e0       	ldi	r28, 0x04	; 4
     2e2:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2e4:	80 91 c0 00 	lds	r24, 0x00C0
     2e8:	85 ff       	sbrs	r24, 5
     2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     2ec:	80 e3       	ldi	r24, 0x30	; 48
     2ee:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2f2:	80 91 c0 00 	lds	r24, 0x00C0
     2f6:	85 ff       	sbrs	r24, 5
     2f8:	fc cf       	rjmp	.-8      	; 0x2f2 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     2fa:	88 e7       	ldi	r24, 0x78	; 120
     2fc:	80 93 c6 00 	sts	0x00C6, r24
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	1f c0       	rjmp	.+62     	; 0x342 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     304:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     306:	db 01       	movw	r26, r22
     308:	ca 01       	movw	r24, r20
     30a:	0e 2e       	mov	r0, r30
     30c:	04 c0       	rjmp	.+8      	; 0x316 <UART_Transmit_Byte_Hex+0x74>
     30e:	b6 95       	lsr	r27
     310:	a7 95       	ror	r26
     312:	97 95       	ror	r25
     314:	87 95       	ror	r24
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <UART_Transmit_Byte_Hex+0x6c>
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	8f 70       	andi	r24, 0x0F	; 15
     31e:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     320:	8a 30       	cpi	r24, 0x0A	; 10
     322:	91 05       	cpc	r25, r1
     324:	20 f0       	brcs	.+8      	; 0x32e <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     326:	9c 01       	movw	r18, r24
     328:	29 5c       	subi	r18, 0xC9	; 201
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	03 c0       	rjmp	.+6      	; 0x334 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     32e:	9c 01       	movw	r18, r24
     330:	20 5d       	subi	r18, 0xD0	; 208
     332:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     33c:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     340:	1f 5f       	subi	r17, 0xFF	; 255
     342:	81 2f       	mov	r24, r17
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	8c 17       	cp	r24, r28
     348:	9d 07       	cpc	r25, r29
     34a:	e0 f2       	brcs	.-72     	; 0x304 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	08 95       	ret

00000354 <UART_Transmit_Byte_Bin>:
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	ab 01       	movw	r20, r22
     366:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     368:	4f 3f       	cpi	r20, 0xFF	; 255
     36a:	51 05       	cpc	r21, r1
     36c:	61 05       	cpc	r22, r1
     36e:	71 05       	cpc	r23, r1
     370:	09 f0       	breq	.+2      	; 0x374 <UART_Transmit_Byte_Bin+0x20>
     372:	10 f4       	brcc	.+4      	; 0x378 <UART_Transmit_Byte_Bin+0x24>
     374:	97 e0       	ldi	r25, 0x07	; 7
     376:	0b c0       	rjmp	.+22     	; 0x38e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     378:	40 30       	cpi	r20, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	58 07       	cpc	r21, r24
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	68 07       	cpc	r22, r24
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	78 07       	cpc	r23, r24
     386:	10 f0       	brcs	.+4      	; 0x38c <UART_Transmit_Byte_Bin+0x38>
     388:	9f e1       	ldi	r25, 0x1F	; 31
     38a:	01 c0       	rjmp	.+2      	; 0x38e <UART_Transmit_Byte_Bin+0x3a>
     38c:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     38e:	80 91 c0 00 	lds	r24, 0x00C0
     392:	85 ff       	sbrs	r24, 5
     394:	fc cf       	rjmp	.-8      	; 0x38e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     396:	80 e3       	ldi	r24, 0x30	; 48
     398:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     39c:	80 91 c0 00 	lds	r24, 0x00C0
     3a0:	85 ff       	sbrs	r24, 5
     3a2:	fc cf       	rjmp	.-8      	; 0x39c <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     3a4:	82 e6       	ldi	r24, 0x62	; 98
     3a6:	80 93 c6 00 	sts	0x00C6, r24
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
}
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
     3ae:	e9 2f       	mov	r30, r25
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     3b2:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     3b4:	11 e3       	ldi	r17, 0x31	; 49
     3b6:	ef 01       	movw	r28, r30
     3b8:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     3ba:	cf 01       	movw	r24, r30
     3bc:	82 1b       	sub	r24, r18
     3be:	93 0b       	sbc	r25, r19
     3c0:	6a 01       	movw	r12, r20
     3c2:	7b 01       	movw	r14, r22
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <UART_Transmit_Byte_Bin+0x7a>
     3c6:	f6 94       	lsr	r15
     3c8:	e7 94       	ror	r14
     3ca:	d7 94       	ror	r13
     3cc:	c7 94       	ror	r12
     3ce:	8a 95       	dec	r24
     3d0:	d2 f7       	brpl	.-12     	; 0x3c6 <UART_Transmit_Byte_Bin+0x72>
     3d2:	d7 01       	movw	r26, r14
     3d4:	c6 01       	movw	r24, r12
     3d6:	81 70       	andi	r24, 0x01	; 1
     3d8:	90 70       	andi	r25, 0x00	; 0
     3da:	89 2b       	or	r24, r25
     3dc:	39 f0       	breq	.+14     	; 0x3ec <UART_Transmit_Byte_Bin+0x98>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3de:	80 91 c0 00 	lds	r24, 0x00C0
     3e2:	85 ff       	sbrs	r24, 5
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     3e6:	10 93 c6 00 	sts	0x00C6, r17
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <UART_Transmit_Byte_Bin+0xa4>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3ec:	80 91 c0 00 	lds	r24, 0x00C0
     3f0:	85 ff       	sbrs	r24, 5
     3f2:	fc cf       	rjmp	.-8      	; 0x3ec <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     3f4:	00 93 c6 00 	sts	0x00C6, r16
     3f8:	2f 5f       	subi	r18, 0xFF	; 255
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     3fc:	2c 17       	cp	r18, r28
     3fe:	3d 07       	cpc	r19, r29
     400:	e1 f6       	brne	.-72     	; 0x3ba <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	08 95       	ret

00000414 <UART_Transmit_Text>:
#endif


void UART_Transmit_Text(char *str){
     414:	ac 01       	movw	r20, r24
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	07 c0       	rjmp	.+14     	; 0x428 <UART_Transmit_Text+0x14>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     41a:	80 91 c0 00 	lds	r24, 0x00C0
     41e:	85 ff       	sbrs	r24, 5
     420:	fc cf       	rjmp	.-8      	; 0x41a <UART_Transmit_Text+0x6>
  UDR0=val;
     422:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     426:	2f 5f       	subi	r18, 0xFF	; 255
#endif


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     428:	fa 01       	movw	r30, r20
     42a:	e2 0f       	add	r30, r18
     42c:	f1 1d       	adc	r31, r1
     42e:	e0 81       	ld	r30, Z
     430:	ee 23       	and	r30, r30
     432:	99 f7       	brne	.-26     	; 0x41a <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     434:	08 95       	ret

00000436 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	6b 01       	movw	r12, r22
     446:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     448:	61 15       	cp	r22, r1
     44a:	71 05       	cpc	r23, r1
     44c:	81 05       	cpc	r24, r1
     44e:	91 05       	cpc	r25, r1
     450:	31 f4       	brne	.+12     	; 0x45e <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     452:	10 92 11 01 	sts	0x0111, r1
    UART.InputNumberDigits=1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 19 01 	sts	0x0119, r24
     45c:	23 c0       	rjmp	.+70     	; 0x4a4 <UART_Determine_Digit_Numbers+0x6e>
     45e:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     460:	0b 2d       	mov	r16, r11
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	00 5f       	subi	r16, 0xF0	; 240
     466:	1e 4f       	sbci	r17, 0xFE	; 254
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	2a e0       	ldi	r18, 0x0A	; 10
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     478:	f8 01       	movw	r30, r16
     47a:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     47c:	c7 01       	movw	r24, r14
     47e:	b6 01       	movw	r22, r12
     480:	2a e0       	ldi	r18, 0x0A	; 10
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     48c:	c9 01       	movw	r24, r18
     48e:	da 01       	movw	r26, r20
     490:	6c 01       	movw	r12, r24
     492:	7d 01       	movw	r14, r26
      i++;
     494:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     496:	c1 14       	cp	r12, r1
     498:	d1 04       	cpc	r13, r1
     49a:	e1 04       	cpc	r14, r1
     49c:	f1 04       	cpc	r15, r1
     49e:	01 f7       	brne	.-64     	; 0x460 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     4a0:	b0 92 19 01 	sts	0x0119, r11
  }
}
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	08 95       	ret

000004b4 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     4b4:	e0 91 19 01 	lds	r30, 0x0119
     4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     4ba:	2e 2f       	mov	r18, r30
     4bc:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     4be:	e2 2f       	mov	r30, r18
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	e0 5f       	subi	r30, 0xF0	; 240
     4c4:	fe 4f       	sbci	r31, 0xFE	; 254
     4c6:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     4c8:	80 91 c0 00 	lds	r24, 0x00C0
     4cc:	85 ff       	sbrs	r24, 5
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     4d0:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     4d2:	90 93 c6 00 	sts	0x00C6, r25
     4d6:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     4d8:	ee 23       	and	r30, r30
     4da:	79 f7       	brne	.-34     	; 0x4ba <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     4dc:	08 95       	ret

000004de <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     4de:	9b 01       	movw	r18, r22
     4e0:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4e2:	97 ff       	sbrs	r25, 7
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <UART_Transmit_Number+0x24>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     4e6:	80 91 c0 00 	lds	r24, 0x00C0
     4ea:	85 ff       	sbrs	r24, 5
     4ec:	fc cf       	rjmp	.-8      	; 0x4e6 <UART_Transmit_Number+0x8>
  UDR0=val;
     4ee:	8d e2       	ldi	r24, 0x2D	; 45
     4f0:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4f4:	50 95       	com	r21
     4f6:	40 95       	com	r20
     4f8:	30 95       	com	r19
     4fa:	21 95       	neg	r18
     4fc:	3f 4f       	sbci	r19, 0xFF	; 255
     4fe:	4f 4f       	sbci	r20, 0xFF	; 255
     500:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     502:	ca 01       	movw	r24, r20
     504:	b9 01       	movw	r22, r18
     506:	0e 94 1b 02 	call	0x436	; 0x436 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     50a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_Transmit_Number_Digits>
}
     50e:	08 95       	ret

00000510 <UART_Read_From_Buffer>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     510:	fc 01       	movw	r30, r24
     512:	e0 5f       	subi	r30, 0xF0	; 240
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	83 85       	ldd	r24, Z+11	; 0x0b
}
     518:	08 95       	ret

0000051a <UART_Current_Buffer_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     51a:	20 91 3d 01 	lds	r18, 0x013D
     51e:	30 91 3e 01 	lds	r19, 0x013E
}
     522:	c9 01       	movw	r24, r18
     524:	08 95       	ret

00000526 <UART_Current_Read_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Read_Index(void){
  return UART.ReadIndex;
     526:	20 91 41 01 	lds	r18, 0x0141
     52a:	30 91 42 01 	lds	r19, 0x0142
}
     52e:	c9 01       	movw	r24, r18
     530:	08 95       	ret

00000532 <UART_Bytes_Available_To_Read>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Bytes_Available_To_Read(void){
  return UART.AvailableBytes;
     532:	20 91 3f 01 	lds	r18, 0x013F
     536:	30 91 40 01 	lds	r19, 0x0140
}
     53a:	c9 01       	movw	r24, r18
     53c:	08 95       	ret

0000053e <UART_Read>:


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read(void){
  
  uint8_t current_byte=UART.Buffer[UART.ReadIndex];
     53e:	e0 91 41 01 	lds	r30, 0x0141
     542:	f0 91 42 01 	lds	r31, 0x0142
     546:	e0 5f       	subi	r30, 0xF0	; 240
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	43 85       	ldd	r20, Z+11	; 0x0b
  UART.ReadIndex++;
     54c:	80 91 41 01 	lds	r24, 0x0141
     550:	90 91 42 01 	lds	r25, 0x0142
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	90 93 42 01 	sts	0x0142, r25
     55a:	80 93 41 01 	sts	0x0141, r24
  if(UART.ReadIndex>=UART.BufferSize){
     55e:	20 91 41 01 	lds	r18, 0x0141
     562:	30 91 42 01 	lds	r19, 0x0142
     566:	80 91 3b 01 	lds	r24, 0x013B
     56a:	90 91 3c 01 	lds	r25, 0x013C
     56e:	28 17       	cp	r18, r24
     570:	39 07       	cpc	r19, r25
     572:	20 f0       	brcs	.+8      	; 0x57c <UART_Read+0x3e>
    UART.ReadIndex=0;
     574:	10 92 42 01 	sts	0x0142, r1
     578:	10 92 41 01 	sts	0x0141, r1
  }
  if(UART.AvailableBytes>0){
     57c:	80 91 3f 01 	lds	r24, 0x013F
     580:	90 91 40 01 	lds	r25, 0x0140
     584:	89 2b       	or	r24, r25
     586:	49 f0       	breq	.+18     	; 0x59a <UART_Read+0x5c>
    UART.AvailableBytes--;
     588:	80 91 3f 01 	lds	r24, 0x013F
     58c:	90 91 40 01 	lds	r25, 0x0140
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	90 93 40 01 	sts	0x0140, r25
     596:	80 93 3f 01 	sts	0x013F, r24
  }
  return current_byte;
}
     59a:	84 2f       	mov	r24, r20
     59c:	08 95       	ret

0000059e <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     59e:	10 92 10 01 	sts	0x0110, r1
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     5a8:	f9 01       	movw	r30, r18
     5aa:	e0 5f       	subi	r30, 0xF0	; 240
     5ac:	fe 4f       	sbci	r31, 0xFE	; 254
     5ae:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     5b0:	2f 5f       	subi	r18, 0xFF	; 255
     5b2:	3f 4f       	sbci	r19, 0xFF	; 255
     5b4:	80 91 3b 01 	lds	r24, 0x013B
     5b8:	90 91 3c 01 	lds	r25, 0x013C
     5bc:	28 17       	cp	r18, r24
     5be:	39 07       	cpc	r19, r25
     5c0:	98 f3       	brcs	.-26     	; 0x5a8 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     5c2:	10 92 3e 01 	sts	0x013E, r1
     5c6:	10 92 3d 01 	sts	0x013D, r1
    
  #ifdef UART_CIRCULAR_BUFFER_READ   
  UART.ReadIndex=0;    
     5ca:	10 92 42 01 	sts	0x0142, r1
     5ce:	10 92 41 01 	sts	0x0141, r1
  UART.AvailableBytes=0;
     5d2:	10 92 40 01 	sts	0x0140, r1
     5d6:	10 92 3f 01 	sts	0x013F, r1
  #endif
  
  #endif
}
     5da:	08 95       	ret

000005dc <UART_Interrupt_Service_Routine>:
}
#endif


#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	0f 92       	push	r0
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     5e6:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     5e8:	0e 94 ed 00 	call	0x1da	; 0x1da <UART_Receive_Byte>
     5ec:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     5ee:	80 91 10 01 	lds	r24, 0x0110
     5f2:	88 23       	and	r24, r24
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <UART_Interrupt_Service_Routine+0x1c>
     5f6:	57 c0       	rjmp	.+174    	; 0x6a6 <UART_Interrupt_Service_Routine+0xca>
    UART.LastByteReceived=received_byte;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	80 93 1a 01 	sts	0x011A, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     5fe:	e0 91 3d 01 	lds	r30, 0x013D
     602:	f0 91 3e 01 	lds	r31, 0x013E
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	e0 5f       	subi	r30, 0xF0	; 240
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     60e:	80 91 3d 01 	lds	r24, 0x013D
     612:	90 91 3e 01 	lds	r25, 0x013E
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	90 93 3e 01 	sts	0x013E, r25
     61c:	80 93 3d 01 	sts	0x013D, r24

    #ifdef UART_CIRCULAR_BUFFER_READ
    UART.AvailableBytes++;
     620:	80 91 3f 01 	lds	r24, 0x013F
     624:	90 91 40 01 	lds	r25, 0x0140
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	90 93 40 01 	sts	0x0140, r25
     62e:	80 93 3f 01 	sts	0x013F, r24
    if(UART.AvailableBytes>UART.BufferSize){
     632:	20 91 3f 01 	lds	r18, 0x013F
     636:	30 91 40 01 	lds	r19, 0x0140
     63a:	80 91 3b 01 	lds	r24, 0x013B
     63e:	90 91 3c 01 	lds	r25, 0x013C
     642:	82 17       	cp	r24, r18
     644:	93 07       	cpc	r25, r19
     646:	00 f5       	brcc	.+64     	; 0x688 <UART_Interrupt_Service_Routine+0xac>
      UART.AvailableBytes=UART.BufferSize;
     648:	80 91 3b 01 	lds	r24, 0x013B
     64c:	90 91 3c 01 	lds	r25, 0x013C
     650:	90 93 40 01 	sts	0x0140, r25
     654:	80 93 3f 01 	sts	0x013F, r24
      UART.ReadIndex++;
     658:	80 91 41 01 	lds	r24, 0x0141
     65c:	90 91 42 01 	lds	r25, 0x0142
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	90 93 42 01 	sts	0x0142, r25
     666:	80 93 41 01 	sts	0x0141, r24
      if(UART.ReadIndex>=UART.BufferSize){
     66a:	20 91 41 01 	lds	r18, 0x0141
     66e:	30 91 42 01 	lds	r19, 0x0142
     672:	80 91 3b 01 	lds	r24, 0x013B
     676:	90 91 3c 01 	lds	r25, 0x013C
     67a:	28 17       	cp	r18, r24
     67c:	39 07       	cpc	r19, r25
     67e:	20 f0       	brcs	.+8      	; 0x688 <UART_Interrupt_Service_Routine+0xac>
        UART.ReadIndex=0;
     680:	10 92 42 01 	sts	0x0142, r1
     684:	10 92 41 01 	sts	0x0141, r1
      }
    }
    #endif

    if(UART.BufferIndex>=UART.BufferSize){
     688:	20 91 3d 01 	lds	r18, 0x013D
     68c:	30 91 3e 01 	lds	r19, 0x013E
     690:	80 91 3b 01 	lds	r24, 0x013B
     694:	90 91 3c 01 	lds	r25, 0x013C
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	20 f0       	brcs	.+8      	; 0x6a6 <UART_Interrupt_Service_Routine+0xca>
      UART.BufferIndex=0;
     69e:	10 92 3e 01 	sts	0x013E, r1
     6a2:	10 92 3d 01 	sts	0x013D, r1
    }
    #ifdef UART_LAST_RECEIVED_TIMESTAMP
      UART.LastRecivedTimeStamp=UART_Reference_Time();
    #endif
  }
}
     6a6:	0f 90       	pop	r0
     6a8:	cf 91       	pop	r28
     6aa:	df 91       	pop	r29
     6ac:	08 95       	ret

000006ae <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	6f 93       	push	r22
     6c2:	7f 93       	push	r23
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     6d0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <UART_Interrupt_Service_Routine>
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     6f6:	85 e4       	ldi	r24, 0x45	; 69
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	90 93 44 01 	sts	0x0144, r25
     6fe:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.TimerType.Value = 0;
     702:	10 92 45 01 	sts	0x0145, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     706:	80 91 45 01 	lds	r24, 0x0145
     70a:	84 60       	ori	r24, 0x04	; 4
     70c:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     710:	80 91 45 01 	lds	r24, 0x0145
     714:	87 70       	andi	r24, 0x07	; 7
     716:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.UpdateRate = 1;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	90 93 47 01 	sts	0x0147, r25
     722:	80 93 46 01 	sts	0x0146, r24
  Timebase->Time.OVFUpdateValue=0;
     726:	10 92 48 01 	sts	0x0148, r1
  Timebase->Time.SubSeconds = 0;
     72a:	10 92 4d 01 	sts	0x014D, r1
     72e:	10 92 4e 01 	sts	0x014E, r1
     732:	10 92 4f 01 	sts	0x014F, r1
     736:	10 92 50 01 	sts	0x0150, r1
  Timebase->Time.Seconds = 0;
     73a:	10 92 51 01 	sts	0x0151, r1
     73e:	10 92 52 01 	sts	0x0152, r1
     742:	10 92 53 01 	sts	0x0153, r1
     746:	10 92 54 01 	sts	0x0154, r1
  Timebase->Time.LastSample = 0;
     74a:	10 92 49 01 	sts	0x0149, r1
     74e:	10 92 4a 01 	sts	0x014A, r1
     752:	10 92 4b 01 	sts	0x014B, r1
     756:	10 92 4c 01 	sts	0x014C, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     75a:	10 92 55 01 	sts	0x0155, r1
    Timebase->DownCounter[i].EndValue = 0;
    Timebase->DownCounter[i].Value = 0;
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
}
     75e:	08 95       	ret

00000760 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     760:	7f 92       	push	r7
     762:	8f 92       	push	r8
     764:	9f 92       	push	r9
     766:	af 92       	push	r10
     768:	bf 92       	push	r11
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	2a 97       	sbiw	r28, 0x0a	; 10
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     78c:	c0 90 43 01 	lds	r12, 0x0143
     790:	d0 90 44 01 	lds	r13, 0x0144
     794:	f6 01       	movw	r30, r12
     796:	80 81       	ld	r24, Z
     798:	80 ff       	sbrs	r24, 0
     79a:	31 c0       	rjmp	.+98     	; 0x7fe <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val=0;
    if(UpdateRateHz==1){
     79c:	01 30       	cpi	r16, 0x01	; 1
     79e:	11 05       	cpc	r17, r1
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <Timebase_Timer_Config+0x46>
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	19 c0       	rjmp	.+50     	; 0x7d8 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x06;
    }else if(UpdateRateHz==2){
     7a6:	02 30       	cpi	r16, 0x02	; 2
     7a8:	11 05       	cpc	r17, r1
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <Timebase_Timer_Config+0x50>
     7ac:	95 e0       	ldi	r25, 0x05	; 5
     7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x05;
    }else if(UpdateRateHz==4){
     7b0:	04 30       	cpi	r16, 0x04	; 4
     7b2:	11 05       	cpc	r17, r1
     7b4:	11 f4       	brne	.+4      	; 0x7ba <Timebase_Timer_Config+0x5a>
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x04;
    }else if(UpdateRateHz==8){
     7ba:	08 30       	cpi	r16, 0x08	; 8
     7bc:	11 05       	cpc	r17, r1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <Timebase_Timer_Config+0x64>
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x03;
    }else if(UpdateRateHz==16){
     7c4:	00 31       	cpi	r16, 0x10	; 16
     7c6:	11 05       	cpc	r17, r1
     7c8:	11 f4       	brne	.+4      	; 0x7ce <Timebase_Timer_Config+0x6e>
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <Timebase_Timer_Config+0x78>
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	00 32       	cpi	r16, 0x20	; 32
     7d2:	11 05       	cpc	r17, r1
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <Timebase_Timer_Config+0x78>
     7d6:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz==64){
      Prescaler_val=0x00;
    }else{
      Prescaler_val=0x00;
    }
    cli();
     7d8:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     7da:	84 b7       	in	r24, 0x34	; 52
     7dc:	87 7f       	andi	r24, 0xF7	; 247
     7de:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     7e0:	80 91 60 00 	lds	r24, 0x0060
     7e4:	80 68       	ori	r24, 0x80	; 128
     7e6:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     7ea:	80 91 60 00 	lds	r24, 0x0060
     7ee:	88 61       	ori	r24, 0x18	; 24
     7f0:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     7f4:	90 64       	ori	r25, 0x40	; 64
     7f6:	90 93 60 00 	sts	0x0060, r25
    sei();
     7fa:	78 94       	sei
     7fc:	67 c0       	rjmp	.+206    	; 0x8cc <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     7fe:	81 fd       	sbrc	r24, 1
     800:	65 c0       	rjmp	.+202    	; 0x8cc <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     802:	82 ff       	sbrs	r24, 2
     804:	63 c0       	rjmp	.+198    	; 0x8cc <Timebase_Timer_Config+0x16c>
    
	uint32_t temp=F_CPU;
	uint16_t clock_div_factor[5]={1,8,64,256,1024};
     806:	de 01       	movw	r26, r28
     808:	11 96       	adiw	r26, 0x01	; 1
     80a:	e5 e0       	ldi	r30, 0x05	; 5
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	8a e0       	ldi	r24, 0x0A	; 10
     810:	01 90       	ld	r0, Z+
     812:	0d 92       	st	X+, r0
     814:	81 50       	subi	r24, 0x01	; 1
     816:	e1 f7       	brne	.-8      	; 0x810 <Timebase_Timer_Config+0xb0>
	
	temp/=UpdateRateHz;
     818:	98 01       	movw	r18, r16
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	7b e1       	ldi	r23, 0x1B	; 27
     822:	87 eb       	ldi	r24, 0xB7	; 183
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     82a:	72 2e       	mov	r7, r18
     82c:	83 2e       	mov	r8, r19
     82e:	94 2e       	mov	r9, r20
     830:	e5 2e       	mov	r14, r21
     832:	5e 01       	movw	r10, r28
     834:	08 94       	sec
     836:	a1 1c       	adc	r10, r1
     838:	b1 1c       	adc	r11, r1
     83a:	c9 01       	movw	r24, r18
     83c:	da 01       	movw	r26, r20
     83e:	9c 01       	movw	r18, r24
     840:	ad 01       	movw	r20, r26
     842:	ff 24       	eor	r15, r15
     844:	14 c0       	rjmp	.+40     	; 0x86e <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq=temp;
	  curr_freq/=clock_div_factor[clock_div_index];
     846:	f5 01       	movw	r30, r10
     848:	21 91       	ld	r18, Z+
     84a:	31 91       	ld	r19, Z+
     84c:	5f 01       	movw	r10, r30
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	67 2d       	mov	r22, r7
     854:	78 2d       	mov	r23, r8
     856:	89 2d       	mov	r24, r9
     858:	9e 2d       	mov	r25, r14
     85a:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     85e:	c9 01       	movw	r24, r18
     860:	da 01       	movw	r26, r20
     862:	9c 01       	movw	r18, r24
     864:	ad 01       	movw	r20, r26
	  clock_div_index++;
     866:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     868:	f5 e0       	ldi	r31, 0x05	; 5
     86a:	ff 16       	cp	r15, r31
     86c:	31 f0       	breq	.+12     	; 0x87a <Timebase_Timer_Config+0x11a>
	temp/=UpdateRateHz;
	
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
     86e:	2f 3f       	cpi	r18, 0xFF	; 255
     870:	31 05       	cpc	r19, r1
     872:	41 05       	cpc	r20, r1
     874:	51 05       	cpc	r21, r1
     876:	09 f0       	breq	.+2      	; 0x87a <Timebase_Timer_Config+0x11a>
     878:	30 f7       	brcc	.-52     	; 0x846 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index-=1;
     87a:	8f 2d       	mov	r24, r15
     87c:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     87e:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     880:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     882:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     886:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     888:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     88a:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     88c:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     88e:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     890:	88 23       	and	r24, r24
     892:	11 f4       	brne	.+4      	; 0x898 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	0f c0       	rjmp	.+30     	; 0x8b6 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	11 f4       	brne	.+4      	; 0x8a0 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0b c0       	rjmp	.+22     	; 0x8b6 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     8b0:	84 30       	cpi	r24, 0x04	; 4
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     8b4:	85 e0       	ldi	r24, 0x05	; 5
     8b6:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = 0xFF-curr_freq;
     8b8:	82 2f       	mov	r24, r18
     8ba:	80 95       	com	r24
     8bc:	f6 01       	movw	r30, r12
     8be:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     8c0:	83 81       	ldd	r24, Z+3	; 0x03
     8c2:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 6e 00 	sts	0x006E, r24
    sei();
     8ca:	78 94       	sei
  }
  Timebase->Config.UpdateRate=UpdateRateHz;
     8cc:	f6 01       	movw	r30, r12
     8ce:	12 83       	std	Z+2, r17	; 0x02
     8d0:	01 83       	std	Z+1, r16	; 0x01
}
     8d2:	2a 96       	adiw	r28, 0x0a	; 10
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	7f 90       	pop	r7
     8f8:	08 95       	ret

000008fa <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8fa:	e0 91 43 01 	lds	r30, 0x0143
     8fe:	f0 91 44 01 	lds	r31, 0x0144
     902:	80 89       	ldd	r24, Z+16	; 0x10
}
     904:	08 95       	ret

00000906 <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     906:	e0 91 43 01 	lds	r30, 0x0143
     90a:	f0 91 44 01 	lds	r31, 0x0144
     90e:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     910:	8f 33       	cpi	r24, 0x3F	; 63
     912:	18 f4       	brcc	.+6      	; 0x91a <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens+=1;
     914:	80 89       	ldd	r24, Z+16	; 0x10
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	80 8b       	std	Z+16, r24	; 0x10
     91a:	08 95       	ret

0000091c <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     91c:	e0 91 43 01 	lds	r30, 0x0143
     920:	f0 91 44 01 	lds	r31, 0x0144
     924:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     926:	88 23       	and	r24, r24
     928:	19 f0       	breq	.+6      	; 0x930 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens-=1;
     92a:	80 89       	ldd	r24, Z+16	; 0x10
     92c:	81 50       	subi	r24, 0x01	; 1
     92e:	80 8b       	std	Z+16, r24	; 0x10
     930:	08 95       	ret

00000932 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens=0;
     932:	e0 91 43 01 	lds	r30, 0x0143
     936:	f0 91 44 01 	lds	r31, 0x0144
     93a:	10 8a       	std	Z+16, r1	; 0x10
}
     93c:	08 95       	ret

0000093e <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     93e:	e0 91 43 01 	lds	r30, 0x0143
     942:	f0 91 44 01 	lds	r31, 0x0144
     946:	20 85       	ldd	r18, Z+8	; 0x08
     948:	31 85       	ldd	r19, Z+9	; 0x09
     94a:	42 85       	ldd	r20, Z+10	; 0x0a
     94c:	53 85       	ldd	r21, Z+11	; 0x0b
}
     94e:	b9 01       	movw	r22, r18
     950:	ca 01       	movw	r24, r20
     952:	08 95       	ret

00000954 <Timebase_Timer_Get_Seconds>:

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     954:	e0 91 43 01 	lds	r30, 0x0143
     958:	f0 91 44 01 	lds	r31, 0x0144
     95c:	24 85       	ldd	r18, Z+12	; 0x0c
     95e:	35 85       	ldd	r19, Z+13	; 0x0d
     960:	46 85       	ldd	r20, Z+14	; 0x0e
     962:	57 85       	ldd	r21, Z+15	; 0x0f
}
     964:	b9 01       	movw	r22, r18
     966:	ca 01       	movw	r24, r20
     968:	08 95       	ret

0000096a <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint32_t value){
  Timebase->Time.SubSeconds=value;
     96a:	e0 91 43 01 	lds	r30, 0x0143
     96e:	f0 91 44 01 	lds	r31, 0x0144
     972:	60 87       	std	Z+8, r22	; 0x08
     974:	71 87       	std	Z+9, r23	; 0x09
     976:	82 87       	std	Z+10, r24	; 0x0a
     978:	93 87       	std	Z+11, r25	; 0x0b
}
     97a:	08 95       	ret

0000097c <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
     97c:	e0 91 43 01 	lds	r30, 0x0143
     980:	f0 91 44 01 	lds	r31, 0x0144
     984:	64 87       	std	Z+12, r22	; 0x0c
     986:	75 87       	std	Z+13, r23	; 0x0d
     988:	86 87       	std	Z+14, r24	; 0x0e
     98a:	97 87       	std	Z+15, r25	; 0x0f
}
     98c:	08 95       	ret

0000098e <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     98e:	9c 01       	movw	r18, r24


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     990:	e0 91 43 01 	lds	r30, 0x0143
     994:	f0 91 44 01 	lds	r31, 0x0144
     998:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     99a:	8f 33       	cpi	r24, 0x3F	; 63
     99c:	18 f4       	brcc	.+6      	; 0x9a4 <Timebase_Timer_Delay_SubSeconds+0x16>
    Timebase->ActiveTokens+=1;
     99e:	80 89       	ldd	r24, Z+16	; 0x10
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	80 8b       	std	Z+16, r24	; 0x10
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9a4:	80 85       	ldd	r24, Z+8	; 0x08
     9a6:	91 85       	ldd	r25, Z+9	; 0x09
     9a8:	a2 85       	ldd	r26, Z+10	; 0x0a
     9aa:	b3 85       	ldd	r27, Z+11	; 0x0b
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	28 0f       	add	r18, r24
     9b2:	39 1f       	adc	r19, r25
     9b4:	4a 1f       	adc	r20, r26
     9b6:	5b 1f       	adc	r21, r27
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9b8:	80 85       	ldd	r24, Z+8	; 0x08
     9ba:	91 85       	ldd	r25, Z+9	; 0x09
     9bc:	a2 85       	ldd	r26, Z+10	; 0x0a
     9be:	b3 85       	ldd	r27, Z+11	; 0x0b
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     9c0:	82 17       	cp	r24, r18
     9c2:	93 07       	cpc	r25, r19
     9c4:	a4 07       	cpc	r26, r20
     9c6:	b5 07       	cpc	r27, r21
     9c8:	b8 f3       	brcs	.-18     	; 0x9b8 <Timebase_Timer_Delay_SubSeconds+0x2a>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     9ca:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     9cc:	88 23       	and	r24, r24
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <Timebase_Timer_Delay_SubSeconds+0x48>
    Timebase->ActiveTokens-=1;
     9d0:	80 89       	ldd	r24, Z+16	; 0x10
     9d2:	81 50       	subi	r24, 0x01	; 1
     9d4:	80 8b       	std	Z+16, r24	; 0x10
     9d6:	08 95       	ret

000009d8 <Timebase_Timer_Delay_Seconds>:
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Remove();
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9e0:	e0 91 43 01 	lds	r30, 0x0143
     9e4:	f0 91 44 01 	lds	r31, 0x0144
     9e8:	24 85       	ldd	r18, Z+12	; 0x0c
     9ea:	35 85       	ldd	r19, Z+13	; 0x0d
     9ec:	46 85       	ldd	r20, Z+14	; 0x0e
     9ee:	57 85       	ldd	r21, Z+15	; 0x0f
  Timebase_Token_Remove();
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
     9f0:	7c 01       	movw	r14, r24
     9f2:	00 e0       	ldi	r16, 0x00	; 0
     9f4:	10 e0       	ldi	r17, 0x00	; 0
     9f6:	e2 0e       	add	r14, r18
     9f8:	f3 1e       	adc	r15, r19
     9fa:	04 1f       	adc	r16, r20
     9fc:	15 1f       	adc	r17, r21
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9fe:	80 85       	ldd	r24, Z+8	; 0x08
     a00:	91 85       	ldd	r25, Z+9	; 0x09
     a02:	a2 85       	ldd	r26, Z+10	; 0x0a
     a04:	b3 85       	ldd	r27, Z+11	; 0x0b
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     a06:	8e 15       	cp	r24, r14
     a08:	9f 05       	cpc	r25, r15
     a0a:	a0 07       	cpc	r26, r16
     a0c:	b1 07       	cpc	r27, r17
     a0e:	b8 f3       	brcs	.-18     	; 0x9fe <Timebase_Timer_Delay_Seconds+0x26>
}
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	08 95       	ret

00000a1a <Timebase_Reset>:
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
     a1a:	08 95       	ret

00000a1c <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
     a22:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
     a26:	c8 01       	movw	r24, r16
     a28:	0e 94 b0 03 	call	0x760	; 0x760 <Timebase_Timer_Config>
  Timebase_Reset();
}
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <Timebase_Main_Loop_Executables>:
  Timebase_UpCounter_Update_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
  #endif
}
     a32:	08 95       	ret

00000a34 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
  Timebase->Time.SubSeconds++;
     a38:	c0 91 43 01 	lds	r28, 0x0143
     a3c:	d0 91 44 01 	lds	r29, 0x0144
     a40:	88 85       	ldd	r24, Y+8	; 0x08
     a42:	99 85       	ldd	r25, Y+9	; 0x09
     a44:	aa 85       	ldd	r26, Y+10	; 0x0a
     a46:	bb 85       	ldd	r27, Y+11	; 0x0b
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	a1 1d       	adc	r26, r1
     a4c:	b1 1d       	adc	r27, r1
     a4e:	88 87       	std	Y+8, r24	; 0x08
     a50:	99 87       	std	Y+9, r25	; 0x09
     a52:	aa 87       	std	Y+10, r26	; 0x0a
     a54:	bb 87       	std	Y+11, r27	; 0x0b
  TCNT0  = Timebase->Time.OVFUpdateValue;
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
     a5a:	68 85       	ldd	r22, Y+8	; 0x08
     a5c:	79 85       	ldd	r23, Y+9	; 0x09
     a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a60:	9b 85       	ldd	r25, Y+11	; 0x0b
     a62:	29 81       	ldd	r18, Y+1	; 0x01
     a64:	3a 81       	ldd	r19, Y+2	; 0x02
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     a6e:	61 15       	cp	r22, r1
     a70:	71 05       	cpc	r23, r1
     a72:	81 05       	cpc	r24, r1
     a74:	91 05       	cpc	r25, r1
     a76:	91 f4       	brne	.+36     	; 0xa9c <Timebase_ISR_Executables+0x68>
    Timebase->Time.Seconds++;
     a78:	8c 85       	ldd	r24, Y+12	; 0x0c
     a7a:	9d 85       	ldd	r25, Y+13	; 0x0d
     a7c:	ae 85       	ldd	r26, Y+14	; 0x0e
     a7e:	bf 85       	ldd	r27, Y+15	; 0x0f
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	a1 1d       	adc	r26, r1
     a84:	b1 1d       	adc	r27, r1
     a86:	8c 87       	std	Y+12, r24	; 0x0c
     a88:	9d 87       	std	Y+13, r25	; 0x0d
     a8a:	ae 87       	std	Y+14, r26	; 0x0e
     a8c:	bf 87       	std	Y+15, r27	; 0x0f


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     a8e:	88 89       	ldd	r24, Y+16	; 0x10
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
     a90:	88 23       	and	r24, r24
     a92:	21 f4       	brne	.+8      	; 0xa9c <Timebase_ISR_Executables+0x68>
      Timebase->Time.SubSeconds = 0;
     a94:	18 86       	std	Y+8, r1	; 0x08
     a96:	19 86       	std	Y+9, r1	; 0x09
     a98:	1a 86       	std	Y+10, r1	; 0x0a
     a9a:	1b 86       	std	Y+11, r1	; 0x0b
    }
	#endif
  }
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <__vector_16>:

ISR(TIMER0_OVF_vect){
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	ef 93       	push	r30
     ac2:	ff 93       	push	r31
  Timebase_ISR_Executables();
     ac4:	0e 94 1a 05 	call	0xa34	; 0xa34 <Timebase_ISR_Executables>
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	bf 91       	pop	r27
     ace:	af 91       	pop	r26
     ad0:	9f 91       	pop	r25
     ad2:	8f 91       	pop	r24
     ad4:	7f 91       	pop	r23
     ad6:	6f 91       	pop	r22
     ad8:	5f 91       	pop	r21
     ada:	4f 91       	pop	r20
     adc:	3f 91       	pop	r19
     ade:	2f 91       	pop	r18
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <IIR_Butterworth_Init>:
iir_t   IIR[3];

void IIR_Butterworth_Init(void){
  for(uint8_t i=0;i<3;i++){
    IIR[i].Alpha=0;
    IIR[i].Input=0;
     aea:	10 92 57 01 	sts	0x0157, r1
     aee:	10 92 58 01 	sts	0x0158, r1
     af2:	10 92 59 01 	sts	0x0159, r1
     af6:	10 92 5a 01 	sts	0x015A, r1
    IIR[i].Output=0;
     afa:	10 92 5b 01 	sts	0x015B, r1
     afe:	10 92 5c 01 	sts	0x015C, r1
     b02:	10 92 5d 01 	sts	0x015D, r1
     b06:	10 92 5e 01 	sts	0x015E, r1
iir_t   IIR[3];

void IIR_Butterworth_Init(void){
  for(uint8_t i=0;i<3;i++){
    IIR[i].Alpha=0;
    IIR[i].Input=0;
     b0a:	10 92 60 01 	sts	0x0160, r1
     b0e:	10 92 61 01 	sts	0x0161, r1
     b12:	10 92 62 01 	sts	0x0162, r1
     b16:	10 92 63 01 	sts	0x0163, r1
    IIR[i].Output=0;
     b1a:	10 92 64 01 	sts	0x0164, r1
     b1e:	10 92 65 01 	sts	0x0165, r1
     b22:	10 92 66 01 	sts	0x0166, r1
     b26:	10 92 67 01 	sts	0x0167, r1
iir_t   IIR[3];

void IIR_Butterworth_Init(void){
  for(uint8_t i=0;i<3;i++){
    IIR[i].Alpha=0;
    IIR[i].Input=0;
     b2a:	10 92 69 01 	sts	0x0169, r1
     b2e:	10 92 6a 01 	sts	0x016A, r1
     b32:	10 92 6b 01 	sts	0x016B, r1
     b36:	10 92 6c 01 	sts	0x016C, r1
    IIR[i].Output=0;
     b3a:	10 92 6d 01 	sts	0x016D, r1
     b3e:	10 92 6e 01 	sts	0x016E, r1
     b42:	10 92 6f 01 	sts	0x016F, r1
     b46:	10 92 70 01 	sts	0x0170, r1
  }
  #ifdef IIR_BUTTERWORTH_TEMP_ALPHA
  IIR[0].Alpha=IIR_BUTTERWORTH_TEMP_ALPHA;
     b4a:	8c e3       	ldi	r24, 0x3C	; 60
     b4c:	80 93 56 01 	sts	0x0156, r24
  #endif
  
  #ifdef IIR_BUTTERWORTH_CURR_ALPHA
  IIR[1].Alpha=IIR_BUTTERWORTH_CURR_ALPHA;
     b50:	8e e1       	ldi	r24, 0x1E	; 30
     b52:	80 93 5f 01 	sts	0x015F, r24
  #endif
  
  #ifdef IIR_BUTTERWORTH_VOLT_ALPHA
  IIR[2].Alpha=IIR_BUTTERWORTH_VOLT_ALPHA;
     b56:	86 e4       	ldi	r24, 0x46	; 70
     b58:	80 93 68 01 	sts	0x0168, r24
  #endif
}
     b5c:	08 95       	ret

00000b5e <IIR_Butterworth>:

int32_t IIR_Butterworth(uint8_t channel, int32_t input){
     b5e:	2f 92       	push	r2
     b60:	3f 92       	push	r3
     b62:	4f 92       	push	r4
     b64:	5f 92       	push	r5
     b66:	6f 92       	push	r6
     b68:	7f 92       	push	r7
     b6a:	8f 92       	push	r8
     b6c:	9f 92       	push	r9
     b6e:	af 92       	push	r10
     b70:	bf 92       	push	r11
     b72:	cf 92       	push	r12
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	1a 01       	movw	r2, r20
     b80:	2b 01       	movw	r4, r22
  IIR[channel].Input=input;
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	4c 01       	movw	r8, r24
     b86:	33 e0       	ldi	r19, 0x03	; 3
     b88:	88 0c       	add	r8, r8
     b8a:	99 1c       	adc	r9, r9
     b8c:	3a 95       	dec	r19
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <IIR_Butterworth+0x2a>
     b90:	88 0e       	add	r8, r24
     b92:	99 1e       	adc	r9, r25
     b94:	86 e5       	ldi	r24, 0x56	; 86
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	88 0e       	add	r8, r24
     b9a:	99 1e       	adc	r9, r25
     b9c:	f4 01       	movw	r30, r8
     b9e:	41 83       	std	Z+1, r20	; 0x01
     ba0:	52 83       	std	Z+2, r21	; 0x02
     ba2:	63 83       	std	Z+3, r22	; 0x03
     ba4:	74 83       	std	Z+4, r23	; 0x04
  IIR[channel].Output =(IIR[channel].Input*IIR[channel].Alpha)+((100-IIR[channel].Alpha)*IIR[channel].Output);
     ba6:	a0 80       	ld	r10, Z
  IIR[channel].Output/= 100;
     ba8:	64 e6       	ldi	r22, 0x64	; 100
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	6a 19       	sub	r22, r10
     bae:	71 09       	sbc	r23, r1
     bb0:	88 27       	eor	r24, r24
     bb2:	77 fd       	sbrc	r23, 7
     bb4:	80 95       	com	r24
     bb6:	98 2f       	mov	r25, r24
     bb8:	25 e0       	ldi	r18, 0x05	; 5
     bba:	62 2e       	mov	r6, r18
     bbc:	71 2c       	mov	r7, r1
     bbe:	68 0c       	add	r6, r8
     bc0:	79 1c       	adc	r7, r9
     bc2:	25 81       	ldd	r18, Z+5	; 0x05
     bc4:	36 81       	ldd	r19, Z+6	; 0x06
     bc6:	47 81       	ldd	r20, Z+7	; 0x07
     bc8:	50 85       	ldd	r21, Z+8	; 0x08
     bca:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
     bce:	7b 01       	movw	r14, r22
     bd0:	8c 01       	movw	r16, r24
     bd2:	bb 24       	eor	r11, r11
     bd4:	cc 24       	eor	r12, r12
     bd6:	dd 24       	eor	r13, r13
     bd8:	c2 01       	movw	r24, r4
     bda:	b1 01       	movw	r22, r2
     bdc:	a6 01       	movw	r20, r12
     bde:	95 01       	movw	r18, r10
     be0:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
     be4:	e6 0e       	add	r14, r22
     be6:	f7 1e       	adc	r15, r23
     be8:	08 1f       	adc	r16, r24
     bea:	19 1f       	adc	r17, r25
     bec:	c8 01       	movw	r24, r16
     bee:	b7 01       	movw	r22, r14
     bf0:	24 e6       	ldi	r18, 0x64	; 100
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	0e 94 ed 07 	call	0xfda	; 0xfda <__divmodsi4>
     bfc:	ca 01       	movw	r24, r20
     bfe:	f4 01       	movw	r30, r8
     c00:	25 83       	std	Z+5, r18	; 0x05
     c02:	f3 01       	movw	r30, r6
     c04:	31 83       	std	Z+1, r19	; 0x01
     c06:	42 83       	std	Z+2, r20	; 0x02
     c08:	93 83       	std	Z+3, r25	; 0x03
  return IIR[channel].Output;
}
     c0a:	b9 01       	movw	r22, r18
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	af 90       	pop	r10
     c1c:	9f 90       	pop	r9
     c1e:	8f 90       	pop	r8
     c20:	7f 90       	pop	r7
     c22:	6f 90       	pop	r6
     c24:	5f 90       	pop	r5
     c26:	4f 90       	pop	r4
     c28:	3f 90       	pop	r3
     c2a:	2f 90       	pop	r2
     c2c:	08 95       	ret

00000c2e <ADC_Init>:

void ADC_Init(void){
  ADMUX  =(1<<REFS0)|(1<<REFS1);
     c2e:	80 ec       	ldi	r24, 0xC0	; 192
     c30:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
     c34:	ea e7       	ldi	r30, 0x7A	; 122
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	86 e0       	ldi	r24, 0x06	; 6
     c3a:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
     c3c:	80 81       	ld	r24, Z
     c3e:	80 68       	ori	r24, 0x80	; 128
     c40:	80 83       	st	Z, r24
  IIR_Butterworth_Init();
     c42:	0e 94 75 05 	call	0xaea	; 0xaea <IIR_Butterworth_Init>
}
     c46:	08 95       	ret

00000c48 <ADC_Read>:

uint16_t ADC_Read(uint8_t channel){
  uint8_t admux=(0xC0|channel);
     c48:	98 2f       	mov	r25, r24
     c4a:	90 6c       	ori	r25, 0xC0	; 192
  if(ADMUX!=admux){ADMUX=admux;}
     c4c:	80 91 7c 00 	lds	r24, 0x007C
     c50:	89 17       	cp	r24, r25
     c52:	11 f0       	breq	.+4      	; 0xc58 <ADC_Read+0x10>
     c54:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
     c58:	80 91 7a 00 	lds	r24, 0x007A
     c5c:	80 64       	ori	r24, 0x40	; 64
     c5e:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA &(1<<ADIF)));
     c62:	80 91 7a 00 	lds	r24, 0x007A
     c66:	84 ff       	sbrs	r24, 4
     c68:	fc cf       	rjmp	.-8      	; 0xc62 <ADC_Read+0x1a>
  ADCSRA|=(1<<ADIF);
     c6a:	80 91 7a 00 	lds	r24, 0x007A
     c6e:	80 61       	ori	r24, 0x10	; 16
     c70:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
     c74:	20 91 78 00 	lds	r18, 0x0078
     c78:	30 91 79 00 	lds	r19, 0x0079
}
     c7c:	c9 01       	movw	r24, r18
     c7e:	08 95       	ret

00000c80 <ADC_Read_Temperature>:


uint16_t ADC_Read_Temperature(uint8_t tempearure_factor){
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	d8 2e       	mov	r13, r24
     c90:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_T);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_Read>
}


uint16_t ADC_Read_Temperature(uint8_t tempearure_factor){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
     c98:	1f 5f       	subi	r17, 0xFF	; 255
     c9a:	14 30       	cpi	r17, 0x04	; 4
     c9c:	d1 f7       	brne	.-12     	; 0xc92 <ADC_Read_Temperature+0x12>
     c9e:	ee 24       	eor	r14, r14
     ca0:	ff 24       	eor	r15, r15
     ca2:	87 01       	movw	r16, r14
     ca4:	c0 e0       	ldi	r28, 0x00	; 0
     ca6:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t dummy=ADC_Read(ADC_CHANNEL_T);
	dummy=0xFF;
  }
  
  for(uint16_t i=0;i<ADC_SMPL_T;i++){
    sum+=ADC_Read(ADC_CHANNEL_T);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_Read>
     cae:	a0 e0       	ldi	r26, 0x00	; 0
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e8 0e       	add	r14, r24
     cb4:	f9 1e       	adc	r15, r25
     cb6:	0a 1f       	adc	r16, r26
     cb8:	1b 1f       	adc	r17, r27
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_T);
	dummy=0xFF;
  }
  
  for(uint16_t i=0;i<ADC_SMPL_T;i++){
     cba:	21 96       	adiw	r28, 0x01	; 1
     cbc:	c0 34       	cpi	r28, 0x40	; 64
     cbe:	d1 05       	cpc	r29, r1
     cc0:	99 f7       	brne	.-26     	; 0xca8 <ADC_Read_Temperature+0x28>
    sum+=ADC_Read(ADC_CHANNEL_T);
  }
  
  sum/=ADC_SMPL_T;
     cc2:	46 e0       	ldi	r20, 0x06	; 6
     cc4:	16 95       	lsr	r17
     cc6:	07 95       	ror	r16
     cc8:	f7 94       	ror	r15
     cca:	e7 94       	ror	r14
     ccc:	4a 95       	dec	r20
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <ADC_Read_Temperature+0x44>
  sum*=tempearure_factor;
     cd0:	2d 2d       	mov	r18, r13
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	c8 01       	movw	r24, r16
     cda:	b7 01       	movw	r22, r14
     cdc:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
  sum/=100;
  if(sum<0){sum=0;}
  #ifdef IIR_BUTTERWORTH_TEMP_ALPHA
  sum=IIR_Butterworth(0,sum);
     ce0:	24 e6       	ldi	r18, 0x64	; 100
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	ba 01       	movw	r22, r20
     cf0:	a9 01       	movw	r20, r18
     cf2:	0e 94 af 05 	call	0xb5e	; 0xb5e <IIR_Butterworth>
  #endif
  return sum;
}
     cf6:	cb 01       	movw	r24, r22
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	08 95       	ret

00000d08 <ADC_Read_Current>:

uint16_t ADC_Read_Current(void){
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_I);
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_Read>
  return sum;
}

uint16_t ADC_Read_Current(void){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
     d1a:	1f 5f       	subi	r17, 0xFF	; 255
     d1c:	14 30       	cpi	r17, 0x04	; 4
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <ADC_Read_Current+0xc>
     d20:	ee 24       	eor	r14, r14
     d22:	ff 24       	eor	r15, r15
     d24:	87 01       	movw	r16, r14
     d26:	dd 24       	eor	r13, r13
    uint16_t dummy=ADC_Read(ADC_CHANNEL_I);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_I;i++){
    sum+=ADC_Read(ADC_CHANNEL_I);
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_Read>
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e8 0e       	add	r14, r24
     d34:	f9 1e       	adc	r15, r25
     d36:	0a 1f       	adc	r16, r26
     d38:	1b 1f       	adc	r17, r27
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_I);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_I;i++){
     d3a:	d3 94       	inc	r13
     d3c:	80 e1       	ldi	r24, 0x10	; 16
     d3e:	d8 16       	cp	r13, r24
     d40:	99 f7       	brne	.-26     	; 0xd28 <ADC_Read_Current+0x20>
    sum+=ADC_Read(ADC_CHANNEL_I);
  }
  sum/=ADC_SMPL_I;
     d42:	54 e0       	ldi	r21, 0x04	; 4
     d44:	16 95       	lsr	r17
     d46:	07 95       	ror	r16
     d48:	f7 94       	ror	r15
     d4a:	e7 94       	ror	r14
     d4c:	5a 95       	dec	r21
     d4e:	d1 f7       	brne	.-12     	; 0xd44 <ADC_Read_Current+0x3c>
  sum*=1000;
     d50:	c8 01       	movw	r24, r16
     d52:	b7 01       	movw	r22, r14
     d54:	28 ee       	ldi	r18, 0xE8	; 232
     d56:	33 e0       	ldi	r19, 0x03	; 3
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
  sum/=SENSE_RES_I;
  #ifdef IIR_BUTTERWORTH_CURR_ALPHA
  sum=IIR_Butterworth(1,sum);
     d60:	22 e3       	ldi	r18, 0x32	; 50
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	ba 01       	movw	r22, r20
     d70:	a9 01       	movw	r20, r18
     d72:	0e 94 af 05 	call	0xb5e	; 0xb5e <IIR_Butterworth>
  #endif
  return sum;
}
     d76:	cb 01       	movw	r24, r22
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	08 95       	ret

00000d84 <ADC_Read_Input_Voltage>:

uint8_t ADC_Read_Input_Voltage(void){
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_V);
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_Read>
  return sum;
}

uint8_t ADC_Read_Input_Voltage(void){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
     d96:	1f 5f       	subi	r17, 0xFF	; 255
     d98:	14 30       	cpi	r17, 0x04	; 4
     d9a:	d1 f7       	brne	.-12     	; 0xd90 <ADC_Read_Input_Voltage+0xc>
     d9c:	ee 24       	eor	r14, r14
     d9e:	ff 24       	eor	r15, r15
     da0:	87 01       	movw	r16, r14
     da2:	dd 24       	eor	r13, r13
    uint16_t dummy=ADC_Read(ADC_CHANNEL_V);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_V;i++){
    sum+=ADC_Read(ADC_CHANNEL_V);
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	0e 94 24 06 	call	0xc48	; 0xc48 <ADC_Read>
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e8 0e       	add	r14, r24
     db0:	f9 1e       	adc	r15, r25
     db2:	0a 1f       	adc	r16, r26
     db4:	1b 1f       	adc	r17, r27
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_V);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_V;i++){
     db6:	d3 94       	inc	r13
     db8:	80 e1       	ldi	r24, 0x10	; 16
     dba:	d8 16       	cp	r13, r24
     dbc:	99 f7       	brne	.-26     	; 0xda4 <ADC_Read_Input_Voltage+0x20>
    sum+=ADC_Read(ADC_CHANNEL_V);
  }
  sum/=ADC_SMPL_V;
     dbe:	f4 e0       	ldi	r31, 0x04	; 4
     dc0:	16 95       	lsr	r17
     dc2:	07 95       	ror	r16
     dc4:	f7 94       	ror	r15
     dc6:	e7 94       	ror	r14
     dc8:	fa 95       	dec	r31
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <ADC_Read_Input_Voltage+0x3c>
  sum*=ADC_IVREF;
     dcc:	c8 01       	movw	r24, r16
     dce:	b7 01       	movw	r22, r14
     dd0:	26 e5       	ldi	r18, 0x56	; 86
     dd2:	34 e0       	ldi	r19, 0x04	; 4
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
  sum/=1024;
     ddc:	ea e0       	ldi	r30, 0x0A	; 10
     dde:	96 95       	lsr	r25
     de0:	87 95       	ror	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	ea 95       	dec	r30
     de8:	d1 f7       	brne	.-12     	; 0xdde <ADC_Read_Input_Voltage+0x5a>
  sum*=ADC_VSNS_VDIV;
     dea:	22 e8       	ldi	r18, 0x82	; 130
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
  sum/=1000;
  #ifdef IIR_BUTTERWORTH_VOLT_ALPHA
  sum=IIR_Butterworth(2,sum);
     df6:	28 ee       	ldi	r18, 0xE8	; 232
     df8:	33 e0       	ldi	r19, 0x03	; 3
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	ba 01       	movw	r22, r20
     e06:	a9 01       	movw	r20, r18
     e08:	0e 94 af 05 	call	0xb5e	; 0xb5e <IIR_Butterworth>
     e0c:	86 2f       	mov	r24, r22
  #endif
  return (uint8_t)sum;
}
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	08 95       	ret

00000e1a <ADC_Read_Power_Draw>:


uint16_t ADC_Read_Power_Draw(uint8_t input_voltage){ 
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	e8 2e       	mov	r14, r24
  uint32_t curr=ADC_Read_Current();
     e24:	0e 94 84 06 	call	0xd08	; 0xd08 <ADC_Read_Current>
     e28:	ff 24       	eor	r15, r15
     e2a:	00 e0       	ldi	r16, 0x00	; 0
     e2c:	10 e0       	ldi	r17, 0x00	; 0
     e2e:	9c 01       	movw	r18, r24
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	c8 01       	movw	r24, r16
     e36:	b7 01       	movw	r22, r14
     e38:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsi3>
     e3c:	28 ee       	ldi	r18, 0xE8	; 232
     e3e:	33 e0       	ldi	r19, 0x03	; 3
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     e48:	c9 01       	movw	r24, r18
  uint32_t pwr= (input_voltage*curr)/1000;
  return (uint16_t)pwr;
}
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	08 95       	ret

00000e54 <Calculate_Power_Bar>:

uint8_t Calculate_Power_Bar(uint16_t max_power, uint16_t power_draw){
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
  uint32_t bar_val=power_draw*100;
     e5c:	24 e6       	ldi	r18, 0x64	; 100
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	62 9f       	mul	r22, r18
     e62:	70 01       	movw	r14, r0
     e64:	63 9f       	mul	r22, r19
     e66:	f0 0c       	add	r15, r0
     e68:	72 9f       	mul	r23, r18
     e6a:	f0 0c       	add	r15, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	00 e0       	ldi	r16, 0x00	; 0
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	9c 01       	movw	r18, r24
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	c8 01       	movw	r24, r16
     e7a:	b7 01       	movw	r22, r14
     e7c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__udivmodsi4>
     e80:	82 2f       	mov	r24, r18
  bar_val=bar_val/max_power;
  return (uint8_t)bar_val;
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	08 95       	ret

00000e8c <Iron_Heater_On>:
}heater_t;

heater_t heater;


void Iron_Heater_On(uint16_t val){
     e8c:	9c 01       	movw	r18, r24
  if((heater.Status==0) && (val>0)){
     e8e:	80 91 71 01 	lds	r24, 0x0171
     e92:	88 23       	and	r24, r24
     e94:	e9 f4       	brne	.+58     	; 0xed0 <Iron_Heater_On+0x44>
     e96:	21 15       	cp	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	d1 f0       	breq	.+52     	; 0xed0 <Iron_Heater_On+0x44>
    heater.RawPWMInput=val;
     e9c:	30 93 77 01 	sts	0x0177, r19
     ea0:	20 93 76 01 	sts	0x0176, r18
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	28 35       	cpi	r18, 0x58	; 88
     ea8:	38 07       	cpc	r19, r24
     eaa:	10 f0       	brcs	.+4      	; 0xeb0 <Iron_Heater_On+0x24>
     eac:	27 e5       	ldi	r18, 0x57	; 87
     eae:	32 e0       	ldi	r19, 0x02	; 2
    if(val>PWM_MAX_VAL){val=PWM_MAX_VAL;}
    OCR1A=val;
     eb0:	30 93 89 00 	sts	0x0089, r19
     eb4:	20 93 88 00 	sts	0x0088, r18
    TCCR1A|=(1<<COM1A1);
     eb8:	80 91 80 00 	lds	r24, 0x0080
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	80 93 80 00 	sts	0x0080, r24
	heater.PwmCurrentValue=val;
     ec2:	30 93 75 01 	sts	0x0175, r19
     ec6:	20 93 74 01 	sts	0x0174, r18
	heater.Status=1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 71 01 	sts	0x0171, r24
     ed0:	08 95       	ret

00000ed2 <Iron_Heater_Off>:
}



void Iron_Heater_Off(void){
  if(heater.Status==1){
     ed2:	80 91 71 01 	lds	r24, 0x0171
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	89 f4       	brne	.+34     	; 0xefc <Iron_Heater_Off+0x2a>
    OCR1A=1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	90 93 89 00 	sts	0x0089, r25
     ee2:	80 93 88 00 	sts	0x0088, r24
	heater.PwmCurrentValue=0;
     ee6:	10 92 75 01 	sts	0x0175, r1
     eea:	10 92 74 01 	sts	0x0174, r1
	heater.Status=0;
     eee:	10 92 71 01 	sts	0x0171, r1
    TCCR1A&=~(1<<COM1A1);
     ef2:	80 91 80 00 	lds	r24, 0x0080
     ef6:	8f 77       	andi	r24, 0x7F	; 127
     ef8:	80 93 80 00 	sts	0x0080, r24
     efc:	08 95       	ret

00000efe <Get_Raw_PWM_Input>:
  }
}

uint16_t Get_Raw_PWM_Input(void){
  return heater.RawPWMInput;
}
     efe:	80 91 76 01 	lds	r24, 0x0176
     f02:	90 91 77 01 	lds	r25, 0x0177
     f06:	08 95       	ret

00000f08 <Get_Current_PWM>:

uint16_t Get_Current_PWM(void){
  return heater.PwmCurrentValue;
}
     f08:	80 91 74 01 	lds	r24, 0x0174
     f0c:	90 91 75 01 	lds	r25, 0x0175
     f10:	08 95       	ret

00000f12 <PWM_Init>:


void PWM_Init(void){
  DDRB|=(1<<1);
     f12:	21 9a       	sbi	0x04, 1	; 4
  PORTB&=~(1<<1);
     f14:	29 98       	cbi	0x05, 1	; 5
  TCCR1A=(1<<COM1A1)|(1<<WGM11);
     f16:	e0 e8       	ldi	r30, 0x80	; 128
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	82 e8       	ldi	r24, 0x82	; 130
     f1c:	80 83       	st	Z, r24
  TCCR1B=(1<<CS10)|(1<<WGM12)|(1<<WGM13);
     f1e:	89 e1       	ldi	r24, 0x19	; 25
     f20:	80 93 81 00 	sts	0x0081, r24
  ICR1=ICR1_TOP_VAL;
     f24:	28 e5       	ldi	r18, 0x58	; 88
     f26:	32 e0       	ldi	r19, 0x02	; 2
     f28:	30 93 87 00 	sts	0x0087, r19
     f2c:	20 93 86 00 	sts	0x0086, r18
  OCR1A=OCR1_INIT_VAL;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	90 93 89 00 	sts	0x0089, r25
     f38:	80 93 88 00 	sts	0x0088, r24
  TCCR1A&=~(1<<COM1A1);
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 77       	andi	r24, 0x7F	; 127
     f40:	80 83       	st	Z, r24
  heater.PwmTopValue=ICR1_TOP_VAL;
     f42:	30 93 73 01 	sts	0x0173, r19
     f46:	20 93 72 01 	sts	0x0172, r18
  heater.RawPWMInput=0;
     f4a:	10 92 77 01 	sts	0x0177, r1
     f4e:	10 92 76 01 	sts	0x0176, r1
  Iron_Heater_Off();
     f52:	0e 94 69 07 	call	0xed2	; 0xed2 <Iron_Heater_Off>
}
     f56:	08 95       	ret

00000f58 <__mulsi3>:
     f58:	62 9f       	mul	r22, r18
     f5a:	d0 01       	movw	r26, r0
     f5c:	73 9f       	mul	r23, r19
     f5e:	f0 01       	movw	r30, r0
     f60:	82 9f       	mul	r24, r18
     f62:	e0 0d       	add	r30, r0
     f64:	f1 1d       	adc	r31, r1
     f66:	64 9f       	mul	r22, r20
     f68:	e0 0d       	add	r30, r0
     f6a:	f1 1d       	adc	r31, r1
     f6c:	92 9f       	mul	r25, r18
     f6e:	f0 0d       	add	r31, r0
     f70:	83 9f       	mul	r24, r19
     f72:	f0 0d       	add	r31, r0
     f74:	74 9f       	mul	r23, r20
     f76:	f0 0d       	add	r31, r0
     f78:	65 9f       	mul	r22, r21
     f7a:	f0 0d       	add	r31, r0
     f7c:	99 27       	eor	r25, r25
     f7e:	72 9f       	mul	r23, r18
     f80:	b0 0d       	add	r27, r0
     f82:	e1 1d       	adc	r30, r1
     f84:	f9 1f       	adc	r31, r25
     f86:	63 9f       	mul	r22, r19
     f88:	b0 0d       	add	r27, r0
     f8a:	e1 1d       	adc	r30, r1
     f8c:	f9 1f       	adc	r31, r25
     f8e:	bd 01       	movw	r22, r26
     f90:	cf 01       	movw	r24, r30
     f92:	11 24       	eor	r1, r1
     f94:	08 95       	ret

00000f96 <__udivmodsi4>:
     f96:	a1 e2       	ldi	r26, 0x21	; 33
     f98:	1a 2e       	mov	r1, r26
     f9a:	aa 1b       	sub	r26, r26
     f9c:	bb 1b       	sub	r27, r27
     f9e:	fd 01       	movw	r30, r26
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <__udivmodsi4_ep>

00000fa2 <__udivmodsi4_loop>:
     fa2:	aa 1f       	adc	r26, r26
     fa4:	bb 1f       	adc	r27, r27
     fa6:	ee 1f       	adc	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	a2 17       	cp	r26, r18
     fac:	b3 07       	cpc	r27, r19
     fae:	e4 07       	cpc	r30, r20
     fb0:	f5 07       	cpc	r31, r21
     fb2:	20 f0       	brcs	.+8      	; 0xfbc <__udivmodsi4_ep>
     fb4:	a2 1b       	sub	r26, r18
     fb6:	b3 0b       	sbc	r27, r19
     fb8:	e4 0b       	sbc	r30, r20
     fba:	f5 0b       	sbc	r31, r21

00000fbc <__udivmodsi4_ep>:
     fbc:	66 1f       	adc	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	88 1f       	adc	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	1a 94       	dec	r1
     fc6:	69 f7       	brne	.-38     	; 0xfa2 <__udivmodsi4_loop>
     fc8:	60 95       	com	r22
     fca:	70 95       	com	r23
     fcc:	80 95       	com	r24
     fce:	90 95       	com	r25
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
     fd4:	bd 01       	movw	r22, r26
     fd6:	cf 01       	movw	r24, r30
     fd8:	08 95       	ret

00000fda <__divmodsi4>:
     fda:	97 fb       	bst	r25, 7
     fdc:	09 2e       	mov	r0, r25
     fde:	05 26       	eor	r0, r21
     fe0:	0e d0       	rcall	.+28     	; 0xffe <__divmodsi4_neg1>
     fe2:	57 fd       	sbrc	r21, 7
     fe4:	04 d0       	rcall	.+8      	; 0xfee <__divmodsi4_neg2>
     fe6:	d7 df       	rcall	.-82     	; 0xf96 <__udivmodsi4>
     fe8:	0a d0       	rcall	.+20     	; 0xffe <__divmodsi4_neg1>
     fea:	00 1c       	adc	r0, r0
     fec:	38 f4       	brcc	.+14     	; 0xffc <__divmodsi4_exit>

00000fee <__divmodsi4_neg2>:
     fee:	50 95       	com	r21
     ff0:	40 95       	com	r20
     ff2:	30 95       	com	r19
     ff4:	21 95       	neg	r18
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	4f 4f       	sbci	r20, 0xFF	; 255
     ffa:	5f 4f       	sbci	r21, 0xFF	; 255

00000ffc <__divmodsi4_exit>:
     ffc:	08 95       	ret

00000ffe <__divmodsi4_neg1>:
     ffe:	f6 f7       	brtc	.-4      	; 0xffc <__divmodsi4_exit>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <_exit>:
    1010:	f8 94       	cli

00001012 <__stop_program>:
    1012:	ff cf       	rjmp	.-2      	; 0x1012 <__stop_program>
