
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000006a2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800108  00800108  0000073e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000028d  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b2  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030e  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000071b  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000446  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000257a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "uart.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  UART_Init(38400);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	76 e9       	ldi	r23, 0x96	; 150
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	cc e2       	ldi	r28, 0x2C	; 44
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  
  while(1){
    
	UART_Transmit_Text((char*)"Hello\r\n");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 bf 01 	call	0x37e	; 0x37e <UART_Transmit_Text>
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	97 e2       	ldi	r25, 0x27	; 39
  c6:	fe 01       	movw	r30, r28
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
  d0:	f4 cf       	rjmp	.-24     	; 0xba <main+0x14>

000000d2 <UART_Config_GPIO>:



void UART_Config_GPIO(void){
	
}
  d2:	08 95       	ret

000000d4 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
  d4:	08 95       	ret

000000d6 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
  d6:	9b 01       	movw	r18, r22
  d8:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
  da:	60 e6       	ldi	r22, 0x60	; 96
  dc:	73 ee       	ldi	r23, 0xE3	; 227
  de:	86 e1       	ldi	r24, 0x16	; 22
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
  f8:	bb 27       	eor	r27, r27
  fa:	a5 2f       	mov	r26, r21
  fc:	94 2f       	mov	r25, r20
  fe:	83 2f       	mov	r24, r19
 100:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 104:	20 93 c4 00 	sts	0x00C4, r18
}
 108:	08 95       	ret

0000010a <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 10a:	e1 ec       	ldi	r30, 0xC1	; 193
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 c2 00 	sts	0x00C2, r24
}
 11a:	08 95       	ret

0000011c <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 11c:	e1 ec       	ldi	r30, 0xC1	; 193
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 61       	ori	r24, 0x10	; 16
 124:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 c2 00 	sts	0x00C2, r24
}
 12c:	08 95       	ret

0000012e <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 12e:	e1 ec       	ldi	r30, 0xC1	; 193
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 68       	ori	r24, 0x80	; 128
 136:	80 83       	st	Z, r24
  sei();
 138:	78 94       	sei
}
 13a:	08 95       	ret

0000013c <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
 13c:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 13e:	80 91 c0 00 	lds	r24, 0x00C0
 142:	85 ff       	sbrs	r24, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <UART_Transmit_Byte+0x2>
  UDR0=val;
 146:	90 93 c6 00 	sts	0x00C6, r25
}
 14a:	08 95       	ret

0000014c <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	0f 92       	push	r0
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 156:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 158:	80 91 c0 00 	lds	r24, 0x00C0
 15c:	84 ff       	sbrs	r24, 4
 15e:	05 c0       	rjmp	.+10     	; 0x16a <UART_Receive_Byte+0x1e>
    val=UDR0;
 160:	80 91 c6 00 	lds	r24, 0x00C6
 164:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 c0       	rjmp	.+16     	; 0x17a <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 16a:	80 91 c0 00 	lds	r24, 0x00C0
 16e:	83 ff       	sbrs	r24, 3
 170:	07 c0       	rjmp	.+14     	; 0x180 <UART_Receive_Byte+0x34>
    val=UDR0;
 172:	80 91 c6 00 	lds	r24, 0x00C6
 176:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 08 01 	sts	0x0108, r24
 17e:	05 c0       	rjmp	.+10     	; 0x18a <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 180:	80 91 c6 00 	lds	r24, 0x00C6
 184:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 186:	10 92 08 01 	sts	0x0108, r1
  }
  return val;
 18a:	89 81       	ldd	r24, Y+1	; 0x01
}
 18c:	0f 90       	pop	r0
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	08 95       	ret

00000194 <UART_Struct_Init>:
}
#endif


void UART_Struct_Init(void){
  UART.Error=0;
 194:	10 92 08 01 	sts	0x0108, r1
 198:	e9 e0       	ldi	r30, 0x09	; 9
 19a:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 19c:	11 92       	st	Z+, r1
#endif


void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	e1 31       	cpi	r30, 0x11	; 17
 1a2:	f8 07       	cpc	r31, r24
 1a4:	d9 f7       	brne	.-10     	; 0x19c <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 1a6:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.BufferSize=UART_BUFFER_SIZE;
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	92 a3       	std	Z+34, r25	; 0x22
 1ae:	81 a3       	std	Z+33, r24	; 0x21
  UART.BufferIndex=0;
 1b0:	14 a2       	std	Z+36, r1	; 0x24
 1b2:	13 a2       	std	Z+35, r1	; 0x23
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <UART_Struct_Init+0x2c>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
 1b8:	e8 5f       	subi	r30, 0xF8	; 248
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	12 86       	std	Z+10, r1	; 0x0a
  UART.InputNumberDigits=0;
    
  #ifdef UART_ENABLE_RX_INT
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	80 91 32 01 	lds	r24, 0x0132
 1c4:	90 91 33 01 	lds	r25, 0x0133
 1c8:	e2 2f       	mov	r30, r18
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	e8 17       	cp	r30, r24
 1ce:	f9 07       	cpc	r31, r25
 1d0:	98 f3       	brcs	.-26     	; 0x1b8 <UART_Struct_Init+0x24>
    UART.Buffer[i]=0;
  }
  #endif
    
  #ifdef UART_CIRCULAR_BUFFER_READ  
  UART.AvailableBytes=0;
 1d2:	10 92 37 01 	sts	0x0137, r1
 1d6:	10 92 36 01 	sts	0x0136, r1
  UART.ReadIndex=0;
 1da:	10 92 39 01 	sts	0x0139, r1
 1de:	10 92 38 01 	sts	0x0138, r1
  #endif

  #ifdef UART_LAST_RECEIVED_TIMESTAMP  
  UART.LastRecivedTimeStamp=0;
  #endif
}
 1e2:	08 95       	ret

000001e4 <UART_Init>:


void UART_Init(uint32_t baud){
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 1f2:	a2 ec       	ldi	r26, 0xC2	; 194
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	96 e0       	ldi	r25, 0x06	; 6
 1f8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 1fa:	80 81       	ld	r24, Z
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 200:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 202:	80 81       	ld	r24, Z
 204:	80 68       	ori	r24, 0x80	; 128
 206:	80 83       	st	Z, r24
  sei();
 208:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
}
 20a:	08 95       	ret

0000020c <UART_Transmit_Byte_Hex>:


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Hex(uint32_t val){
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ab 01       	movw	r20, r22
 214:	bc 01       	movw	r22, r24

  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 216:	4f 3f       	cpi	r20, 0xFF	; 255
 218:	51 05       	cpc	r21, r1
 21a:	61 05       	cpc	r22, r1
 21c:	71 05       	cpc	r23, r1
 21e:	09 f0       	breq	.+2      	; 0x222 <UART_Transmit_Byte_Hex+0x16>
 220:	28 f4       	brcc	.+10     	; 0x22c <UART_Transmit_Byte_Hex+0x20>
 222:	e8 e0       	ldi	r30, 0x08	; 8
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	c2 e0       	ldi	r28, 0x02	; 2
 228:	d0 e0       	ldi	r29, 0x00	; 0
 22a:	11 c0       	rjmp	.+34     	; 0x24e <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 22c:	40 30       	cpi	r20, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	58 07       	cpc	r21, r24
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	68 07       	cpc	r22, r24
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	78 07       	cpc	r23, r24
 23a:	28 f0       	brcs	.+10     	; 0x246 <UART_Transmit_Byte_Hex+0x3a>
 23c:	e0 e2       	ldi	r30, 0x20	; 32
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	c8 e0       	ldi	r28, 0x08	; 8
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	04 c0       	rjmp	.+8      	; 0x24e <UART_Transmit_Byte_Hex+0x42>
 246:	e0 e1       	ldi	r30, 0x10	; 16
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	c4 e0       	ldi	r28, 0x04	; 4
 24c:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 24e:	80 91 c0 00 	lds	r24, 0x00C0
 252:	85 ff       	sbrs	r24, 5
 254:	fc cf       	rjmp	.-8      	; 0x24e <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 25c:	80 91 c0 00 	lds	r24, 0x00C0
 260:	85 ff       	sbrs	r24, 5
 262:	fc cf       	rjmp	.-8      	; 0x25c <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
 264:	88 e7       	ldi	r24, 0x78	; 120
 266:	80 93 c6 00 	sts	0x00C6, r24
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	1f c0       	rjmp	.+62     	; 0x2ac <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 26e:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 270:	db 01       	movw	r26, r22
 272:	ca 01       	movw	r24, r20
 274:	0e 2e       	mov	r0, r30
 276:	04 c0       	rjmp	.+8      	; 0x280 <UART_Transmit_Byte_Hex+0x74>
 278:	b6 95       	lsr	r27
 27a:	a7 95       	ror	r26
 27c:	97 95       	ror	r25
 27e:	87 95       	ror	r24
 280:	0a 94       	dec	r0
 282:	d2 f7       	brpl	.-12     	; 0x278 <UART_Transmit_Byte_Hex+0x6c>
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 28a:	8a 30       	cpi	r24, 0x0A	; 10
 28c:	91 05       	cpc	r25, r1
 28e:	20 f0       	brcs	.+8      	; 0x298 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
 290:	9c 01       	movw	r18, r24
 292:	29 5c       	subi	r18, 0xC9	; 201
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	03 c0       	rjmp	.+6      	; 0x29e <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
 298:	9c 01       	movw	r18, r24
 29a:	20 5d       	subi	r18, 0xD0	; 208
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 29e:	80 91 c0 00 	lds	r24, 0x00C0
 2a2:	85 ff       	sbrs	r24, 5
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
 2a6:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	81 2f       	mov	r24, r17
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	8c 17       	cp	r24, r28
 2b2:	9d 07       	cpc	r25, r29
 2b4:	e0 f2       	brcs	.-72     	; 0x26e <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	08 95       	ret

000002be <UART_Transmit_Byte_Bin>:
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
 2be:	cf 92       	push	r12
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ab 01       	movw	r20, r22
 2d0:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 2d2:	4f 3f       	cpi	r20, 0xFF	; 255
 2d4:	51 05       	cpc	r21, r1
 2d6:	61 05       	cpc	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	09 f0       	breq	.+2      	; 0x2de <UART_Transmit_Byte_Bin+0x20>
 2dc:	10 f4       	brcc	.+4      	; 0x2e2 <UART_Transmit_Byte_Bin+0x24>
 2de:	97 e0       	ldi	r25, 0x07	; 7
 2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 2e2:	40 30       	cpi	r20, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	58 07       	cpc	r21, r24
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	68 07       	cpc	r22, r24
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	78 07       	cpc	r23, r24
 2f0:	10 f0       	brcs	.+4      	; 0x2f6 <UART_Transmit_Byte_Bin+0x38>
 2f2:	9f e1       	ldi	r25, 0x1F	; 31
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <UART_Transmit_Byte_Bin+0x3a>
 2f6:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 2f8:	80 91 c0 00 	lds	r24, 0x00C0
 2fc:	85 ff       	sbrs	r24, 5
 2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 306:	80 91 c0 00 	lds	r24, 0x00C0
 30a:	85 ff       	sbrs	r24, 5
 30c:	fc cf       	rjmp	.-8      	; 0x306 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 30e:	82 e6       	ldi	r24, 0x62	; 98
 310:	80 93 c6 00 	sts	0x00C6, r24
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	30 e0       	ldi	r19, 0x00	; 0
}
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
 318:	e9 2f       	mov	r30, r25
 31a:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 31c:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 31e:	11 e3       	ldi	r17, 0x31	; 49
 320:	ef 01       	movw	r28, r30
 322:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 324:	cf 01       	movw	r24, r30
 326:	82 1b       	sub	r24, r18
 328:	93 0b       	sbc	r25, r19
 32a:	6a 01       	movw	r12, r20
 32c:	7b 01       	movw	r14, r22
 32e:	04 c0       	rjmp	.+8      	; 0x338 <UART_Transmit_Byte_Bin+0x7a>
 330:	f6 94       	lsr	r15
 332:	e7 94       	ror	r14
 334:	d7 94       	ror	r13
 336:	c7 94       	ror	r12
 338:	8a 95       	dec	r24
 33a:	d2 f7       	brpl	.-12     	; 0x330 <UART_Transmit_Byte_Bin+0x72>
 33c:	d7 01       	movw	r26, r14
 33e:	c6 01       	movw	r24, r12
 340:	81 70       	andi	r24, 0x01	; 1
 342:	90 70       	andi	r25, 0x00	; 0
 344:	89 2b       	or	r24, r25
 346:	39 f0       	breq	.+14     	; 0x356 <UART_Transmit_Byte_Bin+0x98>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 348:	80 91 c0 00 	lds	r24, 0x00C0
 34c:	85 ff       	sbrs	r24, 5
 34e:	fc cf       	rjmp	.-8      	; 0x348 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 350:	10 93 c6 00 	sts	0x00C6, r17
 354:	06 c0       	rjmp	.+12     	; 0x362 <UART_Transmit_Byte_Bin+0xa4>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 356:	80 91 c0 00 	lds	r24, 0x00C0
 35a:	85 ff       	sbrs	r24, 5
 35c:	fc cf       	rjmp	.-8      	; 0x356 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 35e:	00 93 c6 00 	sts	0x00C6, r16
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 366:	2c 17       	cp	r18, r28
 368:	3d 07       	cpc	r19, r29
 36a:	e1 f6       	brne	.-72     	; 0x324 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	08 95       	ret

0000037e <UART_Transmit_Text>:
#endif


void UART_Transmit_Text(char *str){
 37e:	ac 01       	movw	r20, r24
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	07 c0       	rjmp	.+14     	; 0x392 <UART_Transmit_Text+0x14>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 384:	80 91 c0 00 	lds	r24, 0x00C0
 388:	85 ff       	sbrs	r24, 5
 38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Text+0x6>
  UDR0=val;
 38c:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 390:	2f 5f       	subi	r18, 0xFF	; 255
#endif


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 392:	fa 01       	movw	r30, r20
 394:	e2 0f       	add	r30, r18
 396:	f1 1d       	adc	r31, r1
 398:	e0 81       	ld	r30, Z
 39a:	ee 23       	and	r30, r30
 39c:	99 f7       	brne	.-26     	; 0x384 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 39e:	08 95       	ret

000003a0 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	6b 01       	movw	r12, r22
 3b0:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 3b2:	61 15       	cp	r22, r1
 3b4:	71 05       	cpc	r23, r1
 3b6:	81 05       	cpc	r24, r1
 3b8:	91 05       	cpc	r25, r1
 3ba:	31 f4       	brne	.+12     	; 0x3c8 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 3bc:	10 92 09 01 	sts	0x0109, r1
    UART.InputNumberDigits=1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 11 01 	sts	0x0111, r24
 3c6:	23 c0       	rjmp	.+70     	; 0x40e <UART_Determine_Digit_Numbers+0x6e>
 3c8:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 3ca:	0b 2d       	mov	r16, r11
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	08 5f       	subi	r16, 0xF8	; 248
 3d0:	1e 4f       	sbci	r17, 0xFE	; 254
 3d2:	c7 01       	movw	r24, r14
 3d4:	b6 01       	movw	r22, r12
 3d6:	2a e0       	ldi	r18, 0x0A	; 10
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 3e2:	f8 01       	movw	r30, r16
 3e4:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 3e6:	c7 01       	movw	r24, r14
 3e8:	b6 01       	movw	r22, r12
 3ea:	2a e0       	ldi	r18, 0x0A	; 10
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	0e 94 2d 03 	call	0x65a	; 0x65a <__udivmodsi4>
 3f6:	c9 01       	movw	r24, r18
 3f8:	da 01       	movw	r26, r20
 3fa:	6c 01       	movw	r12, r24
 3fc:	7d 01       	movw	r14, r26
      i++;
 3fe:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 400:	c1 14       	cp	r12, r1
 402:	d1 04       	cpc	r13, r1
 404:	e1 04       	cpc	r14, r1
 406:	f1 04       	cpc	r15, r1
 408:	01 f7       	brne	.-64     	; 0x3ca <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 40a:	b0 92 11 01 	sts	0x0111, r11
  }
}
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	df 90       	pop	r13
 418:	cf 90       	pop	r12
 41a:	bf 90       	pop	r11
 41c:	08 95       	ret

0000041e <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 41e:	e0 91 11 01 	lds	r30, 0x0111
 422:	0f c0       	rjmp	.+30     	; 0x442 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 424:	2e 2f       	mov	r18, r30
 426:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 428:	e2 2f       	mov	r30, r18
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e8 5f       	subi	r30, 0xF8	; 248
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 432:	80 91 c0 00 	lds	r24, 0x00C0
 436:	85 ff       	sbrs	r24, 5
 438:	fc cf       	rjmp	.-8      	; 0x432 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 43a:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 43c:	90 93 c6 00 	sts	0x00C6, r25
 440:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 442:	ee 23       	and	r30, r30
 444:	79 f7       	brne	.-34     	; 0x424 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 446:	08 95       	ret

00000448 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 448:	9b 01       	movw	r18, r22
 44a:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 44c:	97 ff       	sbrs	r25, 7
 44e:	0e c0       	rjmp	.+28     	; 0x46c <UART_Transmit_Number+0x24>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 450:	80 91 c0 00 	lds	r24, 0x00C0
 454:	85 ff       	sbrs	r24, 5
 456:	fc cf       	rjmp	.-8      	; 0x450 <UART_Transmit_Number+0x8>
  UDR0=val;
 458:	8d e2       	ldi	r24, 0x2D	; 45
 45a:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 45e:	50 95       	com	r21
 460:	40 95       	com	r20
 462:	30 95       	com	r19
 464:	21 95       	neg	r18
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	4f 4f       	sbci	r20, 0xFF	; 255
 46a:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 46c:	ca 01       	movw	r24, r20
 46e:	b9 01       	movw	r22, r18
 470:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 474:	0e 94 0f 02 	call	0x41e	; 0x41e <UART_Transmit_Number_Digits>
}
 478:	08 95       	ret

0000047a <UART_Read_From_Buffer>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
 47a:	fc 01       	movw	r30, r24
 47c:	e8 5f       	subi	r30, 0xF8	; 248
 47e:	fe 4f       	sbci	r31, 0xFE	; 254
 480:	82 85       	ldd	r24, Z+10	; 0x0a
}
 482:	08 95       	ret

00000484 <UART_Current_Buffer_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
 484:	20 91 34 01 	lds	r18, 0x0134
 488:	30 91 35 01 	lds	r19, 0x0135
}
 48c:	c9 01       	movw	r24, r18
 48e:	08 95       	ret

00000490 <UART_Current_Read_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Read_Index(void){
  return UART.ReadIndex;
 490:	20 91 38 01 	lds	r18, 0x0138
 494:	30 91 39 01 	lds	r19, 0x0139
}
 498:	c9 01       	movw	r24, r18
 49a:	08 95       	ret

0000049c <UART_Bytes_Available_To_Read>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Bytes_Available_To_Read(void){
  return UART.AvailableBytes;
 49c:	20 91 36 01 	lds	r18, 0x0136
 4a0:	30 91 37 01 	lds	r19, 0x0137
}
 4a4:	c9 01       	movw	r24, r18
 4a6:	08 95       	ret

000004a8 <UART_Read>:


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read(void){
  
  uint8_t current_byte=UART.Buffer[UART.ReadIndex];
 4a8:	e0 91 38 01 	lds	r30, 0x0138
 4ac:	f0 91 39 01 	lds	r31, 0x0139
 4b0:	e8 5f       	subi	r30, 0xF8	; 248
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	42 85       	ldd	r20, Z+10	; 0x0a
  UART.ReadIndex++;
 4b6:	80 91 38 01 	lds	r24, 0x0138
 4ba:	90 91 39 01 	lds	r25, 0x0139
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	90 93 39 01 	sts	0x0139, r25
 4c4:	80 93 38 01 	sts	0x0138, r24
  if(UART.ReadIndex>=UART.BufferSize){
 4c8:	20 91 38 01 	lds	r18, 0x0138
 4cc:	30 91 39 01 	lds	r19, 0x0139
 4d0:	80 91 32 01 	lds	r24, 0x0132
 4d4:	90 91 33 01 	lds	r25, 0x0133
 4d8:	28 17       	cp	r18, r24
 4da:	39 07       	cpc	r19, r25
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <UART_Read+0x3e>
    UART.ReadIndex=0;
 4de:	10 92 39 01 	sts	0x0139, r1
 4e2:	10 92 38 01 	sts	0x0138, r1
  }
  if(UART.AvailableBytes>0){
 4e6:	80 91 36 01 	lds	r24, 0x0136
 4ea:	90 91 37 01 	lds	r25, 0x0137
 4ee:	89 2b       	or	r24, r25
 4f0:	49 f0       	breq	.+18     	; 0x504 <UART_Read+0x5c>
    UART.AvailableBytes--;
 4f2:	80 91 36 01 	lds	r24, 0x0136
 4f6:	90 91 37 01 	lds	r25, 0x0137
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	90 93 37 01 	sts	0x0137, r25
 500:	80 93 36 01 	sts	0x0136, r24
  }
  return current_byte;
}
 504:	84 2f       	mov	r24, r20
 506:	08 95       	ret

00000508 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
 508:	10 92 08 01 	sts	0x0108, r1
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	06 c0       	rjmp	.+12     	; 0x51e <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
 512:	f9 01       	movw	r30, r18
 514:	e8 5f       	subi	r30, 0xF8	; 248
 516:	fe 4f       	sbci	r31, 0xFE	; 254
 518:	12 86       	std	Z+10, r1	; 0x0a


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
 51a:	2f 5f       	subi	r18, 0xFF	; 255
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	80 91 32 01 	lds	r24, 0x0132
 522:	90 91 33 01 	lds	r25, 0x0133
 526:	28 17       	cp	r18, r24
 528:	39 07       	cpc	r19, r25
 52a:	98 f3       	brcs	.-26     	; 0x512 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
 52c:	10 92 35 01 	sts	0x0135, r1
 530:	10 92 34 01 	sts	0x0134, r1
    
  #ifdef UART_CIRCULAR_BUFFER_READ   
  UART.ReadIndex=0;    
 534:	10 92 39 01 	sts	0x0139, r1
 538:	10 92 38 01 	sts	0x0138, r1
  UART.AvailableBytes=0;
 53c:	10 92 37 01 	sts	0x0137, r1
 540:	10 92 36 01 	sts	0x0136, r1
  #endif
  
  #endif
}
 544:	08 95       	ret

00000546 <UART_Interrupt_Service_Routine>:
}
#endif


#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
 546:	df 93       	push	r29
 548:	cf 93       	push	r28
 54a:	0f 92       	push	r0
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
 550:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
 552:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_Receive_Byte>
 556:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
 558:	80 91 08 01 	lds	r24, 0x0108
 55c:	88 23       	and	r24, r24
 55e:	09 f0       	breq	.+2      	; 0x562 <UART_Interrupt_Service_Routine+0x1c>
 560:	54 c0       	rjmp	.+168    	; 0x60a <UART_Interrupt_Service_Routine+0xc4>
    UART.Buffer[UART.BufferIndex]=received_byte;
 562:	e0 91 34 01 	lds	r30, 0x0134
 566:	f0 91 35 01 	lds	r31, 0x0135
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	e8 5f       	subi	r30, 0xF8	; 248
 56e:	fe 4f       	sbci	r31, 0xFE	; 254
 570:	82 87       	std	Z+10, r24	; 0x0a
    UART.BufferIndex++;
 572:	80 91 34 01 	lds	r24, 0x0134
 576:	90 91 35 01 	lds	r25, 0x0135
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	90 93 35 01 	sts	0x0135, r25
 580:	80 93 34 01 	sts	0x0134, r24

    #ifdef UART_CIRCULAR_BUFFER_READ
    UART.AvailableBytes++;
 584:	80 91 36 01 	lds	r24, 0x0136
 588:	90 91 37 01 	lds	r25, 0x0137
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	90 93 37 01 	sts	0x0137, r25
 592:	80 93 36 01 	sts	0x0136, r24
    if(UART.AvailableBytes>UART.BufferSize){
 596:	20 91 36 01 	lds	r18, 0x0136
 59a:	30 91 37 01 	lds	r19, 0x0137
 59e:	80 91 32 01 	lds	r24, 0x0132
 5a2:	90 91 33 01 	lds	r25, 0x0133
 5a6:	82 17       	cp	r24, r18
 5a8:	93 07       	cpc	r25, r19
 5aa:	00 f5       	brcc	.+64     	; 0x5ec <UART_Interrupt_Service_Routine+0xa6>
      UART.AvailableBytes=UART.BufferSize;
 5ac:	80 91 32 01 	lds	r24, 0x0132
 5b0:	90 91 33 01 	lds	r25, 0x0133
 5b4:	90 93 37 01 	sts	0x0137, r25
 5b8:	80 93 36 01 	sts	0x0136, r24
      UART.ReadIndex++;
 5bc:	80 91 38 01 	lds	r24, 0x0138
 5c0:	90 91 39 01 	lds	r25, 0x0139
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	90 93 39 01 	sts	0x0139, r25
 5ca:	80 93 38 01 	sts	0x0138, r24
      if(UART.ReadIndex>=UART.BufferSize){
 5ce:	20 91 38 01 	lds	r18, 0x0138
 5d2:	30 91 39 01 	lds	r19, 0x0139
 5d6:	80 91 32 01 	lds	r24, 0x0132
 5da:	90 91 33 01 	lds	r25, 0x0133
 5de:	28 17       	cp	r18, r24
 5e0:	39 07       	cpc	r19, r25
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <UART_Interrupt_Service_Routine+0xa6>
        UART.ReadIndex=0;
 5e4:	10 92 39 01 	sts	0x0139, r1
 5e8:	10 92 38 01 	sts	0x0138, r1
      }
    }
    #endif

    if(UART.BufferIndex>=UART.BufferSize){
 5ec:	20 91 34 01 	lds	r18, 0x0134
 5f0:	30 91 35 01 	lds	r19, 0x0135
 5f4:	80 91 32 01 	lds	r24, 0x0132
 5f8:	90 91 33 01 	lds	r25, 0x0133
 5fc:	28 17       	cp	r18, r24
 5fe:	39 07       	cpc	r19, r25
 600:	20 f0       	brcs	.+8      	; 0x60a <UART_Interrupt_Service_Routine+0xc4>
      UART.BufferIndex=0;
 602:	10 92 35 01 	sts	0x0135, r1
 606:	10 92 34 01 	sts	0x0134, r1
    }
    #ifdef UART_LAST_RECEIVED_TIMESTAMP
      UART.LastRecivedTimeStamp=UART_Reference_Time();
    #endif
  }
}
 60a:	0f 90       	pop	r0
 60c:	cf 91       	pop	r28
 60e:	df 91       	pop	r29
 610:	08 95       	ret

00000612 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 634:	0e 94 a3 02 	call	0x546	; 0x546 <UART_Interrupt_Service_Routine>
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <__udivmodsi4>:
 65a:	a1 e2       	ldi	r26, 0x21	; 33
 65c:	1a 2e       	mov	r1, r26
 65e:	aa 1b       	sub	r26, r26
 660:	bb 1b       	sub	r27, r27
 662:	fd 01       	movw	r30, r26
 664:	0d c0       	rjmp	.+26     	; 0x680 <__udivmodsi4_ep>

00000666 <__udivmodsi4_loop>:
 666:	aa 1f       	adc	r26, r26
 668:	bb 1f       	adc	r27, r27
 66a:	ee 1f       	adc	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	a2 17       	cp	r26, r18
 670:	b3 07       	cpc	r27, r19
 672:	e4 07       	cpc	r30, r20
 674:	f5 07       	cpc	r31, r21
 676:	20 f0       	brcs	.+8      	; 0x680 <__udivmodsi4_ep>
 678:	a2 1b       	sub	r26, r18
 67a:	b3 0b       	sbc	r27, r19
 67c:	e4 0b       	sbc	r30, r20
 67e:	f5 0b       	sbc	r31, r21

00000680 <__udivmodsi4_ep>:
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	1a 94       	dec	r1
 68a:	69 f7       	brne	.-38     	; 0x666 <__udivmodsi4_loop>
 68c:	60 95       	com	r22
 68e:	70 95       	com	r23
 690:	80 95       	com	r24
 692:	90 95       	com	r25
 694:	9b 01       	movw	r18, r22
 696:	ac 01       	movw	r20, r24
 698:	bd 01       	movw	r22, r26
 69a:	cf 01       	movw	r24, r30
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
