
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080010e  0080010e  00000b40  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000499  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d0e  00000000  00000000  00001039  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000534  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b79  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00002df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000650  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ea  00000000  00000000  00003714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003cfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "timebase.h"
#include "uart.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  Timebase_Init(100);
  aa:	84 e6       	ldi	r24, 0x64	; 100
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 c4 04 	call	0x988	; 0x988 <Timebase_Init>
  UART_Init(38400);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	76 e9       	ldi	r23, 0x96	; 150
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	c0 e3       	ldi	r28, 0x30	; 48
  c0:	d5 e7       	ldi	r29, 0x75	; 117
  
  while(1){
    
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
  c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <Timebase_Timer_Get_SubSeconds>
  c6:	0e 94 28 02 	call	0x450	; 0x450 <UART_Transmit_Number>
	UART_Transmit_Text((char*)"\r\n");
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 c3 01 	call	0x386	; 0x386 <UART_Transmit_Text>
  d2:	ce 01       	movw	r24, r28
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x2e>
  d8:	f4 cf       	rjmp	.-24     	; 0xc2 <main+0x1c>

000000da <UART_Config_GPIO>:



void UART_Config_GPIO(void){
	
}
  da:	08 95       	ret

000000dc <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
  dc:	08 95       	ret

000000de <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
  de:	9b 01       	movw	r18, r22
  e0:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
  e2:	60 e6       	ldi	r22, 0x60	; 96
  e4:	73 ee       	ldi	r23, 0xE3	; 227
  e6:	86 e1       	ldi	r24, 0x16	; 22
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 2b 05 	call	0xa56	; 0xa56 <__udivmodsi4>
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
  f6:	e0 ec       	ldi	r30, 0xC0	; 192
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 100:	bb 27       	eor	r27, r27
 102:	a5 2f       	mov	r26, r21
 104:	94 2f       	mov	r25, r20
 106:	83 2f       	mov	r24, r19
 108:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 10c:	20 93 c4 00 	sts	0x00C4, r18
}
 110:	08 95       	ret

00000112 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 112:	e1 ec       	ldi	r30, 0xC1	; 193
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	80 93 c2 00 	sts	0x00C2, r24
}
 122:	08 95       	ret

00000124 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	80 93 c2 00 	sts	0x00C2, r24
}
 134:	08 95       	ret

00000136 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	80 83       	st	Z, r24
  sei();
 140:	78 94       	sei
}
 142:	08 95       	ret

00000144 <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
 144:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 146:	80 91 c0 00 	lds	r24, 0x00C0
 14a:	85 ff       	sbrs	r24, 5
 14c:	fc cf       	rjmp	.-8      	; 0x146 <UART_Transmit_Byte+0x2>
  UDR0=val;
 14e:	90 93 c6 00 	sts	0x00C6, r25
}
 152:	08 95       	ret

00000154 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 15e:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 160:	80 91 c0 00 	lds	r24, 0x00C0
 164:	84 ff       	sbrs	r24, 4
 166:	05 c0       	rjmp	.+10     	; 0x172 <UART_Receive_Byte+0x1e>
    val=UDR0;
 168:	80 91 c6 00 	lds	r24, 0x00C6
 16c:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 c0       	rjmp	.+16     	; 0x182 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 172:	80 91 c0 00 	lds	r24, 0x00C0
 176:	83 ff       	sbrs	r24, 3
 178:	07 c0       	rjmp	.+14     	; 0x188 <UART_Receive_Byte+0x34>
    val=UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6
 17e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 0e 01 	sts	0x010E, r24
 186:	05 c0       	rjmp	.+10     	; 0x192 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 188:	80 91 c6 00 	lds	r24, 0x00C6
 18c:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 18e:	10 92 0e 01 	sts	0x010E, r1
  }
  return val;
 192:	89 81       	ldd	r24, Y+1	; 0x01
}
 194:	0f 90       	pop	r0
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <UART_Struct_Init>:
}
#endif


void UART_Struct_Init(void){
  UART.Error=0;
 19c:	10 92 0e 01 	sts	0x010E, r1
 1a0:	ef e0       	ldi	r30, 0x0F	; 15
 1a2:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 1a4:	11 92       	st	Z+, r1
#endif


void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	e7 31       	cpi	r30, 0x17	; 23
 1aa:	f8 07       	cpc	r31, r24
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 1ae:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.BufferSize=UART_BUFFER_SIZE;
 1b0:	80 e2       	ldi	r24, 0x20	; 32
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	92 a3       	std	Z+34, r25	; 0x22
 1b6:	81 a3       	std	Z+33, r24	; 0x21
  UART.BufferIndex=0;
 1b8:	14 a2       	std	Z+36, r1	; 0x24
 1ba:	13 a2       	std	Z+35, r1	; 0x23
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <UART_Struct_Init+0x2c>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
 1c0:	e2 5f       	subi	r30, 0xF2	; 242
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	12 86       	std	Z+10, r1	; 0x0a
  UART.InputNumberDigits=0;
    
  #ifdef UART_ENABLE_RX_INT
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	80 91 38 01 	lds	r24, 0x0138
 1cc:	90 91 39 01 	lds	r25, 0x0139
 1d0:	e2 2f       	mov	r30, r18
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e8 17       	cp	r30, r24
 1d6:	f9 07       	cpc	r31, r25
 1d8:	98 f3       	brcs	.-26     	; 0x1c0 <UART_Struct_Init+0x24>
    UART.Buffer[i]=0;
  }
  #endif
    
  #ifdef UART_CIRCULAR_BUFFER_READ  
  UART.AvailableBytes=0;
 1da:	10 92 3d 01 	sts	0x013D, r1
 1de:	10 92 3c 01 	sts	0x013C, r1
  UART.ReadIndex=0;
 1e2:	10 92 3f 01 	sts	0x013F, r1
 1e6:	10 92 3e 01 	sts	0x013E, r1
  #endif

  #ifdef UART_LAST_RECEIVED_TIMESTAMP  
  UART.LastRecivedTimeStamp=0;
  #endif
}
 1ea:	08 95       	ret

000001ec <UART_Init>:


void UART_Init(uint32_t baud){
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 1ec:	0e 94 6f 00 	call	0xde	; 0xde <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 1f0:	e1 ec       	ldi	r30, 0xC1	; 193
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 1fa:	a2 ec       	ldi	r26, 0xC2	; 194
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	96 e0       	ldi	r25, 0x06	; 6
 200:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 202:	80 81       	ld	r24, Z
 204:	80 61       	ori	r24, 0x10	; 16
 206:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 208:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 20a:	80 81       	ld	r24, Z
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	80 83       	st	Z, r24
  sei();
 210:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
}
 212:	08 95       	ret

00000214 <UART_Transmit_Byte_Hex>:


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Hex(uint32_t val){
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ab 01       	movw	r20, r22
 21c:	bc 01       	movw	r22, r24

  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 21e:	4f 3f       	cpi	r20, 0xFF	; 255
 220:	51 05       	cpc	r21, r1
 222:	61 05       	cpc	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	09 f0       	breq	.+2      	; 0x22a <UART_Transmit_Byte_Hex+0x16>
 228:	28 f4       	brcc	.+10     	; 0x234 <UART_Transmit_Byte_Hex+0x20>
 22a:	e8 e0       	ldi	r30, 0x08	; 8
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	c2 e0       	ldi	r28, 0x02	; 2
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	11 c0       	rjmp	.+34     	; 0x256 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 234:	40 30       	cpi	r20, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	58 07       	cpc	r21, r24
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	68 07       	cpc	r22, r24
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	78 07       	cpc	r23, r24
 242:	28 f0       	brcs	.+10     	; 0x24e <UART_Transmit_Byte_Hex+0x3a>
 244:	e0 e2       	ldi	r30, 0x20	; 32
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	c8 e0       	ldi	r28, 0x08	; 8
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	04 c0       	rjmp	.+8      	; 0x256 <UART_Transmit_Byte_Hex+0x42>
 24e:	e0 e1       	ldi	r30, 0x10	; 16
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	c4 e0       	ldi	r28, 0x04	; 4
 254:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 256:	80 91 c0 00 	lds	r24, 0x00C0
 25a:	85 ff       	sbrs	r24, 5
 25c:	fc cf       	rjmp	.-8      	; 0x256 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 264:	80 91 c0 00 	lds	r24, 0x00C0
 268:	85 ff       	sbrs	r24, 5
 26a:	fc cf       	rjmp	.-8      	; 0x264 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
 26c:	88 e7       	ldi	r24, 0x78	; 120
 26e:	80 93 c6 00 	sts	0x00C6, r24
 272:	10 e0       	ldi	r17, 0x00	; 0
 274:	1f c0       	rjmp	.+62     	; 0x2b4 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 276:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 278:	db 01       	movw	r26, r22
 27a:	ca 01       	movw	r24, r20
 27c:	0e 2e       	mov	r0, r30
 27e:	04 c0       	rjmp	.+8      	; 0x288 <UART_Transmit_Byte_Hex+0x74>
 280:	b6 95       	lsr	r27
 282:	a7 95       	ror	r26
 284:	97 95       	ror	r25
 286:	87 95       	ror	r24
 288:	0a 94       	dec	r0
 28a:	d2 f7       	brpl	.-12     	; 0x280 <UART_Transmit_Byte_Hex+0x6c>
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 292:	8a 30       	cpi	r24, 0x0A	; 10
 294:	91 05       	cpc	r25, r1
 296:	20 f0       	brcs	.+8      	; 0x2a0 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
 298:	9c 01       	movw	r18, r24
 29a:	29 5c       	subi	r18, 0xC9	; 201
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
 2a0:	9c 01       	movw	r18, r24
 2a2:	20 5d       	subi	r18, 0xD0	; 208
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 2a6:	80 91 c0 00 	lds	r24, 0x00C0
 2aa:	85 ff       	sbrs	r24, 5
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
 2ae:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 2b2:	1f 5f       	subi	r17, 0xFF	; 255
 2b4:	81 2f       	mov	r24, r17
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	8c 17       	cp	r24, r28
 2ba:	9d 07       	cpc	r25, r29
 2bc:	e0 f2       	brcs	.-72     	; 0x276 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	08 95       	ret

000002c6 <UART_Transmit_Byte_Bin>:
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ab 01       	movw	r20, r22
 2d8:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 2da:	4f 3f       	cpi	r20, 0xFF	; 255
 2dc:	51 05       	cpc	r21, r1
 2de:	61 05       	cpc	r22, r1
 2e0:	71 05       	cpc	r23, r1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <UART_Transmit_Byte_Bin+0x20>
 2e4:	10 f4       	brcc	.+4      	; 0x2ea <UART_Transmit_Byte_Bin+0x24>
 2e6:	97 e0       	ldi	r25, 0x07	; 7
 2e8:	0b c0       	rjmp	.+22     	; 0x300 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 2ea:	40 30       	cpi	r20, 0x00	; 0
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	58 07       	cpc	r21, r24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	68 07       	cpc	r22, r24
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	78 07       	cpc	r23, r24
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <UART_Transmit_Byte_Bin+0x38>
 2fa:	9f e1       	ldi	r25, 0x1F	; 31
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <UART_Transmit_Byte_Bin+0x3a>
 2fe:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 300:	80 91 c0 00 	lds	r24, 0x00C0
 304:	85 ff       	sbrs	r24, 5
 306:	fc cf       	rjmp	.-8      	; 0x300 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 308:	80 e3       	ldi	r24, 0x30	; 48
 30a:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 30e:	80 91 c0 00 	lds	r24, 0x00C0
 312:	85 ff       	sbrs	r24, 5
 314:	fc cf       	rjmp	.-8      	; 0x30e <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 316:	82 e6       	ldi	r24, 0x62	; 98
 318:	80 93 c6 00 	sts	0x00C6, r24
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
}
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
 320:	e9 2f       	mov	r30, r25
 322:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 324:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 326:	11 e3       	ldi	r17, 0x31	; 49
 328:	ef 01       	movw	r28, r30
 32a:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 32c:	cf 01       	movw	r24, r30
 32e:	82 1b       	sub	r24, r18
 330:	93 0b       	sbc	r25, r19
 332:	6a 01       	movw	r12, r20
 334:	7b 01       	movw	r14, r22
 336:	04 c0       	rjmp	.+8      	; 0x340 <UART_Transmit_Byte_Bin+0x7a>
 338:	f6 94       	lsr	r15
 33a:	e7 94       	ror	r14
 33c:	d7 94       	ror	r13
 33e:	c7 94       	ror	r12
 340:	8a 95       	dec	r24
 342:	d2 f7       	brpl	.-12     	; 0x338 <UART_Transmit_Byte_Bin+0x72>
 344:	d7 01       	movw	r26, r14
 346:	c6 01       	movw	r24, r12
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	90 70       	andi	r25, 0x00	; 0
 34c:	89 2b       	or	r24, r25
 34e:	39 f0       	breq	.+14     	; 0x35e <UART_Transmit_Byte_Bin+0x98>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 350:	80 91 c0 00 	lds	r24, 0x00C0
 354:	85 ff       	sbrs	r24, 5
 356:	fc cf       	rjmp	.-8      	; 0x350 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 358:	10 93 c6 00 	sts	0x00C6, r17
 35c:	06 c0       	rjmp	.+12     	; 0x36a <UART_Transmit_Byte_Bin+0xa4>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 35e:	80 91 c0 00 	lds	r24, 0x00C0
 362:	85 ff       	sbrs	r24, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 366:	00 93 c6 00 	sts	0x00C6, r16
 36a:	2f 5f       	subi	r18, 0xFF	; 255
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 36e:	2c 17       	cp	r18, r28
 370:	3d 07       	cpc	r19, r29
 372:	e1 f6       	brne	.-72     	; 0x32c <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	08 95       	ret

00000386 <UART_Transmit_Text>:
#endif


void UART_Transmit_Text(char *str){
 386:	ac 01       	movw	r20, r24
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	07 c0       	rjmp	.+14     	; 0x39a <UART_Transmit_Text+0x14>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 38c:	80 91 c0 00 	lds	r24, 0x00C0
 390:	85 ff       	sbrs	r24, 5
 392:	fc cf       	rjmp	.-8      	; 0x38c <UART_Transmit_Text+0x6>
  UDR0=val;
 394:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 398:	2f 5f       	subi	r18, 0xFF	; 255
#endif


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 39a:	fa 01       	movw	r30, r20
 39c:	e2 0f       	add	r30, r18
 39e:	f1 1d       	adc	r31, r1
 3a0:	e0 81       	ld	r30, Z
 3a2:	ee 23       	and	r30, r30
 3a4:	99 f7       	brne	.-26     	; 0x38c <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 3a6:	08 95       	ret

000003a8 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 3a8:	bf 92       	push	r11
 3aa:	cf 92       	push	r12
 3ac:	df 92       	push	r13
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	6b 01       	movw	r12, r22
 3b8:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 3ba:	61 15       	cp	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	81 05       	cpc	r24, r1
 3c0:	91 05       	cpc	r25, r1
 3c2:	31 f4       	brne	.+12     	; 0x3d0 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 3c4:	10 92 0f 01 	sts	0x010F, r1
    UART.InputNumberDigits=1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 17 01 	sts	0x0117, r24
 3ce:	23 c0       	rjmp	.+70     	; 0x416 <UART_Determine_Digit_Numbers+0x6e>
 3d0:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 3d2:	0b 2d       	mov	r16, r11
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	02 5f       	subi	r16, 0xF2	; 242
 3d8:	1e 4f       	sbci	r17, 0xFE	; 254
 3da:	c7 01       	movw	r24, r14
 3dc:	b6 01       	movw	r22, r12
 3de:	2a e0       	ldi	r18, 0x0A	; 10
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	0e 94 2b 05 	call	0xa56	; 0xa56 <__udivmodsi4>
 3ea:	f8 01       	movw	r30, r16
 3ec:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 3ee:	c7 01       	movw	r24, r14
 3f0:	b6 01       	movw	r22, r12
 3f2:	2a e0       	ldi	r18, 0x0A	; 10
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	0e 94 2b 05 	call	0xa56	; 0xa56 <__udivmodsi4>
 3fe:	c9 01       	movw	r24, r18
 400:	da 01       	movw	r26, r20
 402:	6c 01       	movw	r12, r24
 404:	7d 01       	movw	r14, r26
      i++;
 406:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 408:	c1 14       	cp	r12, r1
 40a:	d1 04       	cpc	r13, r1
 40c:	e1 04       	cpc	r14, r1
 40e:	f1 04       	cpc	r15, r1
 410:	01 f7       	brne	.-64     	; 0x3d2 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 412:	b0 92 17 01 	sts	0x0117, r11
  }
}
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	08 95       	ret

00000426 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 426:	e0 91 17 01 	lds	r30, 0x0117
 42a:	0f c0       	rjmp	.+30     	; 0x44a <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 42c:	2e 2f       	mov	r18, r30
 42e:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 430:	e2 2f       	mov	r30, r18
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	e2 5f       	subi	r30, 0xF2	; 242
 436:	fe 4f       	sbci	r31, 0xFE	; 254
 438:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 43a:	80 91 c0 00 	lds	r24, 0x00C0
 43e:	85 ff       	sbrs	r24, 5
 440:	fc cf       	rjmp	.-8      	; 0x43a <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 442:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 444:	90 93 c6 00 	sts	0x00C6, r25
 448:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 44a:	ee 23       	and	r30, r30
 44c:	79 f7       	brne	.-34     	; 0x42c <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 44e:	08 95       	ret

00000450 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 454:	97 ff       	sbrs	r25, 7
 456:	0e c0       	rjmp	.+28     	; 0x474 <UART_Transmit_Number+0x24>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 458:	80 91 c0 00 	lds	r24, 0x00C0
 45c:	85 ff       	sbrs	r24, 5
 45e:	fc cf       	rjmp	.-8      	; 0x458 <UART_Transmit_Number+0x8>
  UDR0=val;
 460:	8d e2       	ldi	r24, 0x2D	; 45
 462:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 466:	50 95       	com	r21
 468:	40 95       	com	r20
 46a:	30 95       	com	r19
 46c:	21 95       	neg	r18
 46e:	3f 4f       	sbci	r19, 0xFF	; 255
 470:	4f 4f       	sbci	r20, 0xFF	; 255
 472:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 474:	ca 01       	movw	r24, r20
 476:	b9 01       	movw	r22, r18
 478:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 47c:	0e 94 13 02 	call	0x426	; 0x426 <UART_Transmit_Number_Digits>
}
 480:	08 95       	ret

00000482 <UART_Read_From_Buffer>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
 482:	fc 01       	movw	r30, r24
 484:	e2 5f       	subi	r30, 0xF2	; 242
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	82 85       	ldd	r24, Z+10	; 0x0a
}
 48a:	08 95       	ret

0000048c <UART_Current_Buffer_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
 48c:	20 91 3a 01 	lds	r18, 0x013A
 490:	30 91 3b 01 	lds	r19, 0x013B
}
 494:	c9 01       	movw	r24, r18
 496:	08 95       	ret

00000498 <UART_Current_Read_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Read_Index(void){
  return UART.ReadIndex;
 498:	20 91 3e 01 	lds	r18, 0x013E
 49c:	30 91 3f 01 	lds	r19, 0x013F
}
 4a0:	c9 01       	movw	r24, r18
 4a2:	08 95       	ret

000004a4 <UART_Bytes_Available_To_Read>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Bytes_Available_To_Read(void){
  return UART.AvailableBytes;
 4a4:	20 91 3c 01 	lds	r18, 0x013C
 4a8:	30 91 3d 01 	lds	r19, 0x013D
}
 4ac:	c9 01       	movw	r24, r18
 4ae:	08 95       	ret

000004b0 <UART_Read>:


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read(void){
  
  uint8_t current_byte=UART.Buffer[UART.ReadIndex];
 4b0:	e0 91 3e 01 	lds	r30, 0x013E
 4b4:	f0 91 3f 01 	lds	r31, 0x013F
 4b8:	e2 5f       	subi	r30, 0xF2	; 242
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	42 85       	ldd	r20, Z+10	; 0x0a
  UART.ReadIndex++;
 4be:	80 91 3e 01 	lds	r24, 0x013E
 4c2:	90 91 3f 01 	lds	r25, 0x013F
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	90 93 3f 01 	sts	0x013F, r25
 4cc:	80 93 3e 01 	sts	0x013E, r24
  if(UART.ReadIndex>=UART.BufferSize){
 4d0:	20 91 3e 01 	lds	r18, 0x013E
 4d4:	30 91 3f 01 	lds	r19, 0x013F
 4d8:	80 91 38 01 	lds	r24, 0x0138
 4dc:	90 91 39 01 	lds	r25, 0x0139
 4e0:	28 17       	cp	r18, r24
 4e2:	39 07       	cpc	r19, r25
 4e4:	20 f0       	brcs	.+8      	; 0x4ee <UART_Read+0x3e>
    UART.ReadIndex=0;
 4e6:	10 92 3f 01 	sts	0x013F, r1
 4ea:	10 92 3e 01 	sts	0x013E, r1
  }
  if(UART.AvailableBytes>0){
 4ee:	80 91 3c 01 	lds	r24, 0x013C
 4f2:	90 91 3d 01 	lds	r25, 0x013D
 4f6:	89 2b       	or	r24, r25
 4f8:	49 f0       	breq	.+18     	; 0x50c <UART_Read+0x5c>
    UART.AvailableBytes--;
 4fa:	80 91 3c 01 	lds	r24, 0x013C
 4fe:	90 91 3d 01 	lds	r25, 0x013D
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	90 93 3d 01 	sts	0x013D, r25
 508:	80 93 3c 01 	sts	0x013C, r24
  }
  return current_byte;
}
 50c:	84 2f       	mov	r24, r20
 50e:	08 95       	ret

00000510 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
 510:	10 92 0e 01 	sts	0x010E, r1
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	06 c0       	rjmp	.+12     	; 0x526 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
 51a:	f9 01       	movw	r30, r18
 51c:	e2 5f       	subi	r30, 0xF2	; 242
 51e:	fe 4f       	sbci	r31, 0xFE	; 254
 520:	12 86       	std	Z+10, r1	; 0x0a


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
 522:	2f 5f       	subi	r18, 0xFF	; 255
 524:	3f 4f       	sbci	r19, 0xFF	; 255
 526:	80 91 38 01 	lds	r24, 0x0138
 52a:	90 91 39 01 	lds	r25, 0x0139
 52e:	28 17       	cp	r18, r24
 530:	39 07       	cpc	r19, r25
 532:	98 f3       	brcs	.-26     	; 0x51a <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
 534:	10 92 3b 01 	sts	0x013B, r1
 538:	10 92 3a 01 	sts	0x013A, r1
    
  #ifdef UART_CIRCULAR_BUFFER_READ   
  UART.ReadIndex=0;    
 53c:	10 92 3f 01 	sts	0x013F, r1
 540:	10 92 3e 01 	sts	0x013E, r1
  UART.AvailableBytes=0;
 544:	10 92 3d 01 	sts	0x013D, r1
 548:	10 92 3c 01 	sts	0x013C, r1
  #endif
  
  #endif
}
 54c:	08 95       	ret

0000054e <UART_Interrupt_Service_Routine>:
}
#endif


#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	0f 92       	push	r0
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
 558:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
 55a:	0e 94 aa 00 	call	0x154	; 0x154 <UART_Receive_Byte>
 55e:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
 560:	80 91 0e 01 	lds	r24, 0x010E
 564:	88 23       	and	r24, r24
 566:	09 f0       	breq	.+2      	; 0x56a <UART_Interrupt_Service_Routine+0x1c>
 568:	54 c0       	rjmp	.+168    	; 0x612 <UART_Interrupt_Service_Routine+0xc4>
    UART.Buffer[UART.BufferIndex]=received_byte;
 56a:	e0 91 3a 01 	lds	r30, 0x013A
 56e:	f0 91 3b 01 	lds	r31, 0x013B
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	e2 5f       	subi	r30, 0xF2	; 242
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	82 87       	std	Z+10, r24	; 0x0a
    UART.BufferIndex++;
 57a:	80 91 3a 01 	lds	r24, 0x013A
 57e:	90 91 3b 01 	lds	r25, 0x013B
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 3b 01 	sts	0x013B, r25
 588:	80 93 3a 01 	sts	0x013A, r24

    #ifdef UART_CIRCULAR_BUFFER_READ
    UART.AvailableBytes++;
 58c:	80 91 3c 01 	lds	r24, 0x013C
 590:	90 91 3d 01 	lds	r25, 0x013D
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	90 93 3d 01 	sts	0x013D, r25
 59a:	80 93 3c 01 	sts	0x013C, r24
    if(UART.AvailableBytes>UART.BufferSize){
 59e:	20 91 3c 01 	lds	r18, 0x013C
 5a2:	30 91 3d 01 	lds	r19, 0x013D
 5a6:	80 91 38 01 	lds	r24, 0x0138
 5aa:	90 91 39 01 	lds	r25, 0x0139
 5ae:	82 17       	cp	r24, r18
 5b0:	93 07       	cpc	r25, r19
 5b2:	00 f5       	brcc	.+64     	; 0x5f4 <UART_Interrupt_Service_Routine+0xa6>
      UART.AvailableBytes=UART.BufferSize;
 5b4:	80 91 38 01 	lds	r24, 0x0138
 5b8:	90 91 39 01 	lds	r25, 0x0139
 5bc:	90 93 3d 01 	sts	0x013D, r25
 5c0:	80 93 3c 01 	sts	0x013C, r24
      UART.ReadIndex++;
 5c4:	80 91 3e 01 	lds	r24, 0x013E
 5c8:	90 91 3f 01 	lds	r25, 0x013F
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 3f 01 	sts	0x013F, r25
 5d2:	80 93 3e 01 	sts	0x013E, r24
      if(UART.ReadIndex>=UART.BufferSize){
 5d6:	20 91 3e 01 	lds	r18, 0x013E
 5da:	30 91 3f 01 	lds	r19, 0x013F
 5de:	80 91 38 01 	lds	r24, 0x0138
 5e2:	90 91 39 01 	lds	r25, 0x0139
 5e6:	28 17       	cp	r18, r24
 5e8:	39 07       	cpc	r19, r25
 5ea:	20 f0       	brcs	.+8      	; 0x5f4 <UART_Interrupt_Service_Routine+0xa6>
        UART.ReadIndex=0;
 5ec:	10 92 3f 01 	sts	0x013F, r1
 5f0:	10 92 3e 01 	sts	0x013E, r1
      }
    }
    #endif

    if(UART.BufferIndex>=UART.BufferSize){
 5f4:	20 91 3a 01 	lds	r18, 0x013A
 5f8:	30 91 3b 01 	lds	r19, 0x013B
 5fc:	80 91 38 01 	lds	r24, 0x0138
 600:	90 91 39 01 	lds	r25, 0x0139
 604:	28 17       	cp	r18, r24
 606:	39 07       	cpc	r19, r25
 608:	20 f0       	brcs	.+8      	; 0x612 <UART_Interrupt_Service_Routine+0xc4>
      UART.BufferIndex=0;
 60a:	10 92 3b 01 	sts	0x013B, r1
 60e:	10 92 3a 01 	sts	0x013A, r1
    }
    #ifdef UART_LAST_RECEIVED_TIMESTAMP
      UART.LastRecivedTimeStamp=UART_Reference_Time();
    #endif
  }
}
 612:	0f 90       	pop	r0
 614:	cf 91       	pop	r28
 616:	df 91       	pop	r29
 618:	08 95       	ret

0000061a <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	2f 93       	push	r18
 626:	3f 93       	push	r19
 628:	4f 93       	push	r20
 62a:	5f 93       	push	r21
 62c:	6f 93       	push	r22
 62e:	7f 93       	push	r23
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	af 93       	push	r26
 636:	bf 93       	push	r27
 638:	ef 93       	push	r30
 63a:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 63c:	0e 94 a7 02 	call	0x54e	; 0x54e <UART_Interrupt_Service_Routine>
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
 662:	82 e4       	ldi	r24, 0x42	; 66
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	90 93 41 01 	sts	0x0141, r25
 66a:	80 93 40 01 	sts	0x0140, r24
  Timebase->Config.TimerType.Value = 0;
 66e:	10 92 42 01 	sts	0x0142, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
 672:	80 91 42 01 	lds	r24, 0x0142
 676:	84 60       	ori	r24, 0x04	; 4
 678:	80 93 42 01 	sts	0x0142, r24
  Timebase->Config.TimerType.TimerIndex = 0;
 67c:	80 91 42 01 	lds	r24, 0x0142
 680:	87 70       	andi	r24, 0x07	; 7
 682:	80 93 42 01 	sts	0x0142, r24
  Timebase->Config.UpdateRate = 1;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	90 93 44 01 	sts	0x0144, r25
 68e:	80 93 43 01 	sts	0x0143, r24
  Timebase->Time.OVFUpdateValue=0;
 692:	10 92 45 01 	sts	0x0145, r1
  Timebase->Time.SubSeconds = 0;
 696:	10 92 4a 01 	sts	0x014A, r1
 69a:	10 92 4b 01 	sts	0x014B, r1
 69e:	10 92 4c 01 	sts	0x014C, r1
 6a2:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Time.Seconds = 0;
 6a6:	10 92 4e 01 	sts	0x014E, r1
 6aa:	10 92 4f 01 	sts	0x014F, r1
 6ae:	10 92 50 01 	sts	0x0150, r1
 6b2:	10 92 51 01 	sts	0x0151, r1
  Timebase->Time.LastSample = 0;
 6b6:	10 92 46 01 	sts	0x0146, r1
 6ba:	10 92 47 01 	sts	0x0147, r1
 6be:	10 92 48 01 	sts	0x0148, r1
 6c2:	10 92 49 01 	sts	0x0149, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
 6c6:	10 92 52 01 	sts	0x0152, r1
    Timebase->DownCounter[i].EndValue = 0;
    Timebase->DownCounter[i].Value = 0;
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
}
 6ca:	08 95       	ret

000006cc <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
 6cc:	7f 92       	push	r7
 6ce:	8f 92       	push	r8
 6d0:	9f 92       	push	r9
 6d2:	af 92       	push	r10
 6d4:	bf 92       	push	r11
 6d6:	cf 92       	push	r12
 6d8:	df 92       	push	r13
 6da:	ef 92       	push	r14
 6dc:	ff 92       	push	r15
 6de:	0f 93       	push	r16
 6e0:	1f 93       	push	r17
 6e2:	df 93       	push	r29
 6e4:	cf 93       	push	r28
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	2a 97       	sbiw	r28, 0x0a	; 10
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
 6f8:	c0 90 40 01 	lds	r12, 0x0140
 6fc:	d0 90 41 01 	lds	r13, 0x0141
 700:	f6 01       	movw	r30, r12
 702:	80 81       	ld	r24, Z
 704:	80 ff       	sbrs	r24, 0
 706:	31 c0       	rjmp	.+98     	; 0x76a <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val=0;
    if(UpdateRateHz==1){
 708:	01 30       	cpi	r16, 0x01	; 1
 70a:	11 05       	cpc	r17, r1
 70c:	11 f4       	brne	.+4      	; 0x712 <Timebase_Timer_Config+0x46>
 70e:	96 e0       	ldi	r25, 0x06	; 6
 710:	19 c0       	rjmp	.+50     	; 0x744 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x06;
    }else if(UpdateRateHz==2){
 712:	02 30       	cpi	r16, 0x02	; 2
 714:	11 05       	cpc	r17, r1
 716:	11 f4       	brne	.+4      	; 0x71c <Timebase_Timer_Config+0x50>
 718:	95 e0       	ldi	r25, 0x05	; 5
 71a:	14 c0       	rjmp	.+40     	; 0x744 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x05;
    }else if(UpdateRateHz==4){
 71c:	04 30       	cpi	r16, 0x04	; 4
 71e:	11 05       	cpc	r17, r1
 720:	11 f4       	brne	.+4      	; 0x726 <Timebase_Timer_Config+0x5a>
 722:	94 e0       	ldi	r25, 0x04	; 4
 724:	0f c0       	rjmp	.+30     	; 0x744 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x04;
    }else if(UpdateRateHz==8){
 726:	08 30       	cpi	r16, 0x08	; 8
 728:	11 05       	cpc	r17, r1
 72a:	11 f4       	brne	.+4      	; 0x730 <Timebase_Timer_Config+0x64>
 72c:	93 e0       	ldi	r25, 0x03	; 3
 72e:	0a c0       	rjmp	.+20     	; 0x744 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x03;
    }else if(UpdateRateHz==16){
 730:	00 31       	cpi	r16, 0x10	; 16
 732:	11 05       	cpc	r17, r1
 734:	11 f4       	brne	.+4      	; 0x73a <Timebase_Timer_Config+0x6e>
 736:	92 e0       	ldi	r25, 0x02	; 2
 738:	05 c0       	rjmp	.+10     	; 0x744 <Timebase_Timer_Config+0x78>
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	00 32       	cpi	r16, 0x20	; 32
 73e:	11 05       	cpc	r17, r1
 740:	09 f4       	brne	.+2      	; 0x744 <Timebase_Timer_Config+0x78>
 742:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz==64){
      Prescaler_val=0x00;
    }else{
      Prescaler_val=0x00;
    }
    cli();
 744:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
 746:	84 b7       	in	r24, 0x34	; 52
 748:	87 7f       	andi	r24, 0xF7	; 247
 74a:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
 74c:	80 91 60 00 	lds	r24, 0x0060
 750:	80 68       	ori	r24, 0x80	; 128
 752:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
 756:	80 91 60 00 	lds	r24, 0x0060
 75a:	88 61       	ori	r24, 0x18	; 24
 75c:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
 760:	90 64       	ori	r25, 0x40	; 64
 762:	90 93 60 00 	sts	0x0060, r25
    sei();
 766:	78 94       	sei
 768:	67 c0       	rjmp	.+206    	; 0x838 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
 76a:	81 fd       	sbrc	r24, 1
 76c:	65 c0       	rjmp	.+202    	; 0x838 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
 76e:	82 ff       	sbrs	r24, 2
 770:	63 c0       	rjmp	.+198    	; 0x838 <Timebase_Timer_Config+0x16c>
    
	uint32_t temp=F_CPU;
	uint16_t clock_div_factor[5]={1,8,64,256,1024};
 772:	de 01       	movw	r26, r28
 774:	11 96       	adiw	r26, 0x01	; 1
 776:	e3 e0       	ldi	r30, 0x03	; 3
 778:	f1 e0       	ldi	r31, 0x01	; 1
 77a:	8a e0       	ldi	r24, 0x0A	; 10
 77c:	01 90       	ld	r0, Z+
 77e:	0d 92       	st	X+, r0
 780:	81 50       	subi	r24, 0x01	; 1
 782:	e1 f7       	brne	.-8      	; 0x77c <Timebase_Timer_Config+0xb0>
	
	temp/=UpdateRateHz;
 784:	98 01       	movw	r18, r16
 786:	40 e0       	ldi	r20, 0x00	; 0
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	7b e1       	ldi	r23, 0x1B	; 27
 78e:	87 eb       	ldi	r24, 0xB7	; 183
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 2b 05 	call	0xa56	; 0xa56 <__udivmodsi4>
 796:	72 2e       	mov	r7, r18
 798:	83 2e       	mov	r8, r19
 79a:	94 2e       	mov	r9, r20
 79c:	e5 2e       	mov	r14, r21
 79e:	5e 01       	movw	r10, r28
 7a0:	08 94       	sec
 7a2:	a1 1c       	adc	r10, r1
 7a4:	b1 1c       	adc	r11, r1
 7a6:	c9 01       	movw	r24, r18
 7a8:	da 01       	movw	r26, r20
 7aa:	9c 01       	movw	r18, r24
 7ac:	ad 01       	movw	r20, r26
 7ae:	ff 24       	eor	r15, r15
 7b0:	14 c0       	rjmp	.+40     	; 0x7da <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq=temp;
	  curr_freq/=clock_div_factor[clock_div_index];
 7b2:	f5 01       	movw	r30, r10
 7b4:	21 91       	ld	r18, Z+
 7b6:	31 91       	ld	r19, Z+
 7b8:	5f 01       	movw	r10, r30
 7ba:	40 e0       	ldi	r20, 0x00	; 0
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	67 2d       	mov	r22, r7
 7c0:	78 2d       	mov	r23, r8
 7c2:	89 2d       	mov	r24, r9
 7c4:	9e 2d       	mov	r25, r14
 7c6:	0e 94 2b 05 	call	0xa56	; 0xa56 <__udivmodsi4>
 7ca:	c9 01       	movw	r24, r18
 7cc:	da 01       	movw	r26, r20
 7ce:	9c 01       	movw	r18, r24
 7d0:	ad 01       	movw	r20, r26
	  clock_div_index++;
 7d2:	f3 94       	inc	r15
	  if(clock_div_index == 5){
 7d4:	f5 e0       	ldi	r31, 0x05	; 5
 7d6:	ff 16       	cp	r15, r31
 7d8:	31 f0       	breq	.+12     	; 0x7e6 <Timebase_Timer_Config+0x11a>
	temp/=UpdateRateHz;
	
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
 7da:	2f 3f       	cpi	r18, 0xFF	; 255
 7dc:	31 05       	cpc	r19, r1
 7de:	41 05       	cpc	r20, r1
 7e0:	51 05       	cpc	r21, r1
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <Timebase_Timer_Config+0x11a>
 7e4:	30 f7       	brcc	.-52     	; 0x7b2 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index-=1;
 7e6:	8f 2d       	mov	r24, r15
 7e8:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
 7ea:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
 7ec:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
 7ee:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
 7f2:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
 7f4:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
 7f6:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
 7f8:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
 7fa:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
 7fc:	88 23       	and	r24, r24
 7fe:	11 f4       	brne	.+4      	; 0x804 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0f c0       	rjmp	.+30     	; 0x822 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	11 f4       	brne	.+4      	; 0x80c <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
 808:	82 e0       	ldi	r24, 0x02	; 2
 80a:	0b c0       	rjmp	.+22     	; 0x822 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
 80c:	82 30       	cpi	r24, 0x02	; 2
 80e:	11 f4       	brne	.+4      	; 0x814 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	07 c0       	rjmp	.+14     	; 0x822 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
 814:	83 30       	cpi	r24, 0x03	; 3
 816:	11 f4       	brne	.+4      	; 0x81c <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
 818:	84 e0       	ldi	r24, 0x04	; 4
 81a:	03 c0       	rjmp	.+6      	; 0x822 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
 81c:	84 30       	cpi	r24, 0x04	; 4
 81e:	11 f4       	brne	.+4      	; 0x824 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
 820:	85 e0       	ldi	r24, 0x05	; 5
 822:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = 0xFF-curr_freq;
 824:	82 2f       	mov	r24, r18
 826:	80 95       	com	r24
 828:	f6 01       	movw	r30, r12
 82a:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	80 93 6e 00 	sts	0x006E, r24
    sei();
 836:	78 94       	sei
  }
  Timebase->Config.UpdateRate=UpdateRateHz;
 838:	f6 01       	movw	r30, r12
 83a:	12 83       	std	Z+2, r17	; 0x02
 83c:	01 83       	std	Z+1, r16	; 0x01
}
 83e:	2a 96       	adiw	r28, 0x0a	; 10
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	f8 94       	cli
 844:	de bf       	out	0x3e, r29	; 62
 846:	0f be       	out	0x3f, r0	; 63
 848:	cd bf       	out	0x3d, r28	; 61
 84a:	cf 91       	pop	r28
 84c:	df 91       	pop	r29
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	ff 90       	pop	r15
 854:	ef 90       	pop	r14
 856:	df 90       	pop	r13
 858:	cf 90       	pop	r12
 85a:	bf 90       	pop	r11
 85c:	af 90       	pop	r10
 85e:	9f 90       	pop	r9
 860:	8f 90       	pop	r8
 862:	7f 90       	pop	r7
 864:	08 95       	ret

00000866 <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 866:	e0 91 40 01 	lds	r30, 0x0140
 86a:	f0 91 41 01 	lds	r31, 0x0141
 86e:	80 89       	ldd	r24, Z+16	; 0x10
}
 870:	08 95       	ret

00000872 <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 872:	e0 91 40 01 	lds	r30, 0x0140
 876:	f0 91 41 01 	lds	r31, 0x0141
 87a:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
 87c:	8f 33       	cpi	r24, 0x3F	; 63
 87e:	18 f4       	brcc	.+6      	; 0x886 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens+=1;
 880:	80 89       	ldd	r24, Z+16	; 0x10
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	80 8b       	std	Z+16, r24	; 0x10
 886:	08 95       	ret

00000888 <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 888:	e0 91 40 01 	lds	r30, 0x0140
 88c:	f0 91 41 01 	lds	r31, 0x0141
 890:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
 892:	88 23       	and	r24, r24
 894:	19 f0       	breq	.+6      	; 0x89c <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens-=1;
 896:	80 89       	ldd	r24, Z+16	; 0x10
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	80 8b       	std	Z+16, r24	; 0x10
 89c:	08 95       	ret

0000089e <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens=0;
 89e:	e0 91 40 01 	lds	r30, 0x0140
 8a2:	f0 91 41 01 	lds	r31, 0x0141
 8a6:	10 8a       	std	Z+16, r1	; 0x10
}
 8a8:	08 95       	ret

000008aa <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 8aa:	e0 91 40 01 	lds	r30, 0x0140
 8ae:	f0 91 41 01 	lds	r31, 0x0141
 8b2:	20 85       	ldd	r18, Z+8	; 0x08
 8b4:	31 85       	ldd	r19, Z+9	; 0x09
 8b6:	42 85       	ldd	r20, Z+10	; 0x0a
 8b8:	53 85       	ldd	r21, Z+11	; 0x0b
}
 8ba:	b9 01       	movw	r22, r18
 8bc:	ca 01       	movw	r24, r20
 8be:	08 95       	ret

000008c0 <Timebase_Timer_Get_Seconds>:

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
 8c0:	e0 91 40 01 	lds	r30, 0x0140
 8c4:	f0 91 41 01 	lds	r31, 0x0141
 8c8:	24 85       	ldd	r18, Z+12	; 0x0c
 8ca:	35 85       	ldd	r19, Z+13	; 0x0d
 8cc:	46 85       	ldd	r20, Z+14	; 0x0e
 8ce:	57 85       	ldd	r21, Z+15	; 0x0f
}
 8d0:	b9 01       	movw	r22, r18
 8d2:	ca 01       	movw	r24, r20
 8d4:	08 95       	ret

000008d6 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint32_t value){
  Timebase->Time.SubSeconds=value;
 8d6:	e0 91 40 01 	lds	r30, 0x0140
 8da:	f0 91 41 01 	lds	r31, 0x0141
 8de:	60 87       	std	Z+8, r22	; 0x08
 8e0:	71 87       	std	Z+9, r23	; 0x09
 8e2:	82 87       	std	Z+10, r24	; 0x0a
 8e4:	93 87       	std	Z+11, r25	; 0x0b
}
 8e6:	08 95       	ret

000008e8 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
 8e8:	e0 91 40 01 	lds	r30, 0x0140
 8ec:	f0 91 41 01 	lds	r31, 0x0141
 8f0:	64 87       	std	Z+12, r22	; 0x0c
 8f2:	75 87       	std	Z+13, r23	; 0x0d
 8f4:	86 87       	std	Z+14, r24	; 0x0e
 8f6:	97 87       	std	Z+15, r25	; 0x0f
}
 8f8:	08 95       	ret

000008fa <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
 8fa:	9c 01       	movw	r18, r24


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 8fc:	e0 91 40 01 	lds	r30, 0x0140
 900:	f0 91 41 01 	lds	r31, 0x0141
 904:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
 906:	8f 33       	cpi	r24, 0x3F	; 63
 908:	18 f4       	brcc	.+6      	; 0x910 <__stack+0x11>
    Timebase->ActiveTokens+=1;
 90a:	80 89       	ldd	r24, Z+16	; 0x10
 90c:	8f 5f       	subi	r24, 0xFF	; 255
 90e:	80 8b       	std	Z+16, r24	; 0x10
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 910:	80 85       	ldd	r24, Z+8	; 0x08
 912:	91 85       	ldd	r25, Z+9	; 0x09
 914:	a2 85       	ldd	r26, Z+10	; 0x0a
 916:	b3 85       	ldd	r27, Z+11	; 0x0b
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
 918:	40 e0       	ldi	r20, 0x00	; 0
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	28 0f       	add	r18, r24
 91e:	39 1f       	adc	r19, r25
 920:	4a 1f       	adc	r20, r26
 922:	5b 1f       	adc	r21, r27
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 924:	80 85       	ldd	r24, Z+8	; 0x08
 926:	91 85       	ldd	r25, Z+9	; 0x09
 928:	a2 85       	ldd	r26, Z+10	; 0x0a
 92a:	b3 85       	ldd	r27, Z+11	; 0x0b
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
 92c:	82 17       	cp	r24, r18
 92e:	93 07       	cpc	r25, r19
 930:	a4 07       	cpc	r26, r20
 932:	b5 07       	cpc	r27, r21
 934:	b8 f3       	brcs	.-18     	; 0x924 <__stack+0x25>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 936:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
 938:	88 23       	and	r24, r24
 93a:	19 f0       	breq	.+6      	; 0x942 <__stack+0x43>
    Timebase->ActiveTokens-=1;
 93c:	80 89       	ldd	r24, Z+16	; 0x10
 93e:	81 50       	subi	r24, 0x01	; 1
 940:	80 8b       	std	Z+16, r24	; 0x10
 942:	08 95       	ret

00000944 <Timebase_Timer_Delay_Seconds>:
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Remove();
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
 944:	ef 92       	push	r14
 946:	ff 92       	push	r15
 948:	0f 93       	push	r16
 94a:	1f 93       	push	r17
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
 94c:	e0 91 40 01 	lds	r30, 0x0140
 950:	f0 91 41 01 	lds	r31, 0x0141
 954:	24 85       	ldd	r18, Z+12	; 0x0c
 956:	35 85       	ldd	r19, Z+13	; 0x0d
 958:	46 85       	ldd	r20, Z+14	; 0x0e
 95a:	57 85       	ldd	r21, Z+15	; 0x0f
  Timebase_Token_Remove();
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
 95c:	7c 01       	movw	r14, r24
 95e:	00 e0       	ldi	r16, 0x00	; 0
 960:	10 e0       	ldi	r17, 0x00	; 0
 962:	e2 0e       	add	r14, r18
 964:	f3 1e       	adc	r15, r19
 966:	04 1f       	adc	r16, r20
 968:	15 1f       	adc	r17, r21
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 96a:	80 85       	ldd	r24, Z+8	; 0x08
 96c:	91 85       	ldd	r25, Z+9	; 0x09
 96e:	a2 85       	ldd	r26, Z+10	; 0x0a
 970:	b3 85       	ldd	r27, Z+11	; 0x0b
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
 972:	8e 15       	cp	r24, r14
 974:	9f 05       	cpc	r25, r15
 976:	a0 07       	cpc	r26, r16
 978:	b1 07       	cpc	r27, r17
 97a:	b8 f3       	brcs	.-18     	; 0x96a <Timebase_Timer_Delay_Seconds+0x26>
}
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	ff 90       	pop	r15
 982:	ef 90       	pop	r14
 984:	08 95       	ret

00000986 <Timebase_Reset>:
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
 986:	08 95       	ret

00000988 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
 98e:	0e 94 31 03 	call	0x662	; 0x662 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
 992:	c8 01       	movw	r24, r16
 994:	0e 94 66 03 	call	0x6cc	; 0x6cc <Timebase_Timer_Config>
  Timebase_Reset();
}
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	08 95       	ret

0000099e <Timebase_Main_Loop_Executables>:
  Timebase_UpCounter_Update_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
  #endif
}
 99e:	08 95       	ret

000009a0 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
  Timebase->Time.SubSeconds++;
 9a4:	c0 91 40 01 	lds	r28, 0x0140
 9a8:	d0 91 41 01 	lds	r29, 0x0141
 9ac:	88 85       	ldd	r24, Y+8	; 0x08
 9ae:	99 85       	ldd	r25, Y+9	; 0x09
 9b0:	aa 85       	ldd	r26, Y+10	; 0x0a
 9b2:	bb 85       	ldd	r27, Y+11	; 0x0b
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	a1 1d       	adc	r26, r1
 9b8:	b1 1d       	adc	r27, r1
 9ba:	88 87       	std	Y+8, r24	; 0x08
 9bc:	99 87       	std	Y+9, r25	; 0x09
 9be:	aa 87       	std	Y+10, r26	; 0x0a
 9c0:	bb 87       	std	Y+11, r27	; 0x0b
  TCNT0  = Timebase->Time.OVFUpdateValue;
 9c2:	8b 81       	ldd	r24, Y+3	; 0x03
 9c4:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
 9c6:	68 85       	ldd	r22, Y+8	; 0x08
 9c8:	79 85       	ldd	r23, Y+9	; 0x09
 9ca:	8a 85       	ldd	r24, Y+10	; 0x0a
 9cc:	9b 85       	ldd	r25, Y+11	; 0x0b
 9ce:	29 81       	ldd	r18, Y+1	; 0x01
 9d0:	3a 81       	ldd	r19, Y+2	; 0x02
 9d2:	40 e0       	ldi	r20, 0x00	; 0
 9d4:	50 e0       	ldi	r21, 0x00	; 0
 9d6:	0e 94 2b 05 	call	0xa56	; 0xa56 <__udivmodsi4>
 9da:	61 15       	cp	r22, r1
 9dc:	71 05       	cpc	r23, r1
 9de:	81 05       	cpc	r24, r1
 9e0:	91 05       	cpc	r25, r1
 9e2:	91 f4       	brne	.+36     	; 0xa08 <Timebase_ISR_Executables+0x68>
    Timebase->Time.Seconds++;
 9e4:	8c 85       	ldd	r24, Y+12	; 0x0c
 9e6:	9d 85       	ldd	r25, Y+13	; 0x0d
 9e8:	ae 85       	ldd	r26, Y+14	; 0x0e
 9ea:	bf 85       	ldd	r27, Y+15	; 0x0f
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	a1 1d       	adc	r26, r1
 9f0:	b1 1d       	adc	r27, r1
 9f2:	8c 87       	std	Y+12, r24	; 0x0c
 9f4:	9d 87       	std	Y+13, r25	; 0x0d
 9f6:	ae 87       	std	Y+14, r26	; 0x0e
 9f8:	bf 87       	std	Y+15, r27	; 0x0f


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 9fa:	88 89       	ldd	r24, Y+16	; 0x10
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
 9fc:	88 23       	and	r24, r24
 9fe:	21 f4       	brne	.+8      	; 0xa08 <Timebase_ISR_Executables+0x68>
      Timebase->Time.SubSeconds = 0;
 a00:	18 86       	std	Y+8, r1	; 0x08
 a02:	19 86       	std	Y+9, r1	; 0x09
 a04:	1a 86       	std	Y+10, r1	; 0x0a
 a06:	1b 86       	std	Y+11, r1	; 0x0b
    }
	#endif
  }
}
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	08 95       	ret

00000a0e <__vector_16>:

ISR(TIMER0_OVF_vect){
 a0e:	1f 92       	push	r1
 a10:	0f 92       	push	r0
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	0f 92       	push	r0
 a16:	11 24       	eor	r1, r1
 a18:	2f 93       	push	r18
 a1a:	3f 93       	push	r19
 a1c:	4f 93       	push	r20
 a1e:	5f 93       	push	r21
 a20:	6f 93       	push	r22
 a22:	7f 93       	push	r23
 a24:	8f 93       	push	r24
 a26:	9f 93       	push	r25
 a28:	af 93       	push	r26
 a2a:	bf 93       	push	r27
 a2c:	ef 93       	push	r30
 a2e:	ff 93       	push	r31
  Timebase_ISR_Executables();
 a30:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Timebase_ISR_Executables>
 a34:	ff 91       	pop	r31
 a36:	ef 91       	pop	r30
 a38:	bf 91       	pop	r27
 a3a:	af 91       	pop	r26
 a3c:	9f 91       	pop	r25
 a3e:	8f 91       	pop	r24
 a40:	7f 91       	pop	r23
 a42:	6f 91       	pop	r22
 a44:	5f 91       	pop	r21
 a46:	4f 91       	pop	r20
 a48:	3f 91       	pop	r19
 a4a:	2f 91       	pop	r18
 a4c:	0f 90       	pop	r0
 a4e:	0f be       	out	0x3f, r0	; 63
 a50:	0f 90       	pop	r0
 a52:	1f 90       	pop	r1
 a54:	18 95       	reti

00000a56 <__udivmodsi4>:
 a56:	a1 e2       	ldi	r26, 0x21	; 33
 a58:	1a 2e       	mov	r1, r26
 a5a:	aa 1b       	sub	r26, r26
 a5c:	bb 1b       	sub	r27, r27
 a5e:	fd 01       	movw	r30, r26
 a60:	0d c0       	rjmp	.+26     	; 0xa7c <__udivmodsi4_ep>

00000a62 <__udivmodsi4_loop>:
 a62:	aa 1f       	adc	r26, r26
 a64:	bb 1f       	adc	r27, r27
 a66:	ee 1f       	adc	r30, r30
 a68:	ff 1f       	adc	r31, r31
 a6a:	a2 17       	cp	r26, r18
 a6c:	b3 07       	cpc	r27, r19
 a6e:	e4 07       	cpc	r30, r20
 a70:	f5 07       	cpc	r31, r21
 a72:	20 f0       	brcs	.+8      	; 0xa7c <__udivmodsi4_ep>
 a74:	a2 1b       	sub	r26, r18
 a76:	b3 0b       	sbc	r27, r19
 a78:	e4 0b       	sbc	r30, r20
 a7a:	f5 0b       	sbc	r31, r21

00000a7c <__udivmodsi4_ep>:
 a7c:	66 1f       	adc	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	99 1f       	adc	r25, r25
 a84:	1a 94       	dec	r1
 a86:	69 f7       	brne	.-38     	; 0xa62 <__udivmodsi4_loop>
 a88:	60 95       	com	r22
 a8a:	70 95       	com	r23
 a8c:	80 95       	com	r24
 a8e:	90 95       	com	r25
 a90:	9b 01       	movw	r18, r22
 a92:	ac 01       	movw	r20, r24
 a94:	bd 01       	movw	r22, r26
 a96:	cf 01       	movw	r24, r30
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
