
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000fb4  00001048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080010e  0080010e  00001056  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005ee  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000121d  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072b  00000000  00000000  00002901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fa1  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00003fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f9  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089d  00000000  00000000  00004b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00005436  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "uart.h"
#include "adc.h"
#include "pwm.h"

int main(void){
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  
  Timebase_Init(100);
  b2:	84 e6       	ldi	r24, 0x64	; 100
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 df 04 	call	0x9be	; 0x9be <Timebase_Init>
  UART_Init(38400);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	76 e9       	ldi	r23, 0x96	; 150
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 11 01 	call	0x222	; 0x222 <UART_Init>
  ADC_Init();
  c6:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Init>
  PWM_Init();
  ca:	0e 94 59 07 	call	0xeb2	; 0xeb2 <PWM_Init>
  ce:	ee 24       	eor	r14, r14
  d0:	ff 24       	eor	r15, r15
  d2:	87 01       	movw	r16, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d4:	c0 e3       	ldi	r28, 0x30	; 48
  d6:	d5 e7       	ldi	r29, 0x75	; 117
  
  uint32_t last_val=0;
  
  while(1){
    
	while(Timebase_Timer_Get_SubSeconds() == last_val);
  d8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Timebase_Timer_Get_SubSeconds>
  dc:	6e 15       	cp	r22, r14
  de:	7f 05       	cpc	r23, r15
  e0:	80 07       	cpc	r24, r16
  e2:	91 07       	cpc	r25, r17
  e4:	c9 f3       	breq	.-14     	; 0xd8 <main+0x32>
	last_val=Timebase_Timer_Get_SubSeconds();
  e6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Timebase_Timer_Get_SubSeconds>
  ea:	7b 01       	movw	r14, r22
  ec:	8c 01       	movw	r16, r24
	
	UART_Transmit_Number(ADC_Read_Temperature(80));
  ee:	80 e5       	ldi	r24, 0x50	; 80
  f0:	0e 94 10 06 	call	0xc20	; 0xc20 <ADC_Read_Temperature>
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	bc 01       	movw	r22, r24
  fa:	cd 01       	movw	r24, r26
  fc:	0e 94 43 02 	call	0x486	; 0x486 <UART_Transmit_Number>
	UART_Transmit_Text((char*)"\r\n");
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 de 01 	call	0x3bc	; 0x3bc <UART_Transmit_Text>
 108:	ce 01       	movw	r24, r28
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x64>
 10e:	e4 cf       	rjmp	.-56     	; 0xd8 <main+0x32>

00000110 <UART_Config_GPIO>:



void UART_Config_GPIO(void){
	
}
 110:	08 95       	ret

00000112 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
 112:	08 95       	ret

00000114 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
 114:	9b 01       	movw	r18, r22
 116:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
 118:	60 e6       	ldi	r22, 0x60	; 96
 11a:	73 ee       	ldi	r23, 0xE3	; 227
 11c:	86 e1       	ldi	r24, 0x16	; 22
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 136:	bb 27       	eor	r27, r27
 138:	a5 2f       	mov	r26, r21
 13a:	94 2f       	mov	r25, r20
 13c:	83 2f       	mov	r24, r19
 13e:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 142:	20 93 c4 00 	sts	0x00C4, r18
}
 146:	08 95       	ret

00000148 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 148:	e1 ec       	ldi	r30, 0xC1	; 193
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	80 93 c2 00 	sts	0x00C2, r24
}
 158:	08 95       	ret

0000015a <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 15a:	e1 ec       	ldi	r30, 0xC1	; 193
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 c2 00 	sts	0x00C2, r24
}
 16a:	08 95       	ret

0000016c <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 16c:	e1 ec       	ldi	r30, 0xC1	; 193
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 68       	ori	r24, 0x80	; 128
 174:	80 83       	st	Z, r24
  sei();
 176:	78 94       	sei
}
 178:	08 95       	ret

0000017a <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
 17a:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 17c:	80 91 c0 00 	lds	r24, 0x00C0
 180:	85 ff       	sbrs	r24, 5
 182:	fc cf       	rjmp	.-8      	; 0x17c <UART_Transmit_Byte+0x2>
  UDR0=val;
 184:	90 93 c6 00 	sts	0x00C6, r25
}
 188:	08 95       	ret

0000018a <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 194:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 196:	80 91 c0 00 	lds	r24, 0x00C0
 19a:	84 ff       	sbrs	r24, 4
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <UART_Receive_Byte+0x1e>
    val=UDR0;
 19e:	80 91 c6 00 	lds	r24, 0x00C6
 1a2:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 1a8:	80 91 c0 00 	lds	r24, 0x00C0
 1ac:	83 ff       	sbrs	r24, 3
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <UART_Receive_Byte+0x34>
    val=UDR0;
 1b0:	80 91 c6 00 	lds	r24, 0x00C6
 1b4:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	80 93 0e 01 	sts	0x010E, r24
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 1be:	80 91 c6 00 	lds	r24, 0x00C6
 1c2:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 1c4:	10 92 0e 01 	sts	0x010E, r1
  }
  return val;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ca:	0f 90       	pop	r0
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <UART_Struct_Init>:
}
#endif


void UART_Struct_Init(void){
  UART.Error=0;
 1d2:	10 92 0e 01 	sts	0x010E, r1
 1d6:	ef e0       	ldi	r30, 0x0F	; 15
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 1da:	11 92       	st	Z+, r1
#endif


void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	e7 31       	cpi	r30, 0x17	; 23
 1e0:	f8 07       	cpc	r31, r24
 1e2:	d9 f7       	brne	.-10     	; 0x1da <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 1e4:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.BufferSize=UART_BUFFER_SIZE;
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	92 a3       	std	Z+34, r25	; 0x22
 1ec:	81 a3       	std	Z+33, r24	; 0x21
  UART.BufferIndex=0;
 1ee:	14 a2       	std	Z+36, r1	; 0x24
 1f0:	13 a2       	std	Z+35, r1	; 0x23
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <UART_Struct_Init+0x2c>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
 1f6:	e2 5f       	subi	r30, 0xF2	; 242
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	12 86       	std	Z+10, r1	; 0x0a
  UART.InputNumberDigits=0;
    
  #ifdef UART_ENABLE_RX_INT
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	80 91 38 01 	lds	r24, 0x0138
 202:	90 91 39 01 	lds	r25, 0x0139
 206:	e2 2f       	mov	r30, r18
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e8 17       	cp	r30, r24
 20c:	f9 07       	cpc	r31, r25
 20e:	98 f3       	brcs	.-26     	; 0x1f6 <UART_Struct_Init+0x24>
    UART.Buffer[i]=0;
  }
  #endif
    
  #ifdef UART_CIRCULAR_BUFFER_READ  
  UART.AvailableBytes=0;
 210:	10 92 3d 01 	sts	0x013D, r1
 214:	10 92 3c 01 	sts	0x013C, r1
  UART.ReadIndex=0;
 218:	10 92 3f 01 	sts	0x013F, r1
 21c:	10 92 3e 01 	sts	0x013E, r1
  #endif

  #ifdef UART_LAST_RECEIVED_TIMESTAMP  
  UART.LastRecivedTimeStamp=0;
  #endif
}
 220:	08 95       	ret

00000222 <UART_Init>:


void UART_Init(uint32_t baud){
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 222:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 226:	e1 ec       	ldi	r30, 0xC1	; 193
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 230:	a2 ec       	ldi	r26, 0xC2	; 194
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	96 e0       	ldi	r25, 0x06	; 6
 236:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 238:	80 81       	ld	r24, Z
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 23e:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 240:	80 81       	ld	r24, Z
 242:	80 68       	ori	r24, 0x80	; 128
 244:	80 83       	st	Z, r24
  sei();
 246:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
}
 248:	08 95       	ret

0000024a <UART_Transmit_Byte_Hex>:


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Hex(uint32_t val){
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ab 01       	movw	r20, r22
 252:	bc 01       	movw	r22, r24

  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 254:	4f 3f       	cpi	r20, 0xFF	; 255
 256:	51 05       	cpc	r21, r1
 258:	61 05       	cpc	r22, r1
 25a:	71 05       	cpc	r23, r1
 25c:	09 f0       	breq	.+2      	; 0x260 <UART_Transmit_Byte_Hex+0x16>
 25e:	28 f4       	brcc	.+10     	; 0x26a <UART_Transmit_Byte_Hex+0x20>
 260:	e8 e0       	ldi	r30, 0x08	; 8
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	c2 e0       	ldi	r28, 0x02	; 2
 266:	d0 e0       	ldi	r29, 0x00	; 0
 268:	11 c0       	rjmp	.+34     	; 0x28c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 26a:	40 30       	cpi	r20, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	58 07       	cpc	r21, r24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	68 07       	cpc	r22, r24
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	78 07       	cpc	r23, r24
 278:	28 f0       	brcs	.+10     	; 0x284 <UART_Transmit_Byte_Hex+0x3a>
 27a:	e0 e2       	ldi	r30, 0x20	; 32
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	c8 e0       	ldi	r28, 0x08	; 8
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	04 c0       	rjmp	.+8      	; 0x28c <UART_Transmit_Byte_Hex+0x42>
 284:	e0 e1       	ldi	r30, 0x10	; 16
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	c4 e0       	ldi	r28, 0x04	; 4
 28a:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 28c:	80 91 c0 00 	lds	r24, 0x00C0
 290:	85 ff       	sbrs	r24, 5
 292:	fc cf       	rjmp	.-8      	; 0x28c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 294:	80 e3       	ldi	r24, 0x30	; 48
 296:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 29a:	80 91 c0 00 	lds	r24, 0x00C0
 29e:	85 ff       	sbrs	r24, 5
 2a0:	fc cf       	rjmp	.-8      	; 0x29a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
 2a2:	88 e7       	ldi	r24, 0x78	; 120
 2a4:	80 93 c6 00 	sts	0x00C6, r24
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	1f c0       	rjmp	.+62     	; 0x2ea <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 2ac:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 2ae:	db 01       	movw	r26, r22
 2b0:	ca 01       	movw	r24, r20
 2b2:	0e 2e       	mov	r0, r30
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <UART_Transmit_Byte_Hex+0x74>
 2b6:	b6 95       	lsr	r27
 2b8:	a7 95       	ror	r26
 2ba:	97 95       	ror	r25
 2bc:	87 95       	ror	r24
 2be:	0a 94       	dec	r0
 2c0:	d2 f7       	brpl	.-12     	; 0x2b6 <UART_Transmit_Byte_Hex+0x6c>
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8f 70       	andi	r24, 0x0F	; 15
 2c6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 2c8:	8a 30       	cpi	r24, 0x0A	; 10
 2ca:	91 05       	cpc	r25, r1
 2cc:	20 f0       	brcs	.+8      	; 0x2d6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
 2ce:	9c 01       	movw	r18, r24
 2d0:	29 5c       	subi	r18, 0xC9	; 201
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
 2d6:	9c 01       	movw	r18, r24
 2d8:	20 5d       	subi	r18, 0xD0	; 208
 2da:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 2dc:	80 91 c0 00 	lds	r24, 0x00C0
 2e0:	85 ff       	sbrs	r24, 5
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
 2e4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 2e8:	1f 5f       	subi	r17, 0xFF	; 255
 2ea:	81 2f       	mov	r24, r17
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	8c 17       	cp	r24, r28
 2f0:	9d 07       	cpc	r25, r29
 2f2:	e0 f2       	brcs	.-72     	; 0x2ac <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <UART_Transmit_Byte_Bin>:
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
 2fc:	cf 92       	push	r12
 2fe:	df 92       	push	r13
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ab 01       	movw	r20, r22
 30e:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 310:	4f 3f       	cpi	r20, 0xFF	; 255
 312:	51 05       	cpc	r21, r1
 314:	61 05       	cpc	r22, r1
 316:	71 05       	cpc	r23, r1
 318:	09 f0       	breq	.+2      	; 0x31c <UART_Transmit_Byte_Bin+0x20>
 31a:	10 f4       	brcc	.+4      	; 0x320 <UART_Transmit_Byte_Bin+0x24>
 31c:	97 e0       	ldi	r25, 0x07	; 7
 31e:	0b c0       	rjmp	.+22     	; 0x336 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 320:	40 30       	cpi	r20, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	58 07       	cpc	r21, r24
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	68 07       	cpc	r22, r24
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	78 07       	cpc	r23, r24
 32e:	10 f0       	brcs	.+4      	; 0x334 <UART_Transmit_Byte_Bin+0x38>
 330:	9f e1       	ldi	r25, 0x1F	; 31
 332:	01 c0       	rjmp	.+2      	; 0x336 <UART_Transmit_Byte_Bin+0x3a>
 334:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 336:	80 91 c0 00 	lds	r24, 0x00C0
 33a:	85 ff       	sbrs	r24, 5
 33c:	fc cf       	rjmp	.-8      	; 0x336 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 33e:	80 e3       	ldi	r24, 0x30	; 48
 340:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 344:	80 91 c0 00 	lds	r24, 0x00C0
 348:	85 ff       	sbrs	r24, 5
 34a:	fc cf       	rjmp	.-8      	; 0x344 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 34c:	82 e6       	ldi	r24, 0x62	; 98
 34e:	80 93 c6 00 	sts	0x00C6, r24
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
}
#endif


#ifdef UART_AUXILIARY_PRINT_FUNCTIONS
void UART_Transmit_Byte_Bin(uint32_t val){
 356:	e9 2f       	mov	r30, r25
 358:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 35a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 35c:	11 e3       	ldi	r17, 0x31	; 49
 35e:	ef 01       	movw	r28, r30
 360:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 362:	cf 01       	movw	r24, r30
 364:	82 1b       	sub	r24, r18
 366:	93 0b       	sbc	r25, r19
 368:	6a 01       	movw	r12, r20
 36a:	7b 01       	movw	r14, r22
 36c:	04 c0       	rjmp	.+8      	; 0x376 <UART_Transmit_Byte_Bin+0x7a>
 36e:	f6 94       	lsr	r15
 370:	e7 94       	ror	r14
 372:	d7 94       	ror	r13
 374:	c7 94       	ror	r12
 376:	8a 95       	dec	r24
 378:	d2 f7       	brpl	.-12     	; 0x36e <UART_Transmit_Byte_Bin+0x72>
 37a:	d7 01       	movw	r26, r14
 37c:	c6 01       	movw	r24, r12
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	90 70       	andi	r25, 0x00	; 0
 382:	89 2b       	or	r24, r25
 384:	39 f0       	breq	.+14     	; 0x394 <UART_Transmit_Byte_Bin+0x98>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 386:	80 91 c0 00 	lds	r24, 0x00C0
 38a:	85 ff       	sbrs	r24, 5
 38c:	fc cf       	rjmp	.-8      	; 0x386 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 38e:	10 93 c6 00 	sts	0x00C6, r17
 392:	06 c0       	rjmp	.+12     	; 0x3a0 <UART_Transmit_Byte_Bin+0xa4>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 394:	80 91 c0 00 	lds	r24, 0x00C0
 398:	85 ff       	sbrs	r24, 5
 39a:	fc cf       	rjmp	.-8      	; 0x394 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 39c:	00 93 c6 00 	sts	0x00C6, r16
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 3a4:	2c 17       	cp	r18, r28
 3a6:	3d 07       	cpc	r19, r29
 3a8:	e1 f6       	brne	.-72     	; 0x362 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	08 95       	ret

000003bc <UART_Transmit_Text>:
#endif


void UART_Transmit_Text(char *str){
 3bc:	ac 01       	movw	r20, r24
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <UART_Transmit_Text+0x14>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 3c2:	80 91 c0 00 	lds	r24, 0x00C0
 3c6:	85 ff       	sbrs	r24, 5
 3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <UART_Transmit_Text+0x6>
  UDR0=val;
 3ca:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 3ce:	2f 5f       	subi	r18, 0xFF	; 255
#endif


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 3d0:	fa 01       	movw	r30, r20
 3d2:	e2 0f       	add	r30, r18
 3d4:	f1 1d       	adc	r31, r1
 3d6:	e0 81       	ld	r30, Z
 3d8:	ee 23       	and	r30, r30
 3da:	99 f7       	brne	.-26     	; 0x3c2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 3dc:	08 95       	ret

000003de <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 3de:	bf 92       	push	r11
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	6b 01       	movw	r12, r22
 3ee:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 3f0:	61 15       	cp	r22, r1
 3f2:	71 05       	cpc	r23, r1
 3f4:	81 05       	cpc	r24, r1
 3f6:	91 05       	cpc	r25, r1
 3f8:	31 f4       	brne	.+12     	; 0x406 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 3fa:	10 92 0f 01 	sts	0x010F, r1
    UART.InputNumberDigits=1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 17 01 	sts	0x0117, r24
 404:	23 c0       	rjmp	.+70     	; 0x44c <UART_Determine_Digit_Numbers+0x6e>
 406:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 408:	0b 2d       	mov	r16, r11
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	02 5f       	subi	r16, 0xF2	; 242
 40e:	1e 4f       	sbci	r17, 0xFE	; 254
 410:	c7 01       	movw	r24, r14
 412:	b6 01       	movw	r22, r12
 414:	2a e0       	ldi	r18, 0x0A	; 10
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 420:	f8 01       	movw	r30, r16
 422:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 424:	c7 01       	movw	r24, r14
 426:	b6 01       	movw	r22, r12
 428:	2a e0       	ldi	r18, 0x0A	; 10
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 434:	c9 01       	movw	r24, r18
 436:	da 01       	movw	r26, r20
 438:	6c 01       	movw	r12, r24
 43a:	7d 01       	movw	r14, r26
      i++;
 43c:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 43e:	c1 14       	cp	r12, r1
 440:	d1 04       	cpc	r13, r1
 442:	e1 04       	cpc	r14, r1
 444:	f1 04       	cpc	r15, r1
 446:	01 f7       	brne	.-64     	; 0x408 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 448:	b0 92 17 01 	sts	0x0117, r11
  }
}
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	cf 90       	pop	r12
 458:	bf 90       	pop	r11
 45a:	08 95       	ret

0000045c <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 45c:	e0 91 17 01 	lds	r30, 0x0117
 460:	0f c0       	rjmp	.+30     	; 0x480 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 462:	2e 2f       	mov	r18, r30
 464:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 466:	e2 2f       	mov	r30, r18
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	e2 5f       	subi	r30, 0xF2	; 242
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 470:	80 91 c0 00 	lds	r24, 0x00C0
 474:	85 ff       	sbrs	r24, 5
 476:	fc cf       	rjmp	.-8      	; 0x470 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 478:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 47a:	90 93 c6 00 	sts	0x00C6, r25
 47e:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 480:	ee 23       	and	r30, r30
 482:	79 f7       	brne	.-34     	; 0x462 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 484:	08 95       	ret

00000486 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 48a:	97 ff       	sbrs	r25, 7
 48c:	0e c0       	rjmp	.+28     	; 0x4aa <UART_Transmit_Number+0x24>
  UCSR0B|=(1<<RXCIE0);
  sei();
}

void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 48e:	80 91 c0 00 	lds	r24, 0x00C0
 492:	85 ff       	sbrs	r24, 5
 494:	fc cf       	rjmp	.-8      	; 0x48e <UART_Transmit_Number+0x8>
  UDR0=val;
 496:	8d e2       	ldi	r24, 0x2D	; 45
 498:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 49c:	50 95       	com	r21
 49e:	40 95       	com	r20
 4a0:	30 95       	com	r19
 4a2:	21 95       	neg	r18
 4a4:	3f 4f       	sbci	r19, 0xFF	; 255
 4a6:	4f 4f       	sbci	r20, 0xFF	; 255
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 4aa:	ca 01       	movw	r24, r20
 4ac:	b9 01       	movw	r22, r18
 4ae:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 4b2:	0e 94 2e 02 	call	0x45c	; 0x45c <UART_Transmit_Number_Digits>
}
 4b6:	08 95       	ret

000004b8 <UART_Read_From_Buffer>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
 4b8:	fc 01       	movw	r30, r24
 4ba:	e2 5f       	subi	r30, 0xF2	; 242
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	82 85       	ldd	r24, Z+10	; 0x0a
}
 4c0:	08 95       	ret

000004c2 <UART_Current_Buffer_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
 4c2:	20 91 3a 01 	lds	r18, 0x013A
 4c6:	30 91 3b 01 	lds	r19, 0x013B
}
 4ca:	c9 01       	movw	r24, r18
 4cc:	08 95       	ret

000004ce <UART_Current_Read_Index>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Current_Read_Index(void){
  return UART.ReadIndex;
 4ce:	20 91 3e 01 	lds	r18, 0x013E
 4d2:	30 91 3f 01 	lds	r19, 0x013F
}
 4d6:	c9 01       	movw	r24, r18
 4d8:	08 95       	ret

000004da <UART_Bytes_Available_To_Read>:
#endif


#ifdef UART_CIRCULAR_BUFFER_READ
uint16_t UART_Bytes_Available_To_Read(void){
  return UART.AvailableBytes;
 4da:	20 91 3c 01 	lds	r18, 0x013C
 4de:	30 91 3d 01 	lds	r19, 0x013D
}
 4e2:	c9 01       	movw	r24, r18
 4e4:	08 95       	ret

000004e6 <UART_Read>:


#ifdef UART_CIRCULAR_BUFFER_READ
uint8_t UART_Read(void){
  
  uint8_t current_byte=UART.Buffer[UART.ReadIndex];
 4e6:	e0 91 3e 01 	lds	r30, 0x013E
 4ea:	f0 91 3f 01 	lds	r31, 0x013F
 4ee:	e2 5f       	subi	r30, 0xF2	; 242
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	42 85       	ldd	r20, Z+10	; 0x0a
  UART.ReadIndex++;
 4f4:	80 91 3e 01 	lds	r24, 0x013E
 4f8:	90 91 3f 01 	lds	r25, 0x013F
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	90 93 3f 01 	sts	0x013F, r25
 502:	80 93 3e 01 	sts	0x013E, r24
  if(UART.ReadIndex>=UART.BufferSize){
 506:	20 91 3e 01 	lds	r18, 0x013E
 50a:	30 91 3f 01 	lds	r19, 0x013F
 50e:	80 91 38 01 	lds	r24, 0x0138
 512:	90 91 39 01 	lds	r25, 0x0139
 516:	28 17       	cp	r18, r24
 518:	39 07       	cpc	r19, r25
 51a:	20 f0       	brcs	.+8      	; 0x524 <UART_Read+0x3e>
    UART.ReadIndex=0;
 51c:	10 92 3f 01 	sts	0x013F, r1
 520:	10 92 3e 01 	sts	0x013E, r1
  }
  if(UART.AvailableBytes>0){
 524:	80 91 3c 01 	lds	r24, 0x013C
 528:	90 91 3d 01 	lds	r25, 0x013D
 52c:	89 2b       	or	r24, r25
 52e:	49 f0       	breq	.+18     	; 0x542 <UART_Read+0x5c>
    UART.AvailableBytes--;
 530:	80 91 3c 01 	lds	r24, 0x013C
 534:	90 91 3d 01 	lds	r25, 0x013D
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	90 93 3d 01 	sts	0x013D, r25
 53e:	80 93 3c 01 	sts	0x013C, r24
  }
  return current_byte;
}
 542:	84 2f       	mov	r24, r20
 544:	08 95       	ret

00000546 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
 546:	10 92 0e 01 	sts	0x010E, r1
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	06 c0       	rjmp	.+12     	; 0x55c <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
 550:	f9 01       	movw	r30, r18
 552:	e2 5f       	subi	r30, 0xF2	; 242
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	12 86       	std	Z+10, r1	; 0x0a


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	80 91 38 01 	lds	r24, 0x0138
 560:	90 91 39 01 	lds	r25, 0x0139
 564:	28 17       	cp	r18, r24
 566:	39 07       	cpc	r19, r25
 568:	98 f3       	brcs	.-26     	; 0x550 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
 56a:	10 92 3b 01 	sts	0x013B, r1
 56e:	10 92 3a 01 	sts	0x013A, r1
    
  #ifdef UART_CIRCULAR_BUFFER_READ   
  UART.ReadIndex=0;    
 572:	10 92 3f 01 	sts	0x013F, r1
 576:	10 92 3e 01 	sts	0x013E, r1
  UART.AvailableBytes=0;
 57a:	10 92 3d 01 	sts	0x013D, r1
 57e:	10 92 3c 01 	sts	0x013C, r1
  #endif
  
  #endif
}
 582:	08 95       	ret

00000584 <UART_Interrupt_Service_Routine>:
}
#endif


#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
 584:	df 93       	push	r29
 586:	cf 93       	push	r28
 588:	0f 92       	push	r0
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
 58e:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
 590:	0e 94 c5 00 	call	0x18a	; 0x18a <UART_Receive_Byte>
 594:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
 596:	80 91 0e 01 	lds	r24, 0x010E
 59a:	88 23       	and	r24, r24
 59c:	09 f0       	breq	.+2      	; 0x5a0 <UART_Interrupt_Service_Routine+0x1c>
 59e:	54 c0       	rjmp	.+168    	; 0x648 <UART_Interrupt_Service_Routine+0xc4>
    UART.Buffer[UART.BufferIndex]=received_byte;
 5a0:	e0 91 3a 01 	lds	r30, 0x013A
 5a4:	f0 91 3b 01 	lds	r31, 0x013B
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	e2 5f       	subi	r30, 0xF2	; 242
 5ac:	fe 4f       	sbci	r31, 0xFE	; 254
 5ae:	82 87       	std	Z+10, r24	; 0x0a
    UART.BufferIndex++;
 5b0:	80 91 3a 01 	lds	r24, 0x013A
 5b4:	90 91 3b 01 	lds	r25, 0x013B
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	90 93 3b 01 	sts	0x013B, r25
 5be:	80 93 3a 01 	sts	0x013A, r24

    #ifdef UART_CIRCULAR_BUFFER_READ
    UART.AvailableBytes++;
 5c2:	80 91 3c 01 	lds	r24, 0x013C
 5c6:	90 91 3d 01 	lds	r25, 0x013D
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	90 93 3d 01 	sts	0x013D, r25
 5d0:	80 93 3c 01 	sts	0x013C, r24
    if(UART.AvailableBytes>UART.BufferSize){
 5d4:	20 91 3c 01 	lds	r18, 0x013C
 5d8:	30 91 3d 01 	lds	r19, 0x013D
 5dc:	80 91 38 01 	lds	r24, 0x0138
 5e0:	90 91 39 01 	lds	r25, 0x0139
 5e4:	82 17       	cp	r24, r18
 5e6:	93 07       	cpc	r25, r19
 5e8:	00 f5       	brcc	.+64     	; 0x62a <UART_Interrupt_Service_Routine+0xa6>
      UART.AvailableBytes=UART.BufferSize;
 5ea:	80 91 38 01 	lds	r24, 0x0138
 5ee:	90 91 39 01 	lds	r25, 0x0139
 5f2:	90 93 3d 01 	sts	0x013D, r25
 5f6:	80 93 3c 01 	sts	0x013C, r24
      UART.ReadIndex++;
 5fa:	80 91 3e 01 	lds	r24, 0x013E
 5fe:	90 91 3f 01 	lds	r25, 0x013F
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	90 93 3f 01 	sts	0x013F, r25
 608:	80 93 3e 01 	sts	0x013E, r24
      if(UART.ReadIndex>=UART.BufferSize){
 60c:	20 91 3e 01 	lds	r18, 0x013E
 610:	30 91 3f 01 	lds	r19, 0x013F
 614:	80 91 38 01 	lds	r24, 0x0138
 618:	90 91 39 01 	lds	r25, 0x0139
 61c:	28 17       	cp	r18, r24
 61e:	39 07       	cpc	r19, r25
 620:	20 f0       	brcs	.+8      	; 0x62a <UART_Interrupt_Service_Routine+0xa6>
        UART.ReadIndex=0;
 622:	10 92 3f 01 	sts	0x013F, r1
 626:	10 92 3e 01 	sts	0x013E, r1
      }
    }
    #endif

    if(UART.BufferIndex>=UART.BufferSize){
 62a:	20 91 3a 01 	lds	r18, 0x013A
 62e:	30 91 3b 01 	lds	r19, 0x013B
 632:	80 91 38 01 	lds	r24, 0x0138
 636:	90 91 39 01 	lds	r25, 0x0139
 63a:	28 17       	cp	r18, r24
 63c:	39 07       	cpc	r19, r25
 63e:	20 f0       	brcs	.+8      	; 0x648 <UART_Interrupt_Service_Routine+0xc4>
      UART.BufferIndex=0;
 640:	10 92 3b 01 	sts	0x013B, r1
 644:	10 92 3a 01 	sts	0x013A, r1
    }
    #ifdef UART_LAST_RECEIVED_TIMESTAMP
      UART.LastRecivedTimeStamp=UART_Reference_Time();
    #endif
  }
}
 648:	0f 90       	pop	r0
 64a:	cf 91       	pop	r28
 64c:	df 91       	pop	r29
 64e:	08 95       	ret

00000650 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 672:	0e 94 c2 02 	call	0x584	; 0x584 <UART_Interrupt_Service_Routine>
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
 698:	82 e4       	ldi	r24, 0x42	; 66
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	90 93 41 01 	sts	0x0141, r25
 6a0:	80 93 40 01 	sts	0x0140, r24
  Timebase->Config.TimerType.Value = 0;
 6a4:	10 92 42 01 	sts	0x0142, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
 6a8:	80 91 42 01 	lds	r24, 0x0142
 6ac:	84 60       	ori	r24, 0x04	; 4
 6ae:	80 93 42 01 	sts	0x0142, r24
  Timebase->Config.TimerType.TimerIndex = 0;
 6b2:	80 91 42 01 	lds	r24, 0x0142
 6b6:	87 70       	andi	r24, 0x07	; 7
 6b8:	80 93 42 01 	sts	0x0142, r24
  Timebase->Config.UpdateRate = 1;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 44 01 	sts	0x0144, r25
 6c4:	80 93 43 01 	sts	0x0143, r24
  Timebase->Time.OVFUpdateValue=0;
 6c8:	10 92 45 01 	sts	0x0145, r1
  Timebase->Time.SubSeconds = 0;
 6cc:	10 92 4a 01 	sts	0x014A, r1
 6d0:	10 92 4b 01 	sts	0x014B, r1
 6d4:	10 92 4c 01 	sts	0x014C, r1
 6d8:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Time.Seconds = 0;
 6dc:	10 92 4e 01 	sts	0x014E, r1
 6e0:	10 92 4f 01 	sts	0x014F, r1
 6e4:	10 92 50 01 	sts	0x0150, r1
 6e8:	10 92 51 01 	sts	0x0151, r1
  Timebase->Time.LastSample = 0;
 6ec:	10 92 46 01 	sts	0x0146, r1
 6f0:	10 92 47 01 	sts	0x0147, r1
 6f4:	10 92 48 01 	sts	0x0148, r1
 6f8:	10 92 49 01 	sts	0x0149, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
 6fc:	10 92 52 01 	sts	0x0152, r1
    Timebase->DownCounter[i].EndValue = 0;
    Timebase->DownCounter[i].Value = 0;
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
}
 700:	08 95       	ret

00000702 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
 702:	7f 92       	push	r7
 704:	8f 92       	push	r8
 706:	9f 92       	push	r9
 708:	af 92       	push	r10
 70a:	bf 92       	push	r11
 70c:	cf 92       	push	r12
 70e:	df 92       	push	r13
 710:	ef 92       	push	r14
 712:	ff 92       	push	r15
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	2a 97       	sbiw	r28, 0x0a	; 10
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
 72e:	c0 90 40 01 	lds	r12, 0x0140
 732:	d0 90 41 01 	lds	r13, 0x0141
 736:	f6 01       	movw	r30, r12
 738:	80 81       	ld	r24, Z
 73a:	80 ff       	sbrs	r24, 0
 73c:	31 c0       	rjmp	.+98     	; 0x7a0 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val=0;
    if(UpdateRateHz==1){
 73e:	01 30       	cpi	r16, 0x01	; 1
 740:	11 05       	cpc	r17, r1
 742:	11 f4       	brne	.+4      	; 0x748 <Timebase_Timer_Config+0x46>
 744:	96 e0       	ldi	r25, 0x06	; 6
 746:	19 c0       	rjmp	.+50     	; 0x77a <Timebase_Timer_Config+0x78>
      Prescaler_val=0x06;
    }else if(UpdateRateHz==2){
 748:	02 30       	cpi	r16, 0x02	; 2
 74a:	11 05       	cpc	r17, r1
 74c:	11 f4       	brne	.+4      	; 0x752 <Timebase_Timer_Config+0x50>
 74e:	95 e0       	ldi	r25, 0x05	; 5
 750:	14 c0       	rjmp	.+40     	; 0x77a <Timebase_Timer_Config+0x78>
      Prescaler_val=0x05;
    }else if(UpdateRateHz==4){
 752:	04 30       	cpi	r16, 0x04	; 4
 754:	11 05       	cpc	r17, r1
 756:	11 f4       	brne	.+4      	; 0x75c <Timebase_Timer_Config+0x5a>
 758:	94 e0       	ldi	r25, 0x04	; 4
 75a:	0f c0       	rjmp	.+30     	; 0x77a <Timebase_Timer_Config+0x78>
      Prescaler_val=0x04;
    }else if(UpdateRateHz==8){
 75c:	08 30       	cpi	r16, 0x08	; 8
 75e:	11 05       	cpc	r17, r1
 760:	11 f4       	brne	.+4      	; 0x766 <Timebase_Timer_Config+0x64>
 762:	93 e0       	ldi	r25, 0x03	; 3
 764:	0a c0       	rjmp	.+20     	; 0x77a <Timebase_Timer_Config+0x78>
      Prescaler_val=0x03;
    }else if(UpdateRateHz==16){
 766:	00 31       	cpi	r16, 0x10	; 16
 768:	11 05       	cpc	r17, r1
 76a:	11 f4       	brne	.+4      	; 0x770 <Timebase_Timer_Config+0x6e>
 76c:	92 e0       	ldi	r25, 0x02	; 2
 76e:	05 c0       	rjmp	.+10     	; 0x77a <Timebase_Timer_Config+0x78>
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	00 32       	cpi	r16, 0x20	; 32
 774:	11 05       	cpc	r17, r1
 776:	09 f4       	brne	.+2      	; 0x77a <Timebase_Timer_Config+0x78>
 778:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz==64){
      Prescaler_val=0x00;
    }else{
      Prescaler_val=0x00;
    }
    cli();
 77a:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
 77c:	84 b7       	in	r24, 0x34	; 52
 77e:	87 7f       	andi	r24, 0xF7	; 247
 780:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
 782:	80 91 60 00 	lds	r24, 0x0060
 786:	80 68       	ori	r24, 0x80	; 128
 788:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
 78c:	80 91 60 00 	lds	r24, 0x0060
 790:	88 61       	ori	r24, 0x18	; 24
 792:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
 796:	90 64       	ori	r25, 0x40	; 64
 798:	90 93 60 00 	sts	0x0060, r25
    sei();
 79c:	78 94       	sei
 79e:	67 c0       	rjmp	.+206    	; 0x86e <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
 7a0:	81 fd       	sbrc	r24, 1
 7a2:	65 c0       	rjmp	.+202    	; 0x86e <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
 7a4:	82 ff       	sbrs	r24, 2
 7a6:	63 c0       	rjmp	.+198    	; 0x86e <Timebase_Timer_Config+0x16c>
    
	uint32_t temp=F_CPU;
	uint16_t clock_div_factor[5]={1,8,64,256,1024};
 7a8:	de 01       	movw	r26, r28
 7aa:	11 96       	adiw	r26, 0x01	; 1
 7ac:	e3 e0       	ldi	r30, 0x03	; 3
 7ae:	f1 e0       	ldi	r31, 0x01	; 1
 7b0:	8a e0       	ldi	r24, 0x0A	; 10
 7b2:	01 90       	ld	r0, Z+
 7b4:	0d 92       	st	X+, r0
 7b6:	81 50       	subi	r24, 0x01	; 1
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <Timebase_Timer_Config+0xb0>
	
	temp/=UpdateRateHz;
 7ba:	98 01       	movw	r18, r16
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	7b e1       	ldi	r23, 0x1B	; 27
 7c4:	87 eb       	ldi	r24, 0xB7	; 183
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 7cc:	72 2e       	mov	r7, r18
 7ce:	83 2e       	mov	r8, r19
 7d0:	94 2e       	mov	r9, r20
 7d2:	e5 2e       	mov	r14, r21
 7d4:	5e 01       	movw	r10, r28
 7d6:	08 94       	sec
 7d8:	a1 1c       	adc	r10, r1
 7da:	b1 1c       	adc	r11, r1
 7dc:	c9 01       	movw	r24, r18
 7de:	da 01       	movw	r26, r20
 7e0:	9c 01       	movw	r18, r24
 7e2:	ad 01       	movw	r20, r26
 7e4:	ff 24       	eor	r15, r15
 7e6:	14 c0       	rjmp	.+40     	; 0x810 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq=temp;
	  curr_freq/=clock_div_factor[clock_div_index];
 7e8:	f5 01       	movw	r30, r10
 7ea:	21 91       	ld	r18, Z+
 7ec:	31 91       	ld	r19, Z+
 7ee:	5f 01       	movw	r10, r30
 7f0:	40 e0       	ldi	r20, 0x00	; 0
 7f2:	50 e0       	ldi	r21, 0x00	; 0
 7f4:	67 2d       	mov	r22, r7
 7f6:	78 2d       	mov	r23, r8
 7f8:	89 2d       	mov	r24, r9
 7fa:	9e 2d       	mov	r25, r14
 7fc:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 800:	c9 01       	movw	r24, r18
 802:	da 01       	movw	r26, r20
 804:	9c 01       	movw	r18, r24
 806:	ad 01       	movw	r20, r26
	  clock_div_index++;
 808:	f3 94       	inc	r15
	  if(clock_div_index == 5){
 80a:	f5 e0       	ldi	r31, 0x05	; 5
 80c:	ff 16       	cp	r15, r31
 80e:	31 f0       	breq	.+12     	; 0x81c <Timebase_Timer_Config+0x11a>
	temp/=UpdateRateHz;
	
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
 810:	2f 3f       	cpi	r18, 0xFF	; 255
 812:	31 05       	cpc	r19, r1
 814:	41 05       	cpc	r20, r1
 816:	51 05       	cpc	r21, r1
 818:	09 f0       	breq	.+2      	; 0x81c <Timebase_Timer_Config+0x11a>
 81a:	30 f7       	brcc	.-52     	; 0x7e8 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index-=1;
 81c:	8f 2d       	mov	r24, r15
 81e:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
 820:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
 822:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
 824:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
 828:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
 82a:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
 82c:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
 82e:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
 830:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
 832:	88 23       	and	r24, r24
 834:	11 f4       	brne	.+4      	; 0x83a <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	0f c0       	rjmp	.+30     	; 0x858 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	11 f4       	brne	.+4      	; 0x842 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
 83e:	82 e0       	ldi	r24, 0x02	; 2
 840:	0b c0       	rjmp	.+22     	; 0x858 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
 842:	82 30       	cpi	r24, 0x02	; 2
 844:	11 f4       	brne	.+4      	; 0x84a <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	07 c0       	rjmp	.+14     	; 0x858 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
 84a:	83 30       	cpi	r24, 0x03	; 3
 84c:	11 f4       	brne	.+4      	; 0x852 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
 84e:	84 e0       	ldi	r24, 0x04	; 4
 850:	03 c0       	rjmp	.+6      	; 0x858 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
 852:	84 30       	cpi	r24, 0x04	; 4
 854:	11 f4       	brne	.+4      	; 0x85a <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
 856:	85 e0       	ldi	r24, 0x05	; 5
 858:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = 0xFF-curr_freq;
 85a:	82 2f       	mov	r24, r18
 85c:	80 95       	com	r24
 85e:	f6 01       	movw	r30, r12
 860:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	80 93 6e 00 	sts	0x006E, r24
    sei();
 86c:	78 94       	sei
  }
  Timebase->Config.UpdateRate=UpdateRateHz;
 86e:	f6 01       	movw	r30, r12
 870:	12 83       	std	Z+2, r17	; 0x02
 872:	01 83       	std	Z+1, r16	; 0x01
}
 874:	2a 96       	adiw	r28, 0x0a	; 10
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	cf 91       	pop	r28
 882:	df 91       	pop	r29
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
 890:	bf 90       	pop	r11
 892:	af 90       	pop	r10
 894:	9f 90       	pop	r9
 896:	8f 90       	pop	r8
 898:	7f 90       	pop	r7
 89a:	08 95       	ret

0000089c <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 89c:	e0 91 40 01 	lds	r30, 0x0140
 8a0:	f0 91 41 01 	lds	r31, 0x0141
 8a4:	80 89       	ldd	r24, Z+16	; 0x10
}
 8a6:	08 95       	ret

000008a8 <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 8a8:	e0 91 40 01 	lds	r30, 0x0140
 8ac:	f0 91 41 01 	lds	r31, 0x0141
 8b0:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
 8b2:	8f 33       	cpi	r24, 0x3F	; 63
 8b4:	18 f4       	brcc	.+6      	; 0x8bc <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens+=1;
 8b6:	80 89       	ldd	r24, Z+16	; 0x10
 8b8:	8f 5f       	subi	r24, 0xFF	; 255
 8ba:	80 8b       	std	Z+16, r24	; 0x10
 8bc:	08 95       	ret

000008be <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 8be:	e0 91 40 01 	lds	r30, 0x0140
 8c2:	f0 91 41 01 	lds	r31, 0x0141
 8c6:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
 8c8:	88 23       	and	r24, r24
 8ca:	19 f0       	breq	.+6      	; 0x8d2 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens-=1;
 8cc:	80 89       	ldd	r24, Z+16	; 0x10
 8ce:	81 50       	subi	r24, 0x01	; 1
 8d0:	80 8b       	std	Z+16, r24	; 0x10
 8d2:	08 95       	ret

000008d4 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens=0;
 8d4:	e0 91 40 01 	lds	r30, 0x0140
 8d8:	f0 91 41 01 	lds	r31, 0x0141
 8dc:	10 8a       	std	Z+16, r1	; 0x10
}
 8de:	08 95       	ret

000008e0 <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 8e0:	e0 91 40 01 	lds	r30, 0x0140
 8e4:	f0 91 41 01 	lds	r31, 0x0141
 8e8:	20 85       	ldd	r18, Z+8	; 0x08
 8ea:	31 85       	ldd	r19, Z+9	; 0x09
 8ec:	42 85       	ldd	r20, Z+10	; 0x0a
 8ee:	53 85       	ldd	r21, Z+11	; 0x0b
}
 8f0:	b9 01       	movw	r22, r18
 8f2:	ca 01       	movw	r24, r20
 8f4:	08 95       	ret

000008f6 <Timebase_Timer_Get_Seconds>:

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
 8f6:	e0 91 40 01 	lds	r30, 0x0140
 8fa:	f0 91 41 01 	lds	r31, 0x0141
 8fe:	24 85       	ldd	r18, Z+12	; 0x0c
 900:	35 85       	ldd	r19, Z+13	; 0x0d
 902:	46 85       	ldd	r20, Z+14	; 0x0e
 904:	57 85       	ldd	r21, Z+15	; 0x0f
}
 906:	b9 01       	movw	r22, r18
 908:	ca 01       	movw	r24, r20
 90a:	08 95       	ret

0000090c <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint32_t value){
  Timebase->Time.SubSeconds=value;
 90c:	e0 91 40 01 	lds	r30, 0x0140
 910:	f0 91 41 01 	lds	r31, 0x0141
 914:	60 87       	std	Z+8, r22	; 0x08
 916:	71 87       	std	Z+9, r23	; 0x09
 918:	82 87       	std	Z+10, r24	; 0x0a
 91a:	93 87       	std	Z+11, r25	; 0x0b
}
 91c:	08 95       	ret

0000091e <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
 91e:	e0 91 40 01 	lds	r30, 0x0140
 922:	f0 91 41 01 	lds	r31, 0x0141
 926:	64 87       	std	Z+12, r22	; 0x0c
 928:	75 87       	std	Z+13, r23	; 0x0d
 92a:	86 87       	std	Z+14, r24	; 0x0e
 92c:	97 87       	std	Z+15, r25	; 0x0f
}
 92e:	08 95       	ret

00000930 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
 930:	9c 01       	movw	r18, r24


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 932:	e0 91 40 01 	lds	r30, 0x0140
 936:	f0 91 41 01 	lds	r31, 0x0141
 93a:	80 89       	ldd	r24, Z+16	; 0x10
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
 93c:	8f 33       	cpi	r24, 0x3F	; 63
 93e:	18 f4       	brcc	.+6      	; 0x946 <Timebase_Timer_Delay_SubSeconds+0x16>
    Timebase->ActiveTokens+=1;
 940:	80 89       	ldd	r24, Z+16	; 0x10
 942:	8f 5f       	subi	r24, 0xFF	; 255
 944:	80 8b       	std	Z+16, r24	; 0x10
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 946:	80 85       	ldd	r24, Z+8	; 0x08
 948:	91 85       	ldd	r25, Z+9	; 0x09
 94a:	a2 85       	ldd	r26, Z+10	; 0x0a
 94c:	b3 85       	ldd	r27, Z+11	; 0x0b
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
 94e:	40 e0       	ldi	r20, 0x00	; 0
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	28 0f       	add	r18, r24
 954:	39 1f       	adc	r19, r25
 956:	4a 1f       	adc	r20, r26
 958:	5b 1f       	adc	r21, r27
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 95a:	80 85       	ldd	r24, Z+8	; 0x08
 95c:	91 85       	ldd	r25, Z+9	; 0x09
 95e:	a2 85       	ldd	r26, Z+10	; 0x0a
 960:	b3 85       	ldd	r27, Z+11	; 0x0b
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
 962:	82 17       	cp	r24, r18
 964:	93 07       	cpc	r25, r19
 966:	a4 07       	cpc	r26, r20
 968:	b5 07       	cpc	r27, r21
 96a:	b8 f3       	brcs	.-18     	; 0x95a <Timebase_Timer_Delay_SubSeconds+0x2a>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 96c:	80 89       	ldd	r24, Z+16	; 0x10
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
 96e:	88 23       	and	r24, r24
 970:	19 f0       	breq	.+6      	; 0x978 <Timebase_Timer_Delay_SubSeconds+0x48>
    Timebase->ActiveTokens-=1;
 972:	80 89       	ldd	r24, Z+16	; 0x10
 974:	81 50       	subi	r24, 0x01	; 1
 976:	80 8b       	std	Z+16, r24	; 0x10
 978:	08 95       	ret

0000097a <Timebase_Timer_Delay_Seconds>:
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Remove();
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
 97a:	ef 92       	push	r14
 97c:	ff 92       	push	r15
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
 982:	e0 91 40 01 	lds	r30, 0x0140
 986:	f0 91 41 01 	lds	r31, 0x0141
 98a:	24 85       	ldd	r18, Z+12	; 0x0c
 98c:	35 85       	ldd	r19, Z+13	; 0x0d
 98e:	46 85       	ldd	r20, Z+14	; 0x0e
 990:	57 85       	ldd	r21, Z+15	; 0x0f
  Timebase_Token_Remove();
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
 992:	7c 01       	movw	r14, r24
 994:	00 e0       	ldi	r16, 0x00	; 0
 996:	10 e0       	ldi	r17, 0x00	; 0
 998:	e2 0e       	add	r14, r18
 99a:	f3 1e       	adc	r15, r19
 99c:	04 1f       	adc	r16, r20
 99e:	15 1f       	adc	r17, r21
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 9a0:	80 85       	ldd	r24, Z+8	; 0x08
 9a2:	91 85       	ldd	r25, Z+9	; 0x09
 9a4:	a2 85       	ldd	r26, Z+10	; 0x0a
 9a6:	b3 85       	ldd	r27, Z+11	; 0x0b
  #endif
}

void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
 9a8:	8e 15       	cp	r24, r14
 9aa:	9f 05       	cpc	r25, r15
 9ac:	a0 07       	cpc	r26, r16
 9ae:	b1 07       	cpc	r27, r17
 9b0:	b8 f3       	brcs	.-18     	; 0x9a0 <Timebase_Timer_Delay_Seconds+0x26>
}
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	ff 90       	pop	r15
 9b8:	ef 90       	pop	r14
 9ba:	08 95       	ret

000009bc <Timebase_Reset>:
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
 9bc:	08 95       	ret

000009be <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
 9c4:	0e 94 4c 03 	call	0x698	; 0x698 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
 9c8:	c8 01       	movw	r24, r16
 9ca:	0e 94 81 03 	call	0x702	; 0x702 <Timebase_Timer_Config>
  Timebase_Reset();
}
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	08 95       	ret

000009d4 <Timebase_Main_Loop_Executables>:
  Timebase_UpCounter_Update_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
  #endif
}
 9d4:	08 95       	ret

000009d6 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
  Timebase->Time.SubSeconds++;
 9da:	c0 91 40 01 	lds	r28, 0x0140
 9de:	d0 91 41 01 	lds	r29, 0x0141
 9e2:	88 85       	ldd	r24, Y+8	; 0x08
 9e4:	99 85       	ldd	r25, Y+9	; 0x09
 9e6:	aa 85       	ldd	r26, Y+10	; 0x0a
 9e8:	bb 85       	ldd	r27, Y+11	; 0x0b
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	a1 1d       	adc	r26, r1
 9ee:	b1 1d       	adc	r27, r1
 9f0:	88 87       	std	Y+8, r24	; 0x08
 9f2:	99 87       	std	Y+9, r25	; 0x09
 9f4:	aa 87       	std	Y+10, r26	; 0x0a
 9f6:	bb 87       	std	Y+11, r27	; 0x0b
  TCNT0  = Timebase->Time.OVFUpdateValue;
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
 9fc:	68 85       	ldd	r22, Y+8	; 0x08
 9fe:	79 85       	ldd	r23, Y+9	; 0x09
 a00:	8a 85       	ldd	r24, Y+10	; 0x0a
 a02:	9b 85       	ldd	r25, Y+11	; 0x0b
 a04:	29 81       	ldd	r18, Y+1	; 0x01
 a06:	3a 81       	ldd	r19, Y+2	; 0x02
 a08:	40 e0       	ldi	r20, 0x00	; 0
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 a10:	61 15       	cp	r22, r1
 a12:	71 05       	cpc	r23, r1
 a14:	81 05       	cpc	r24, r1
 a16:	91 05       	cpc	r25, r1
 a18:	91 f4       	brne	.+36     	; 0xa3e <Timebase_ISR_Executables+0x68>
    Timebase->Time.Seconds++;
 a1a:	8c 85       	ldd	r24, Y+12	; 0x0c
 a1c:	9d 85       	ldd	r25, Y+13	; 0x0d
 a1e:	ae 85       	ldd	r26, Y+14	; 0x0e
 a20:	bf 85       	ldd	r27, Y+15	; 0x0f
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	a1 1d       	adc	r26, r1
 a26:	b1 1d       	adc	r27, r1
 a28:	8c 87       	std	Y+12, r24	; 0x0c
 a2a:	9d 87       	std	Y+13, r25	; 0x0d
 a2c:	ae 87       	std	Y+14, r26	; 0x0e
 a2e:	bf 87       	std	Y+15, r27	; 0x0f


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
 a30:	88 89       	ldd	r24, Y+16	; 0x10
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
 a32:	88 23       	and	r24, r24
 a34:	21 f4       	brne	.+8      	; 0xa3e <Timebase_ISR_Executables+0x68>
      Timebase->Time.SubSeconds = 0;
 a36:	18 86       	std	Y+8, r1	; 0x08
 a38:	19 86       	std	Y+9, r1	; 0x09
 a3a:	1a 86       	std	Y+10, r1	; 0x0a
 a3c:	1b 86       	std	Y+11, r1	; 0x0b
    }
	#endif
  }
}
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <__vector_16>:

ISR(TIMER0_OVF_vect){
 a44:	1f 92       	push	r1
 a46:	0f 92       	push	r0
 a48:	0f b6       	in	r0, 0x3f	; 63
 a4a:	0f 92       	push	r0
 a4c:	11 24       	eor	r1, r1
 a4e:	2f 93       	push	r18
 a50:	3f 93       	push	r19
 a52:	4f 93       	push	r20
 a54:	5f 93       	push	r21
 a56:	6f 93       	push	r22
 a58:	7f 93       	push	r23
 a5a:	8f 93       	push	r24
 a5c:	9f 93       	push	r25
 a5e:	af 93       	push	r26
 a60:	bf 93       	push	r27
 a62:	ef 93       	push	r30
 a64:	ff 93       	push	r31
  Timebase_ISR_Executables();
 a66:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Timebase_ISR_Executables>
 a6a:	ff 91       	pop	r31
 a6c:	ef 91       	pop	r30
 a6e:	bf 91       	pop	r27
 a70:	af 91       	pop	r26
 a72:	9f 91       	pop	r25
 a74:	8f 91       	pop	r24
 a76:	7f 91       	pop	r23
 a78:	6f 91       	pop	r22
 a7a:	5f 91       	pop	r21
 a7c:	4f 91       	pop	r20
 a7e:	3f 91       	pop	r19
 a80:	2f 91       	pop	r18
 a82:	0f 90       	pop	r0
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	0f 90       	pop	r0
 a88:	1f 90       	pop	r1
 a8a:	18 95       	reti

00000a8c <IIR_Butterworth_Init>:
iir_t   IIR[3];

void IIR_Butterworth_Init(void){
  for(uint8_t i=0;i<3;i++){
    IIR[i].Alpha=0;
    IIR[i].Input=0;
 a8c:	10 92 54 01 	sts	0x0154, r1
 a90:	10 92 55 01 	sts	0x0155, r1
 a94:	10 92 56 01 	sts	0x0156, r1
 a98:	10 92 57 01 	sts	0x0157, r1
    IIR[i].Output=0;
 a9c:	10 92 58 01 	sts	0x0158, r1
 aa0:	10 92 59 01 	sts	0x0159, r1
 aa4:	10 92 5a 01 	sts	0x015A, r1
 aa8:	10 92 5b 01 	sts	0x015B, r1
iir_t   IIR[3];

void IIR_Butterworth_Init(void){
  for(uint8_t i=0;i<3;i++){
    IIR[i].Alpha=0;
    IIR[i].Input=0;
 aac:	10 92 5d 01 	sts	0x015D, r1
 ab0:	10 92 5e 01 	sts	0x015E, r1
 ab4:	10 92 5f 01 	sts	0x015F, r1
 ab8:	10 92 60 01 	sts	0x0160, r1
    IIR[i].Output=0;
 abc:	10 92 61 01 	sts	0x0161, r1
 ac0:	10 92 62 01 	sts	0x0162, r1
 ac4:	10 92 63 01 	sts	0x0163, r1
 ac8:	10 92 64 01 	sts	0x0164, r1
iir_t   IIR[3];

void IIR_Butterworth_Init(void){
  for(uint8_t i=0;i<3;i++){
    IIR[i].Alpha=0;
    IIR[i].Input=0;
 acc:	10 92 66 01 	sts	0x0166, r1
 ad0:	10 92 67 01 	sts	0x0167, r1
 ad4:	10 92 68 01 	sts	0x0168, r1
 ad8:	10 92 69 01 	sts	0x0169, r1
    IIR[i].Output=0;
 adc:	10 92 6a 01 	sts	0x016A, r1
 ae0:	10 92 6b 01 	sts	0x016B, r1
 ae4:	10 92 6c 01 	sts	0x016C, r1
 ae8:	10 92 6d 01 	sts	0x016D, r1
  }
  #ifdef IIR_BUTTERWORTH_TEMP_ALPHA
  IIR[0].Alpha=IIR_BUTTERWORTH_TEMP_ALPHA;
 aec:	80 e5       	ldi	r24, 0x50	; 80
 aee:	80 93 53 01 	sts	0x0153, r24
  #endif
  
  #ifdef IIR_BUTTERWORTH_CURR_ALPHA
  IIR[1].Alpha=IIR_BUTTERWORTH_CURR_ALPHA;
 af2:	86 e4       	ldi	r24, 0x46	; 70
 af4:	80 93 5c 01 	sts	0x015C, r24
  #endif
  
  #ifdef IIR_BUTTERWORTH_VOLT_ALPHA
  IIR[2].Alpha=IIR_BUTTERWORTH_VOLT_ALPHA;
 af8:	80 93 65 01 	sts	0x0165, r24
  #endif
}
 afc:	08 95       	ret

00000afe <IIR_Butterworth>:

int32_t IIR_Butterworth(uint8_t channel, int32_t input){
 afe:	2f 92       	push	r2
 b00:	3f 92       	push	r3
 b02:	4f 92       	push	r4
 b04:	5f 92       	push	r5
 b06:	6f 92       	push	r6
 b08:	7f 92       	push	r7
 b0a:	8f 92       	push	r8
 b0c:	9f 92       	push	r9
 b0e:	af 92       	push	r10
 b10:	bf 92       	push	r11
 b12:	cf 92       	push	r12
 b14:	df 92       	push	r13
 b16:	ef 92       	push	r14
 b18:	ff 92       	push	r15
 b1a:	0f 93       	push	r16
 b1c:	1f 93       	push	r17
 b1e:	1a 01       	movw	r2, r20
 b20:	2b 01       	movw	r4, r22
  IIR[channel].Input=input;
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	4c 01       	movw	r8, r24
 b26:	33 e0       	ldi	r19, 0x03	; 3
 b28:	88 0c       	add	r8, r8
 b2a:	99 1c       	adc	r9, r9
 b2c:	3a 95       	dec	r19
 b2e:	e1 f7       	brne	.-8      	; 0xb28 <IIR_Butterworth+0x2a>
 b30:	88 0e       	add	r8, r24
 b32:	99 1e       	adc	r9, r25
 b34:	83 e5       	ldi	r24, 0x53	; 83
 b36:	91 e0       	ldi	r25, 0x01	; 1
 b38:	88 0e       	add	r8, r24
 b3a:	99 1e       	adc	r9, r25
 b3c:	f4 01       	movw	r30, r8
 b3e:	41 83       	std	Z+1, r20	; 0x01
 b40:	52 83       	std	Z+2, r21	; 0x02
 b42:	63 83       	std	Z+3, r22	; 0x03
 b44:	74 83       	std	Z+4, r23	; 0x04
  IIR[channel].Output =(IIR[channel].Input*IIR[channel].Alpha)+((100-IIR[channel].Alpha)*IIR[channel].Output);
 b46:	a0 80       	ld	r10, Z
  IIR[channel].Output/= 100;
 b48:	64 e6       	ldi	r22, 0x64	; 100
 b4a:	70 e0       	ldi	r23, 0x00	; 0
 b4c:	6a 19       	sub	r22, r10
 b4e:	71 09       	sbc	r23, r1
 b50:	88 27       	eor	r24, r24
 b52:	77 fd       	sbrc	r23, 7
 b54:	80 95       	com	r24
 b56:	98 2f       	mov	r25, r24
 b58:	25 e0       	ldi	r18, 0x05	; 5
 b5a:	62 2e       	mov	r6, r18
 b5c:	71 2c       	mov	r7, r1
 b5e:	68 0c       	add	r6, r8
 b60:	79 1c       	adc	r7, r9
 b62:	25 81       	ldd	r18, Z+5	; 0x05
 b64:	36 81       	ldd	r19, Z+6	; 0x06
 b66:	47 81       	ldd	r20, Z+7	; 0x07
 b68:	50 85       	ldd	r21, Z+8	; 0x08
 b6a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
 b6e:	7b 01       	movw	r14, r22
 b70:	8c 01       	movw	r16, r24
 b72:	bb 24       	eor	r11, r11
 b74:	cc 24       	eor	r12, r12
 b76:	dd 24       	eor	r13, r13
 b78:	c2 01       	movw	r24, r4
 b7a:	b1 01       	movw	r22, r2
 b7c:	a6 01       	movw	r20, r12
 b7e:	95 01       	movw	r18, r10
 b80:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
 b84:	e6 0e       	add	r14, r22
 b86:	f7 1e       	adc	r15, r23
 b88:	08 1f       	adc	r16, r24
 b8a:	19 1f       	adc	r17, r25
 b8c:	c8 01       	movw	r24, r16
 b8e:	b7 01       	movw	r22, r14
 b90:	24 e6       	ldi	r18, 0x64	; 100
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	40 e0       	ldi	r20, 0x00	; 0
 b96:	50 e0       	ldi	r21, 0x00	; 0
 b98:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__divmodsi4>
 b9c:	ca 01       	movw	r24, r20
 b9e:	f4 01       	movw	r30, r8
 ba0:	25 83       	std	Z+5, r18	; 0x05
 ba2:	f3 01       	movw	r30, r6
 ba4:	31 83       	std	Z+1, r19	; 0x01
 ba6:	42 83       	std	Z+2, r20	; 0x02
 ba8:	93 83       	std	Z+3, r25	; 0x03
  return IIR[channel].Output;
}
 baa:	b9 01       	movw	r22, r18
 bac:	1f 91       	pop	r17
 bae:	0f 91       	pop	r16
 bb0:	ff 90       	pop	r15
 bb2:	ef 90       	pop	r14
 bb4:	df 90       	pop	r13
 bb6:	cf 90       	pop	r12
 bb8:	bf 90       	pop	r11
 bba:	af 90       	pop	r10
 bbc:	9f 90       	pop	r9
 bbe:	8f 90       	pop	r8
 bc0:	7f 90       	pop	r7
 bc2:	6f 90       	pop	r6
 bc4:	5f 90       	pop	r5
 bc6:	4f 90       	pop	r4
 bc8:	3f 90       	pop	r3
 bca:	2f 90       	pop	r2
 bcc:	08 95       	ret

00000bce <ADC_Init>:

void ADC_Init(void){
  ADMUX  =(1<<REFS0)|(1<<REFS1);
 bce:	80 ec       	ldi	r24, 0xC0	; 192
 bd0:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
 bd4:	ea e7       	ldi	r30, 0x7A	; 122
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	86 e0       	ldi	r24, 0x06	; 6
 bda:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
 bdc:	80 81       	ld	r24, Z
 bde:	80 68       	ori	r24, 0x80	; 128
 be0:	80 83       	st	Z, r24
  IIR_Butterworth_Init();
 be2:	0e 94 46 05 	call	0xa8c	; 0xa8c <IIR_Butterworth_Init>
}
 be6:	08 95       	ret

00000be8 <ADC_Read>:

uint16_t ADC_Read(uint8_t channel){
  uint8_t admux=(0xC0|channel);
 be8:	98 2f       	mov	r25, r24
 bea:	90 6c       	ori	r25, 0xC0	; 192
  if(ADMUX!=admux){ADMUX=admux;}
 bec:	80 91 7c 00 	lds	r24, 0x007C
 bf0:	89 17       	cp	r24, r25
 bf2:	11 f0       	breq	.+4      	; 0xbf8 <ADC_Read+0x10>
 bf4:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
 bf8:	80 91 7a 00 	lds	r24, 0x007A
 bfc:	80 64       	ori	r24, 0x40	; 64
 bfe:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA &(1<<ADIF)));
 c02:	80 91 7a 00 	lds	r24, 0x007A
 c06:	84 ff       	sbrs	r24, 4
 c08:	fc cf       	rjmp	.-8      	; 0xc02 <ADC_Read+0x1a>
  ADCSRA|=(1<<ADIF);
 c0a:	80 91 7a 00 	lds	r24, 0x007A
 c0e:	80 61       	ori	r24, 0x10	; 16
 c10:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
 c14:	20 91 78 00 	lds	r18, 0x0078
 c18:	30 91 79 00 	lds	r19, 0x0079
}
 c1c:	c9 01       	movw	r24, r18
 c1e:	08 95       	ret

00000c20 <ADC_Read_Temperature>:


uint16_t ADC_Read_Temperature(uint8_t tempearure_factor){
 c20:	df 92       	push	r13
 c22:	ef 92       	push	r14
 c24:	ff 92       	push	r15
 c26:	0f 93       	push	r16
 c28:	1f 93       	push	r17
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	d8 2e       	mov	r13, r24
 c30:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_T);
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_Read>
}


uint16_t ADC_Read_Temperature(uint8_t tempearure_factor){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
 c38:	1f 5f       	subi	r17, 0xFF	; 255
 c3a:	14 30       	cpi	r17, 0x04	; 4
 c3c:	d1 f7       	brne	.-12     	; 0xc32 <ADC_Read_Temperature+0x12>
 c3e:	ee 24       	eor	r14, r14
 c40:	ff 24       	eor	r15, r15
 c42:	87 01       	movw	r16, r14
 c44:	c0 e0       	ldi	r28, 0x00	; 0
 c46:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t dummy=ADC_Read(ADC_CHANNEL_T);
	dummy=0xFF;
  }
  
  for(uint16_t i=0;i<ADC_SMPL_T;i++){
    sum+=ADC_Read(ADC_CHANNEL_T);
 c48:	80 e0       	ldi	r24, 0x00	; 0
 c4a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_Read>
 c4e:	a0 e0       	ldi	r26, 0x00	; 0
 c50:	b0 e0       	ldi	r27, 0x00	; 0
 c52:	e8 0e       	add	r14, r24
 c54:	f9 1e       	adc	r15, r25
 c56:	0a 1f       	adc	r16, r26
 c58:	1b 1f       	adc	r17, r27
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_T);
	dummy=0xFF;
  }
  
  for(uint16_t i=0;i<ADC_SMPL_T;i++){
 c5a:	21 96       	adiw	r28, 0x01	; 1
 c5c:	c0 38       	cpi	r28, 0x80	; 128
 c5e:	d1 05       	cpc	r29, r1
 c60:	99 f7       	brne	.-26     	; 0xc48 <ADC_Read_Temperature+0x28>
    sum+=ADC_Read(ADC_CHANNEL_T);
  }
  
  sum/=ADC_SMPL_T;
 c62:	47 e0       	ldi	r20, 0x07	; 7
 c64:	16 95       	lsr	r17
 c66:	07 95       	ror	r16
 c68:	f7 94       	ror	r15
 c6a:	e7 94       	ror	r14
 c6c:	4a 95       	dec	r20
 c6e:	d1 f7       	brne	.-12     	; 0xc64 <ADC_Read_Temperature+0x44>
  sum*=tempearure_factor;
 c70:	2d 2d       	mov	r18, r13
 c72:	30 e0       	ldi	r19, 0x00	; 0
 c74:	40 e0       	ldi	r20, 0x00	; 0
 c76:	50 e0       	ldi	r21, 0x00	; 0
 c78:	c8 01       	movw	r24, r16
 c7a:	b7 01       	movw	r22, r14
 c7c:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
  sum/=100;
  if(sum<0){sum=0;}
  #ifdef IIR_BUTTERWORTH_TEMP_ALPHA
  sum=IIR_Butterworth(0,sum);
 c80:	24 e6       	ldi	r18, 0x64	; 100
 c82:	30 e0       	ldi	r19, 0x00	; 0
 c84:	40 e0       	ldi	r20, 0x00	; 0
 c86:	50 e0       	ldi	r21, 0x00	; 0
 c88:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 c8c:	80 e0       	ldi	r24, 0x00	; 0
 c8e:	ba 01       	movw	r22, r20
 c90:	a9 01       	movw	r20, r18
 c92:	0e 94 7f 05 	call	0xafe	; 0xafe <IIR_Butterworth>
  #endif
  return sum;
}
 c96:	cb 01       	movw	r24, r22
 c98:	df 91       	pop	r29
 c9a:	cf 91       	pop	r28
 c9c:	1f 91       	pop	r17
 c9e:	0f 91       	pop	r16
 ca0:	ff 90       	pop	r15
 ca2:	ef 90       	pop	r14
 ca4:	df 90       	pop	r13
 ca6:	08 95       	ret

00000ca8 <ADC_Read_Current>:

uint16_t ADC_Read_Current(void){
 ca8:	df 92       	push	r13
 caa:	ef 92       	push	r14
 cac:	ff 92       	push	r15
 cae:	0f 93       	push	r16
 cb0:	1f 93       	push	r17
 cb2:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_I);
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_Read>
  return sum;
}

uint16_t ADC_Read_Current(void){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
 cba:	1f 5f       	subi	r17, 0xFF	; 255
 cbc:	14 30       	cpi	r17, 0x04	; 4
 cbe:	d1 f7       	brne	.-12     	; 0xcb4 <ADC_Read_Current+0xc>
 cc0:	ee 24       	eor	r14, r14
 cc2:	ff 24       	eor	r15, r15
 cc4:	87 01       	movw	r16, r14
 cc6:	dd 24       	eor	r13, r13
    uint16_t dummy=ADC_Read(ADC_CHANNEL_I);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_I;i++){
    sum+=ADC_Read(ADC_CHANNEL_I);
 cc8:	81 e0       	ldi	r24, 0x01	; 1
 cca:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_Read>
 cce:	a0 e0       	ldi	r26, 0x00	; 0
 cd0:	b0 e0       	ldi	r27, 0x00	; 0
 cd2:	e8 0e       	add	r14, r24
 cd4:	f9 1e       	adc	r15, r25
 cd6:	0a 1f       	adc	r16, r26
 cd8:	1b 1f       	adc	r17, r27
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_I);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_I;i++){
 cda:	d3 94       	inc	r13
 cdc:	80 e1       	ldi	r24, 0x10	; 16
 cde:	d8 16       	cp	r13, r24
 ce0:	99 f7       	brne	.-26     	; 0xcc8 <ADC_Read_Current+0x20>
    sum+=ADC_Read(ADC_CHANNEL_I);
  }
  sum/=ADC_SMPL_I;
 ce2:	54 e0       	ldi	r21, 0x04	; 4
 ce4:	16 95       	lsr	r17
 ce6:	07 95       	ror	r16
 ce8:	f7 94       	ror	r15
 cea:	e7 94       	ror	r14
 cec:	5a 95       	dec	r21
 cee:	d1 f7       	brne	.-12     	; 0xce4 <ADC_Read_Current+0x3c>
  sum*=1000;
 cf0:	c8 01       	movw	r24, r16
 cf2:	b7 01       	movw	r22, r14
 cf4:	28 ee       	ldi	r18, 0xE8	; 232
 cf6:	33 e0       	ldi	r19, 0x03	; 3
 cf8:	40 e0       	ldi	r20, 0x00	; 0
 cfa:	50 e0       	ldi	r21, 0x00	; 0
 cfc:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
  sum/=SENSE_RES_I;
  #ifdef IIR_BUTTERWORTH_CURR_ALPHA
  sum=IIR_Butterworth(1,sum);
 d00:	22 e3       	ldi	r18, 0x32	; 50
 d02:	30 e0       	ldi	r19, 0x00	; 0
 d04:	40 e0       	ldi	r20, 0x00	; 0
 d06:	50 e0       	ldi	r21, 0x00	; 0
 d08:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	ba 01       	movw	r22, r20
 d10:	a9 01       	movw	r20, r18
 d12:	0e 94 7f 05 	call	0xafe	; 0xafe <IIR_Butterworth>
  #endif
  return sum;
}
 d16:	cb 01       	movw	r24, r22
 d18:	1f 91       	pop	r17
 d1a:	0f 91       	pop	r16
 d1c:	ff 90       	pop	r15
 d1e:	ef 90       	pop	r14
 d20:	df 90       	pop	r13
 d22:	08 95       	ret

00000d24 <ADC_Read_Input_Voltage>:

uint8_t ADC_Read_Input_Voltage(void){
 d24:	df 92       	push	r13
 d26:	ef 92       	push	r14
 d28:	ff 92       	push	r15
 d2a:	0f 93       	push	r16
 d2c:	1f 93       	push	r17
 d2e:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_V);
 d30:	82 e0       	ldi	r24, 0x02	; 2
 d32:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_Read>
  return sum;
}

uint8_t ADC_Read_Input_Voltage(void){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
 d36:	1f 5f       	subi	r17, 0xFF	; 255
 d38:	14 30       	cpi	r17, 0x04	; 4
 d3a:	d1 f7       	brne	.-12     	; 0xd30 <ADC_Read_Input_Voltage+0xc>
 d3c:	ee 24       	eor	r14, r14
 d3e:	ff 24       	eor	r15, r15
 d40:	87 01       	movw	r16, r14
 d42:	dd 24       	eor	r13, r13
    uint16_t dummy=ADC_Read(ADC_CHANNEL_V);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_V;i++){
    sum+=ADC_Read(ADC_CHANNEL_V);
 d44:	82 e0       	ldi	r24, 0x02	; 2
 d46:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_Read>
 d4a:	a0 e0       	ldi	r26, 0x00	; 0
 d4c:	b0 e0       	ldi	r27, 0x00	; 0
 d4e:	e8 0e       	add	r14, r24
 d50:	f9 1e       	adc	r15, r25
 d52:	0a 1f       	adc	r16, r26
 d54:	1b 1f       	adc	r17, r27
  uint32_t sum=0;
  for(uint8_t i=0;i<ADC_SMPL_DUMMY;i++){
    uint16_t dummy=ADC_Read(ADC_CHANNEL_V);
	dummy=0xFF;
  }
  for(uint8_t i=0;i<ADC_SMPL_V;i++){
 d56:	d3 94       	inc	r13
 d58:	80 e1       	ldi	r24, 0x10	; 16
 d5a:	d8 16       	cp	r13, r24
 d5c:	99 f7       	brne	.-26     	; 0xd44 <ADC_Read_Input_Voltage+0x20>
    sum+=ADC_Read(ADC_CHANNEL_V);
  }
  sum/=ADC_SMPL_V;
 d5e:	f4 e0       	ldi	r31, 0x04	; 4
 d60:	16 95       	lsr	r17
 d62:	07 95       	ror	r16
 d64:	f7 94       	ror	r15
 d66:	e7 94       	ror	r14
 d68:	fa 95       	dec	r31
 d6a:	d1 f7       	brne	.-12     	; 0xd60 <ADC_Read_Input_Voltage+0x3c>
  sum*=ADC_IVREF;
 d6c:	c8 01       	movw	r24, r16
 d6e:	b7 01       	movw	r22, r14
 d70:	2c e4       	ldi	r18, 0x4C	; 76
 d72:	34 e0       	ldi	r19, 0x04	; 4
 d74:	40 e0       	ldi	r20, 0x00	; 0
 d76:	50 e0       	ldi	r21, 0x00	; 0
 d78:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
  sum/=1024;
 d7c:	ea e0       	ldi	r30, 0x0A	; 10
 d7e:	96 95       	lsr	r25
 d80:	87 95       	ror	r24
 d82:	77 95       	ror	r23
 d84:	67 95       	ror	r22
 d86:	ea 95       	dec	r30
 d88:	d1 f7       	brne	.-12     	; 0xd7e <ADC_Read_Input_Voltage+0x5a>
  sum*=ADC_VSNS_VDIV;
 d8a:	22 e8       	ldi	r18, 0x82	; 130
 d8c:	30 e0       	ldi	r19, 0x00	; 0
 d8e:	40 e0       	ldi	r20, 0x00	; 0
 d90:	50 e0       	ldi	r21, 0x00	; 0
 d92:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
  sum/=1000;
  #ifdef IIR_BUTTERWORTH_VOLT_ALPHA
  sum=IIR_Butterworth(2,sum);
 d96:	28 ee       	ldi	r18, 0xE8	; 232
 d98:	33 e0       	ldi	r19, 0x03	; 3
 d9a:	40 e0       	ldi	r20, 0x00	; 0
 d9c:	50 e0       	ldi	r21, 0x00	; 0
 d9e:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 da2:	82 e0       	ldi	r24, 0x02	; 2
 da4:	ba 01       	movw	r22, r20
 da6:	a9 01       	movw	r20, r18
 da8:	0e 94 7f 05 	call	0xafe	; 0xafe <IIR_Butterworth>
 dac:	86 2f       	mov	r24, r22
  #endif
  return (uint8_t)sum;
}
 dae:	1f 91       	pop	r17
 db0:	0f 91       	pop	r16
 db2:	ff 90       	pop	r15
 db4:	ef 90       	pop	r14
 db6:	df 90       	pop	r13
 db8:	08 95       	ret

00000dba <ADC_Read_Power_Draw>:


uint16_t ADC_Read_Power_Draw(uint8_t input_voltage){ 
 dba:	ef 92       	push	r14
 dbc:	ff 92       	push	r15
 dbe:	0f 93       	push	r16
 dc0:	1f 93       	push	r17
 dc2:	e8 2e       	mov	r14, r24
  uint32_t curr=ADC_Read_Current();
 dc4:	0e 94 54 06 	call	0xca8	; 0xca8 <ADC_Read_Current>
 dc8:	ff 24       	eor	r15, r15
 dca:	00 e0       	ldi	r16, 0x00	; 0
 dcc:	10 e0       	ldi	r17, 0x00	; 0
 dce:	9c 01       	movw	r18, r24
 dd0:	40 e0       	ldi	r20, 0x00	; 0
 dd2:	50 e0       	ldi	r21, 0x00	; 0
 dd4:	c8 01       	movw	r24, r16
 dd6:	b7 01       	movw	r22, r14
 dd8:	0e 94 7c 07 	call	0xef8	; 0xef8 <__mulsi3>
 ddc:	28 ee       	ldi	r18, 0xE8	; 232
 dde:	33 e0       	ldi	r19, 0x03	; 3
 de0:	40 e0       	ldi	r20, 0x00	; 0
 de2:	50 e0       	ldi	r21, 0x00	; 0
 de4:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 de8:	c9 01       	movw	r24, r18
  uint32_t pwr= (input_voltage*curr)/1000;
  return (uint16_t)pwr;
}
 dea:	1f 91       	pop	r17
 dec:	0f 91       	pop	r16
 dee:	ff 90       	pop	r15
 df0:	ef 90       	pop	r14
 df2:	08 95       	ret

00000df4 <Calculate_Power_Bar>:

uint8_t Calculate_Power_Bar(uint16_t max_power, uint16_t power_draw){
 df4:	ef 92       	push	r14
 df6:	ff 92       	push	r15
 df8:	0f 93       	push	r16
 dfa:	1f 93       	push	r17
  uint32_t bar_val=power_draw*100;
 dfc:	24 e6       	ldi	r18, 0x64	; 100
 dfe:	30 e0       	ldi	r19, 0x00	; 0
 e00:	62 9f       	mul	r22, r18
 e02:	70 01       	movw	r14, r0
 e04:	63 9f       	mul	r22, r19
 e06:	f0 0c       	add	r15, r0
 e08:	72 9f       	mul	r23, r18
 e0a:	f0 0c       	add	r15, r0
 e0c:	11 24       	eor	r1, r1
 e0e:	00 e0       	ldi	r16, 0x00	; 0
 e10:	10 e0       	ldi	r17, 0x00	; 0
 e12:	9c 01       	movw	r18, r24
 e14:	40 e0       	ldi	r20, 0x00	; 0
 e16:	50 e0       	ldi	r21, 0x00	; 0
 e18:	c8 01       	movw	r24, r16
 e1a:	b7 01       	movw	r22, r14
 e1c:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 e20:	82 2f       	mov	r24, r18
  bar_val=bar_val/max_power;
  return (uint8_t)bar_val;
 e22:	1f 91       	pop	r17
 e24:	0f 91       	pop	r16
 e26:	ff 90       	pop	r15
 e28:	ef 90       	pop	r14
 e2a:	08 95       	ret

00000e2c <Iron_Heater_On>:
}heater_t;

heater_t heater;


void Iron_Heater_On(uint16_t val){
 e2c:	9c 01       	movw	r18, r24
  if((heater.Status==0) && (val>0)){
 e2e:	80 91 6e 01 	lds	r24, 0x016E
 e32:	88 23       	and	r24, r24
 e34:	e9 f4       	brne	.+58     	; 0xe70 <Iron_Heater_On+0x44>
 e36:	21 15       	cp	r18, r1
 e38:	31 05       	cpc	r19, r1
 e3a:	d1 f0       	breq	.+52     	; 0xe70 <Iron_Heater_On+0x44>
    heater.RawPWMInput=val;
 e3c:	30 93 74 01 	sts	0x0174, r19
 e40:	20 93 73 01 	sts	0x0173, r18
 e44:	82 e0       	ldi	r24, 0x02	; 2
 e46:	28 35       	cpi	r18, 0x58	; 88
 e48:	38 07       	cpc	r19, r24
 e4a:	10 f0       	brcs	.+4      	; 0xe50 <Iron_Heater_On+0x24>
 e4c:	27 e5       	ldi	r18, 0x57	; 87
 e4e:	32 e0       	ldi	r19, 0x02	; 2
    if(val>PWM_MAX_VAL){val=PWM_MAX_VAL;}
    OCR1A=val;
 e50:	30 93 89 00 	sts	0x0089, r19
 e54:	20 93 88 00 	sts	0x0088, r18
    TCCR1A|=(1<<COM1A1);
 e58:	80 91 80 00 	lds	r24, 0x0080
 e5c:	80 68       	ori	r24, 0x80	; 128
 e5e:	80 93 80 00 	sts	0x0080, r24
	heater.PwmCurrentValue=val;
 e62:	30 93 72 01 	sts	0x0172, r19
 e66:	20 93 71 01 	sts	0x0171, r18
	heater.Status=1;
 e6a:	81 e0       	ldi	r24, 0x01	; 1
 e6c:	80 93 6e 01 	sts	0x016E, r24
 e70:	08 95       	ret

00000e72 <Iron_Heater_Off>:
}



void Iron_Heater_Off(void){
  if(heater.Status==1){
 e72:	80 91 6e 01 	lds	r24, 0x016E
 e76:	81 30       	cpi	r24, 0x01	; 1
 e78:	89 f4       	brne	.+34     	; 0xe9c <Iron_Heater_Off+0x2a>
    OCR1A=1;
 e7a:	81 e0       	ldi	r24, 0x01	; 1
 e7c:	90 e0       	ldi	r25, 0x00	; 0
 e7e:	90 93 89 00 	sts	0x0089, r25
 e82:	80 93 88 00 	sts	0x0088, r24
	heater.PwmCurrentValue=0;
 e86:	10 92 72 01 	sts	0x0172, r1
 e8a:	10 92 71 01 	sts	0x0171, r1
	heater.Status=0;
 e8e:	10 92 6e 01 	sts	0x016E, r1
    TCCR1A&=~(1<<COM1A1);
 e92:	80 91 80 00 	lds	r24, 0x0080
 e96:	8f 77       	andi	r24, 0x7F	; 127
 e98:	80 93 80 00 	sts	0x0080, r24
 e9c:	08 95       	ret

00000e9e <Get_Raw_PWM_Input>:
  }
}

uint16_t Get_Raw_PWM_Input(void){
  return heater.RawPWMInput;
}
 e9e:	80 91 73 01 	lds	r24, 0x0173
 ea2:	90 91 74 01 	lds	r25, 0x0174
 ea6:	08 95       	ret

00000ea8 <Get_Current_PWM>:

uint16_t Get_Current_PWM(void){
  return heater.PwmCurrentValue;
}
 ea8:	80 91 71 01 	lds	r24, 0x0171
 eac:	90 91 72 01 	lds	r25, 0x0172
 eb0:	08 95       	ret

00000eb2 <PWM_Init>:


void PWM_Init(void){
  DDRB|=(1<<1);
 eb2:	21 9a       	sbi	0x04, 1	; 4
  PORTB&=~(1<<1);
 eb4:	29 98       	cbi	0x05, 1	; 5
  TCCR1A=(1<<COM1A1)|(1<<WGM11);
 eb6:	e0 e8       	ldi	r30, 0x80	; 128
 eb8:	f0 e0       	ldi	r31, 0x00	; 0
 eba:	82 e8       	ldi	r24, 0x82	; 130
 ebc:	80 83       	st	Z, r24
  TCCR1B=(1<<CS10)|(1<<WGM12)|(1<<WGM13);
 ebe:	89 e1       	ldi	r24, 0x19	; 25
 ec0:	80 93 81 00 	sts	0x0081, r24
  ICR1=ICR1_TOP_VAL;
 ec4:	28 e5       	ldi	r18, 0x58	; 88
 ec6:	32 e0       	ldi	r19, 0x02	; 2
 ec8:	30 93 87 00 	sts	0x0087, r19
 ecc:	20 93 86 00 	sts	0x0086, r18
  OCR1A=OCR1_INIT_VAL;
 ed0:	81 e0       	ldi	r24, 0x01	; 1
 ed2:	90 e0       	ldi	r25, 0x00	; 0
 ed4:	90 93 89 00 	sts	0x0089, r25
 ed8:	80 93 88 00 	sts	0x0088, r24
  TCCR1A&=~(1<<COM1A1);
 edc:	80 81       	ld	r24, Z
 ede:	8f 77       	andi	r24, 0x7F	; 127
 ee0:	80 83       	st	Z, r24
  heater.PwmTopValue=ICR1_TOP_VAL;
 ee2:	30 93 70 01 	sts	0x0170, r19
 ee6:	20 93 6f 01 	sts	0x016F, r18
  heater.RawPWMInput=0;
 eea:	10 92 74 01 	sts	0x0174, r1
 eee:	10 92 73 01 	sts	0x0173, r1
  Iron_Heater_Off();
 ef2:	0e 94 39 07 	call	0xe72	; 0xe72 <Iron_Heater_Off>
}
 ef6:	08 95       	ret

00000ef8 <__mulsi3>:
 ef8:	62 9f       	mul	r22, r18
 efa:	d0 01       	movw	r26, r0
 efc:	73 9f       	mul	r23, r19
 efe:	f0 01       	movw	r30, r0
 f00:	82 9f       	mul	r24, r18
 f02:	e0 0d       	add	r30, r0
 f04:	f1 1d       	adc	r31, r1
 f06:	64 9f       	mul	r22, r20
 f08:	e0 0d       	add	r30, r0
 f0a:	f1 1d       	adc	r31, r1
 f0c:	92 9f       	mul	r25, r18
 f0e:	f0 0d       	add	r31, r0
 f10:	83 9f       	mul	r24, r19
 f12:	f0 0d       	add	r31, r0
 f14:	74 9f       	mul	r23, r20
 f16:	f0 0d       	add	r31, r0
 f18:	65 9f       	mul	r22, r21
 f1a:	f0 0d       	add	r31, r0
 f1c:	99 27       	eor	r25, r25
 f1e:	72 9f       	mul	r23, r18
 f20:	b0 0d       	add	r27, r0
 f22:	e1 1d       	adc	r30, r1
 f24:	f9 1f       	adc	r31, r25
 f26:	63 9f       	mul	r22, r19
 f28:	b0 0d       	add	r27, r0
 f2a:	e1 1d       	adc	r30, r1
 f2c:	f9 1f       	adc	r31, r25
 f2e:	bd 01       	movw	r22, r26
 f30:	cf 01       	movw	r24, r30
 f32:	11 24       	eor	r1, r1
 f34:	08 95       	ret

00000f36 <__udivmodsi4>:
 f36:	a1 e2       	ldi	r26, 0x21	; 33
 f38:	1a 2e       	mov	r1, r26
 f3a:	aa 1b       	sub	r26, r26
 f3c:	bb 1b       	sub	r27, r27
 f3e:	fd 01       	movw	r30, r26
 f40:	0d c0       	rjmp	.+26     	; 0xf5c <__udivmodsi4_ep>

00000f42 <__udivmodsi4_loop>:
 f42:	aa 1f       	adc	r26, r26
 f44:	bb 1f       	adc	r27, r27
 f46:	ee 1f       	adc	r30, r30
 f48:	ff 1f       	adc	r31, r31
 f4a:	a2 17       	cp	r26, r18
 f4c:	b3 07       	cpc	r27, r19
 f4e:	e4 07       	cpc	r30, r20
 f50:	f5 07       	cpc	r31, r21
 f52:	20 f0       	brcs	.+8      	; 0xf5c <__udivmodsi4_ep>
 f54:	a2 1b       	sub	r26, r18
 f56:	b3 0b       	sbc	r27, r19
 f58:	e4 0b       	sbc	r30, r20
 f5a:	f5 0b       	sbc	r31, r21

00000f5c <__udivmodsi4_ep>:
 f5c:	66 1f       	adc	r22, r22
 f5e:	77 1f       	adc	r23, r23
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	1a 94       	dec	r1
 f66:	69 f7       	brne	.-38     	; 0xf42 <__udivmodsi4_loop>
 f68:	60 95       	com	r22
 f6a:	70 95       	com	r23
 f6c:	80 95       	com	r24
 f6e:	90 95       	com	r25
 f70:	9b 01       	movw	r18, r22
 f72:	ac 01       	movw	r20, r24
 f74:	bd 01       	movw	r22, r26
 f76:	cf 01       	movw	r24, r30
 f78:	08 95       	ret

00000f7a <__divmodsi4>:
 f7a:	97 fb       	bst	r25, 7
 f7c:	09 2e       	mov	r0, r25
 f7e:	05 26       	eor	r0, r21
 f80:	0e d0       	rcall	.+28     	; 0xf9e <__divmodsi4_neg1>
 f82:	57 fd       	sbrc	r21, 7
 f84:	04 d0       	rcall	.+8      	; 0xf8e <__divmodsi4_neg2>
 f86:	d7 df       	rcall	.-82     	; 0xf36 <__udivmodsi4>
 f88:	0a d0       	rcall	.+20     	; 0xf9e <__divmodsi4_neg1>
 f8a:	00 1c       	adc	r0, r0
 f8c:	38 f4       	brcc	.+14     	; 0xf9c <__divmodsi4_exit>

00000f8e <__divmodsi4_neg2>:
 f8e:	50 95       	com	r21
 f90:	40 95       	com	r20
 f92:	30 95       	com	r19
 f94:	21 95       	neg	r18
 f96:	3f 4f       	sbci	r19, 0xFF	; 255
 f98:	4f 4f       	sbci	r20, 0xFF	; 255
 f9a:	5f 4f       	sbci	r21, 0xFF	; 255

00000f9c <__divmodsi4_exit>:
 f9c:	08 95       	ret

00000f9e <__divmodsi4_neg1>:
 f9e:	f6 f7       	brtc	.-4      	; 0xf9c <__divmodsi4_exit>
 fa0:	90 95       	com	r25
 fa2:	80 95       	com	r24
 fa4:	70 95       	com	r23
 fa6:	61 95       	neg	r22
 fa8:	7f 4f       	sbci	r23, 0xFF	; 255
 faa:	8f 4f       	sbci	r24, 0xFF	; 255
 fac:	9f 4f       	sbci	r25, 0xFF	; 255
 fae:	08 95       	ret

00000fb0 <_exit>:
 fb0:	f8 94       	cli

00000fb2 <__stop_program>:
 fb2:	ff cf       	rjmp	.-2      	; 0xfb2 <__stop_program>
