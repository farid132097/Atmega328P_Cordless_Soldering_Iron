
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000292e  000029c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000292e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  00800112  00800112  000029d4  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000016f5  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003bbb  00000000  00000000  000041c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bdb  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025d0  00000000  00000000  0000895f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cb0  00000000  00000000  0000af30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001871  00000000  00000000  0000bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000feb  00000000  00000000  0000d451  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000e43c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e2       	ldi	r30, 0x2E	; 46
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 31       	cpi	r26, 0x1B	; 27
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 95 14 	jmp	0x292a	; 0x292a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "adc.h"
#include "pwm.h"
#include "lpf.h"
#include "pid.h"

int main(void){
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
  
  Timebase_Init(50);
      ae:	82 e3       	ldi	r24, 0x32	; 50
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Timebase_Init>
  PWM_Init();
      b6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <PWM_Init>
  ADC_Init();
      ba:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <ADC_Init>
  PID_Init();
      be:	0e 94 1e 13 	call	0x263c	; 0x263c <PID_Init>
  Debug_Init();
      c2:	0e 94 1e 14 	call	0x283c	; 0x283c <Debug_Init>
  Timebase_Timer_Await_SubSeconds(2);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 b8 04 	call	0x970	; 0x970 <Timebase_Timer_Await_SubSeconds>
  Iron_Set_Max_PWM_Div_Fact(4);
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <Iron_Set_Max_PWM_Div_Fact>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      d6:	08 e9       	ldi	r16, 0x98	; 152
      d8:	1a e3       	ldi	r17, 0x3A	; 58
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(5);
      da:	c8 e2       	ldi	r28, 0x28	; 40
      dc:	d3 e2       	ldi	r29, 0x23	; 35
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 b8 04 	call	0x970	; 0x970 <Timebase_Timer_Await_SubSeconds>
    Iron_Heater_Off();
      e6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Iron_Heater_Off>
      ea:	c8 01       	movw	r24, r16
      ec:	01 97       	sbiw	r24, 0x01	; 1
      ee:	f1 f7       	brne	.-4      	; 0xec <main+0x46>
	_delay_ms(5);
	ADC_Read_Temperature();
      f0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <ADC_Read_Temperature>
	Iron_Heater_On(250);
      f4:	8a ef       	ldi	r24, 0xFA	; 250
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Iron_Heater_On>
      fc:	ce 01       	movw	r24, r28
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <main+0x58>
	Iron_Heater_Control();*/
	
	_delay_ms(3);
	
	//Debug_Print_UpTime();
    Debug_Print_PID_SetPoint();
     102:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <Debug_Print_PID_SetPoint>
    Debug_Print_Current_Temperature();
     106:	0e 94 33 13 	call	0x2666	; 0x2666 <Debug_Print_Current_Temperature>
	//Debug_Print_PID_DError_Product();
	
	//Debug_Print_Max_PWM();
	//Debug_Print_Vin();
	//Debug_Print_Current_Draw();
	Debug_Print_Power_Draw();
     10a:	0e 94 4d 13 	call	0x269a	; 0x269a <Debug_Print_Power_Draw>
	//Debug_Print_Power_Bar_Value();
	
	//Debug_Print_Display_Temperature();
	UART_Transmit_New_Line();
     10e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <UART_Transmit_New_Line>
     112:	e5 cf       	rjmp	.-54     	; 0xde <main+0x38>

00000114 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     114:	10 92 12 01 	sts	0x0112, r1
     118:	e3 e1       	ldi	r30, 0x13	; 19
     11a:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     11c:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	eb 31       	cpi	r30, 0x1B	; 27
     122:	f8 07       	cpc	r31, r24
     124:	d9 f7       	brne	.-10     	; 0x11c <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     126:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     128:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     12a:	80 e2       	ldi	r24, 0x20	; 32
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	93 a3       	std	Z+35, r25	; 0x23
     130:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     132:	15 a2       	std	Z+37, r1	; 0x25
     134:	14 a2       	std	Z+36, r1	; 0x24
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	04 c0       	rjmp	.+8      	; 0x142 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     13a:	ee 5e       	subi	r30, 0xEE	; 238
     13c:	fe 4f       	sbci	r31, 0xFE	; 254
     13e:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	80 91 3d 01 	lds	r24, 0x013D
     146:	90 91 3e 01 	lds	r25, 0x013E
     14a:	e2 2f       	mov	r30, r18
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	e8 17       	cp	r30, r24
     150:	f9 07       	cpc	r31, r25
     152:	98 f3       	brcs	.-26     	; 0x13a <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     154:	08 95       	ret

00000156 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     156:	08 95       	ret

00000158 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     158:	08 95       	ret

0000015a <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     15e:	60 e6       	ldi	r22, 0x60	; 96
     160:	73 ee       	ldi	r23, 0xE3	; 227
     162:	86 e1       	ldi	r24, 0x16	; 22
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	30 40       	sbci	r19, 0x00	; 0
     16e:	40 40       	sbci	r20, 0x00	; 0
     170:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     172:	e0 ec       	ldi	r30, 0xC0	; 192
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	82 60       	ori	r24, 0x02	; 2
     17a:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     17c:	bb 27       	eor	r27, r27
     17e:	a5 2f       	mov	r26, r21
     180:	94 2f       	mov	r25, r20
     182:	83 2f       	mov	r24, r19
     184:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     188:	20 93 c4 00 	sts	0x00C4, r18
}
     18c:	08 95       	ret

0000018e <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     18e:	e1 ec       	ldi	r30, 0xC1	; 193
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	88 60       	ori	r24, 0x08	; 8
     196:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	80 93 c2 00 	sts	0x00C2, r24
}
     19e:	08 95       	ret

000001a0 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1a0:	e1 ec       	ldi	r30, 0xC1	; 193
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	80 61       	ori	r24, 0x10	; 16
     1a8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 c2 00 	sts	0x00C2, r24
}
     1b0:	08 95       	ret

000001b2 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1b2:	e1 ec       	ldi	r30, 0xC1	; 193
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 68       	ori	r24, 0x80	; 128
     1ba:	80 83       	st	Z, r24
  sei();
     1bc:	78 94       	sei
}
     1be:	08 95       	ret

000001c0 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1c0:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1c2:	80 91 c0 00 	lds	r24, 0x00C0
     1c6:	85 ff       	sbrs	r24, 5
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1ca:	90 93 c6 00 	sts	0x00C6, r25
}
     1ce:	08 95       	ret

000001d0 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	0f 92       	push	r0
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1da:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1dc:	80 91 c0 00 	lds	r24, 0x00C0
     1e0:	84 ff       	sbrs	r24, 4
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <UART_Receive_Byte+0x1e>
    val=UDR0;
     1e4:	80 91 c6 00 	lds	r24, 0x00C6
     1e8:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	08 c0       	rjmp	.+16     	; 0x1fe <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1ee:	80 91 c0 00 	lds	r24, 0x00C0
     1f2:	83 ff       	sbrs	r24, 3
     1f4:	07 c0       	rjmp	.+14     	; 0x204 <UART_Receive_Byte+0x34>
    val=UDR0;
     1f6:	80 91 c6 00 	lds	r24, 0x00C6
     1fa:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 12 01 	sts	0x0112, r24
     202:	05 c0       	rjmp	.+10     	; 0x20e <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     204:	80 91 c6 00 	lds	r24, 0x00C6
     208:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     20a:	10 92 12 01 	sts	0x0112, r1
  }
  return val;
     20e:	89 81       	ldd	r24, Y+1	; 0x01
}
     210:	0f 90       	pop	r0
     212:	cf 91       	pop	r28
     214:	df 91       	pop	r29
     216:	08 95       	ret

00000218 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     218:	80 91 1c 01 	lds	r24, 0x011C
}
     21c:	08 95       	ret

0000021e <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     21e:	10 92 1c 01 	sts	0x011C, r1
}
     222:	08 95       	ret

00000224 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	ab 01       	movw	r20, r22
     22c:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     22e:	4f 3f       	cpi	r20, 0xFF	; 255
     230:	51 05       	cpc	r21, r1
     232:	61 05       	cpc	r22, r1
     234:	71 05       	cpc	r23, r1
     236:	09 f0       	breq	.+2      	; 0x23a <UART_Transmit_Byte_Hex+0x16>
     238:	28 f4       	brcc	.+10     	; 0x244 <UART_Transmit_Byte_Hex+0x20>
     23a:	e8 e0       	ldi	r30, 0x08	; 8
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	c2 e0       	ldi	r28, 0x02	; 2
     240:	d0 e0       	ldi	r29, 0x00	; 0
     242:	11 c0       	rjmp	.+34     	; 0x266 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     244:	40 30       	cpi	r20, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	58 07       	cpc	r21, r24
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	68 07       	cpc	r22, r24
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	78 07       	cpc	r23, r24
     252:	28 f0       	brcs	.+10     	; 0x25e <UART_Transmit_Byte_Hex+0x3a>
     254:	e0 e2       	ldi	r30, 0x20	; 32
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	c8 e0       	ldi	r28, 0x08	; 8
     25a:	d0 e0       	ldi	r29, 0x00	; 0
     25c:	04 c0       	rjmp	.+8      	; 0x266 <UART_Transmit_Byte_Hex+0x42>
     25e:	e0 e1       	ldi	r30, 0x10	; 16
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	c4 e0       	ldi	r28, 0x04	; 4
     264:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     266:	80 91 c0 00 	lds	r24, 0x00C0
     26a:	85 ff       	sbrs	r24, 5
     26c:	fc cf       	rjmp	.-8      	; 0x266 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     26e:	80 e3       	ldi	r24, 0x30	; 48
     270:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     274:	80 91 c0 00 	lds	r24, 0x00C0
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     27c:	88 e7       	ldi	r24, 0x78	; 120
     27e:	80 93 c6 00 	sts	0x00C6, r24
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	1f c0       	rjmp	.+62     	; 0x2c4 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     286:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     288:	db 01       	movw	r26, r22
     28a:	ca 01       	movw	r24, r20
     28c:	0e 2e       	mov	r0, r30
     28e:	04 c0       	rjmp	.+8      	; 0x298 <UART_Transmit_Byte_Hex+0x74>
     290:	b6 95       	lsr	r27
     292:	a7 95       	ror	r26
     294:	97 95       	ror	r25
     296:	87 95       	ror	r24
     298:	0a 94       	dec	r0
     29a:	d2 f7       	brpl	.-12     	; 0x290 <UART_Transmit_Byte_Hex+0x6c>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2a2:	8a 30       	cpi	r24, 0x0A	; 10
     2a4:	91 05       	cpc	r25, r1
     2a6:	20 f0       	brcs	.+8      	; 0x2b0 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2a8:	9c 01       	movw	r18, r24
     2aa:	29 5c       	subi	r18, 0xC9	; 201
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2b0:	9c 01       	movw	r18, r24
     2b2:	20 5d       	subi	r18, 0xD0	; 208
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2b6:	80 91 c0 00 	lds	r24, 0x00C0
     2ba:	85 ff       	sbrs	r24, 5
     2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2be:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2c2:	1f 5f       	subi	r17, 0xFF	; 255
     2c4:	81 2f       	mov	r24, r17
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	8c 17       	cp	r24, r28
     2ca:	9d 07       	cpc	r25, r29
     2cc:	e0 f2       	brcs	.-72     	; 0x286 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	08 95       	ret

000002d6 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ab 01       	movw	r20, r22
     2e8:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2ea:	4f 3f       	cpi	r20, 0xFF	; 255
     2ec:	51 05       	cpc	r21, r1
     2ee:	61 05       	cpc	r22, r1
     2f0:	71 05       	cpc	r23, r1
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <UART_Transmit_Byte_Bin+0x20>
     2f4:	10 f4       	brcc	.+4      	; 0x2fa <UART_Transmit_Byte_Bin+0x24>
     2f6:	97 e0       	ldi	r25, 0x07	; 7
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     2fa:	40 30       	cpi	r20, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	58 07       	cpc	r21, r24
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	68 07       	cpc	r22, r24
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	78 07       	cpc	r23, r24
     308:	10 f0       	brcs	.+4      	; 0x30e <UART_Transmit_Byte_Bin+0x38>
     30a:	9f e1       	ldi	r25, 0x1F	; 31
     30c:	01 c0       	rjmp	.+2      	; 0x310 <UART_Transmit_Byte_Bin+0x3a>
     30e:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     310:	80 91 c0 00 	lds	r24, 0x00C0
     314:	85 ff       	sbrs	r24, 5
     316:	fc cf       	rjmp	.-8      	; 0x310 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     318:	80 e3       	ldi	r24, 0x30	; 48
     31a:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     31e:	80 91 c0 00 	lds	r24, 0x00C0
     322:	85 ff       	sbrs	r24, 5
     324:	fc cf       	rjmp	.-8      	; 0x31e <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     326:	82 e6       	ldi	r24, 0x62	; 98
     328:	80 93 c6 00 	sts	0x00C6, r24
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     330:	e9 2f       	mov	r30, r25
     332:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     334:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     336:	11 e3       	ldi	r17, 0x31	; 49
     338:	ef 01       	movw	r28, r30
     33a:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     33c:	cf 01       	movw	r24, r30
     33e:	82 1b       	sub	r24, r18
     340:	93 0b       	sbc	r25, r19
     342:	6a 01       	movw	r12, r20
     344:	7b 01       	movw	r14, r22
     346:	04 c0       	rjmp	.+8      	; 0x350 <UART_Transmit_Byte_Bin+0x7a>
     348:	f6 94       	lsr	r15
     34a:	e7 94       	ror	r14
     34c:	d7 94       	ror	r13
     34e:	c7 94       	ror	r12
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <UART_Transmit_Byte_Bin+0x72>
     354:	d7 01       	movw	r26, r14
     356:	c6 01       	movw	r24, r12
     358:	81 70       	andi	r24, 0x01	; 1
     35a:	90 70       	andi	r25, 0x00	; 0
     35c:	89 2b       	or	r24, r25
     35e:	39 f0       	breq	.+14     	; 0x36e <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     360:	80 91 c0 00 	lds	r24, 0x00C0
     364:	85 ff       	sbrs	r24, 5
     366:	fc cf       	rjmp	.-8      	; 0x360 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     368:	10 93 c6 00 	sts	0x00C6, r17
     36c:	06 c0       	rjmp	.+12     	; 0x37a <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     36e:	80 91 c0 00 	lds	r24, 0x00C0
     372:	85 ff       	sbrs	r24, 5
     374:	fc cf       	rjmp	.-8      	; 0x36e <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     376:	00 93 c6 00 	sts	0x00C6, r16
     37a:	2f 5f       	subi	r18, 0xFF	; 255
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     37e:	2c 17       	cp	r18, r28
     380:	3d 07       	cpc	r19, r29
     382:	e1 f6       	brne	.-72     	; 0x33c <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	08 95       	ret

00000396 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     396:	ac 01       	movw	r20, r24
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     39c:	80 91 c0 00 	lds	r24, 0x00C0
     3a0:	85 ff       	sbrs	r24, 5
     3a2:	fc cf       	rjmp	.-8      	; 0x39c <UART_Transmit_Text+0x6>
  UDR0=val;
     3a4:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3aa:	fa 01       	movw	r30, r20
     3ac:	e2 0f       	add	r30, r18
     3ae:	f1 1d       	adc	r31, r1
     3b0:	e0 81       	ld	r30, Z
     3b2:	ee 23       	and	r30, r30
     3b4:	99 f7       	brne	.-26     	; 0x39c <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3b6:	08 95       	ret

000003b8 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
}
     3c0:	08 95       	ret

000003c2 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
}
     3ca:	08 95       	ret

000003cc <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3de:	61 15       	cp	r22, r1
     3e0:	71 05       	cpc	r23, r1
     3e2:	81 05       	cpc	r24, r1
     3e4:	91 05       	cpc	r25, r1
     3e6:	31 f4       	brne	.+12     	; 0x3f4 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3e8:	10 92 13 01 	sts	0x0113, r1
    UART.InputNumberDigits=1;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 1b 01 	sts	0x011B, r24
     3f2:	23 c0       	rjmp	.+70     	; 0x43a <UART_Determine_Digit_Numbers+0x6e>
     3f4:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     3f6:	0b 2d       	mov	r16, r11
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	0e 5e       	subi	r16, 0xEE	; 238
     3fc:	1e 4f       	sbci	r17, 0xFE	; 254
     3fe:	c7 01       	movw	r24, r14
     400:	b6 01       	movw	r22, r12
     402:	2a e0       	ldi	r18, 0x0A	; 10
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
     40e:	f8 01       	movw	r30, r16
     410:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	2a e0       	ldi	r18, 0x0A	; 10
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
     422:	c9 01       	movw	r24, r18
     424:	da 01       	movw	r26, r20
     426:	6c 01       	movw	r12, r24
     428:	7d 01       	movw	r14, r26
      i++;
     42a:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     42c:	c1 14       	cp	r12, r1
     42e:	d1 04       	cpc	r13, r1
     430:	e1 04       	cpc	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	01 f7       	brne	.-64     	; 0x3f6 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     436:	b0 92 1b 01 	sts	0x011B, r11
  }
}
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	08 95       	ret

0000044a <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     44a:	e0 91 1b 01 	lds	r30, 0x011B
     44e:	0f c0       	rjmp	.+30     	; 0x46e <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     450:	2e 2f       	mov	r18, r30
     452:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     454:	e2 2f       	mov	r30, r18
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	ee 5e       	subi	r30, 0xEE	; 238
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     45e:	80 91 c0 00 	lds	r24, 0x00C0
     462:	85 ff       	sbrs	r24, 5
     464:	fc cf       	rjmp	.-8      	; 0x45e <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     466:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     468:	90 93 c6 00 	sts	0x00C6, r25
     46c:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     46e:	ee 23       	and	r30, r30
     470:	79 f7       	brne	.-34     	; 0x450 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     472:	08 95       	ret

00000474 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     474:	9b 01       	movw	r18, r22
     476:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     478:	97 ff       	sbrs	r25, 7
     47a:	0e c0       	rjmp	.+28     	; 0x498 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     47c:	80 91 c0 00 	lds	r24, 0x00C0
     480:	85 ff       	sbrs	r24, 5
     482:	fc cf       	rjmp	.-8      	; 0x47c <UART_Transmit_Number+0x8>
  UDR0=val;
     484:	8d e2       	ldi	r24, 0x2D	; 45
     486:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48a:	50 95       	com	r21
     48c:	40 95       	com	r20
     48e:	30 95       	com	r19
     490:	21 95       	neg	r18
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	4f 4f       	sbci	r20, 0xFF	; 255
     496:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     498:	ca 01       	movw	r24, r20
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4a0:	0e 94 25 02 	call	0x44a	; 0x44a <UART_Transmit_Number_Digits>
}
     4a4:	08 95       	ret

000004a6 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4a6:	fc 01       	movw	r30, r24
     4a8:	ee 5e       	subi	r30, 0xEE	; 238
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4ae:	08 95       	ret

000004b0 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4b0:	20 91 3f 01 	lds	r18, 0x013F
     4b4:	30 91 40 01 	lds	r19, 0x0140
}
     4b8:	c9 01       	movw	r24, r18
     4ba:	08 95       	ret

000004bc <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4bc:	10 92 12 01 	sts	0x0112, r1
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4c6:	f9 01       	movw	r30, r18
     4c8:	ee 5e       	subi	r30, 0xEE	; 238
     4ca:	fe 4f       	sbci	r31, 0xFE	; 254
     4cc:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4ce:	2f 5f       	subi	r18, 0xFF	; 255
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	80 91 3d 01 	lds	r24, 0x013D
     4d6:	90 91 3e 01 	lds	r25, 0x013E
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	98 f3       	brcs	.-26     	; 0x4c6 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4e0:	10 92 40 01 	sts	0x0140, r1
     4e4:	10 92 3f 01 	sts	0x013F, r1
  #endif
}
     4e8:	08 95       	ret

000004ea <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	0f 92       	push	r0
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     4f4:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     4f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <UART_Receive_Byte>
     4fa:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     4fc:	80 91 12 01 	lds	r24, 0x0112
     500:	88 23       	and	r24, r24
     502:	19 f5       	brne	.+70     	; 0x54a <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	80 93 1c 01 	sts	0x011C, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     50a:	e0 91 3f 01 	lds	r30, 0x013F
     50e:	f0 91 40 01 	lds	r31, 0x0140
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	ee 5e       	subi	r30, 0xEE	; 238
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     51a:	80 91 3f 01 	lds	r24, 0x013F
     51e:	90 91 40 01 	lds	r25, 0x0140
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	90 93 40 01 	sts	0x0140, r25
     528:	80 93 3f 01 	sts	0x013F, r24

    if(UART.BufferIndex>=UART.BufferSize){
     52c:	20 91 3f 01 	lds	r18, 0x013F
     530:	30 91 40 01 	lds	r19, 0x0140
     534:	80 91 3d 01 	lds	r24, 0x013D
     538:	90 91 3e 01 	lds	r25, 0x013E
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	20 f0       	brcs	.+8      	; 0x54a <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     542:	10 92 40 01 	sts	0x0140, r1
     546:	10 92 3f 01 	sts	0x013F, r1
    }
  }
}
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     574:	0e 94 75 02 	call	0x4ea	; 0x4ea <UART_Interrupt_Service_Routine>
}
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	7b 01       	movw	r14, r22
     5a4:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5a6:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5aa:	c8 01       	movw	r24, r16
     5ac:	b7 01       	movw	r22, r14
     5ae:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5b2:	e1 ec       	ldi	r30, 0xC1	; 193
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5bc:	a2 ec       	ldi	r26, 0xC2	; 194
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	96 e0       	ldi	r25, 0x06	; 6
     5c2:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5c4:	80 81       	ld	r24, Z
     5c6:	80 61       	ori	r24, 0x10	; 16
     5c8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ca:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5cc:	80 81       	ld	r24, Z
     5ce:	80 68       	ori	r24, 0x80	; 128
     5d0:	80 83       	st	Z, r24
  sei();
     5d2:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <UART_Flush_Buffer>
}
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5e2:	83 e4       	ldi	r24, 0x43	; 67
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	90 93 42 01 	sts	0x0142, r25
     5ea:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.TimerType.Value = 0;
     5ee:	10 92 43 01 	sts	0x0143, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5f2:	80 91 43 01 	lds	r24, 0x0143
     5f6:	84 60       	ori	r24, 0x04	; 4
     5f8:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5fc:	80 91 43 01 	lds	r24, 0x0143
     600:	87 70       	andi	r24, 0x07	; 7
     602:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.UpdateRate = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 45 01 	sts	0x0145, r25
     60e:	80 93 44 01 	sts	0x0144, r24
  Timebase->Time.OVFUpdateValue=0;
     612:	10 92 46 01 	sts	0x0146, r1
  Timebase->Time.SubSeconds = 0;
     616:	10 92 4b 01 	sts	0x014B, r1
     61a:	10 92 4c 01 	sts	0x014C, r1
     61e:	10 92 4d 01 	sts	0x014D, r1
     622:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.Seconds = 0;
     626:	10 92 4f 01 	sts	0x014F, r1
     62a:	10 92 50 01 	sts	0x0150, r1
     62e:	10 92 51 01 	sts	0x0151, r1
     632:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.LastSample = 0;
     636:	10 92 47 01 	sts	0x0147, r1
     63a:	10 92 48 01 	sts	0x0148, r1
     63e:	10 92 49 01 	sts	0x0149, r1
     642:	10 92 4a 01 	sts	0x014A, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds=0;
     646:	10 92 53 01 	sts	0x0153, r1
     64a:	10 92 54 01 	sts	0x0154, r1
     64e:	10 92 55 01 	sts	0x0155, r1
     652:	10 92 56 01 	sts	0x0156, r1
	Timebase->Time.StartTimeSubSeconds=0;
     656:	10 92 57 01 	sts	0x0157, r1
     65a:	10 92 58 01 	sts	0x0158, r1
     65e:	10 92 59 01 	sts	0x0159, r1
     662:	10 92 5a 01 	sts	0x015A, r1
	Timebase->Time.Status=0;
     666:	10 92 5b 01 	sts	0x015B, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     66a:	10 92 5c 01 	sts	0x015C, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     66e:	10 92 5d 01 	sts	0x015D, r1
    Timebase->UpCounter[i].EndValue = 0;
     672:	10 92 5e 01 	sts	0x015E, r1
     676:	10 92 5f 01 	sts	0x015F, r1
     67a:	10 92 60 01 	sts	0x0160, r1
     67e:	10 92 61 01 	sts	0x0161, r1
    Timebase->UpCounter[i].Target = 0;
     682:	10 92 62 01 	sts	0x0162, r1
     686:	10 92 63 01 	sts	0x0163, r1
     68a:	10 92 64 01 	sts	0x0164, r1
     68e:	10 92 65 01 	sts	0x0165, r1
    Timebase->UpCounter[i].Temporary = 0;    
     692:	10 92 66 01 	sts	0x0166, r1
     696:	10 92 67 01 	sts	0x0167, r1
     69a:	10 92 68 01 	sts	0x0168, r1
     69e:	10 92 69 01 	sts	0x0169, r1
    Timebase->UpCounter[i].Value = 0;
     6a2:	10 92 6a 01 	sts	0x016A, r1
     6a6:	10 92 6b 01 	sts	0x016B, r1
     6aa:	10 92 6c 01 	sts	0x016C, r1
     6ae:	10 92 6d 01 	sts	0x016D, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6b2:	10 92 6e 01 	sts	0x016E, r1
     6b6:	10 92 6f 01 	sts	0x016F, r1
     6ba:	10 92 70 01 	sts	0x0170, r1
     6be:	10 92 71 01 	sts	0x0171, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     6c2:	10 92 72 01 	sts	0x0172, r1
    Timebase->DownCounter[i].EndValue = 0;
     6c6:	10 92 73 01 	sts	0x0173, r1
     6ca:	10 92 74 01 	sts	0x0174, r1
     6ce:	10 92 75 01 	sts	0x0175, r1
     6d2:	10 92 76 01 	sts	0x0176, r1
    Timebase->DownCounter[i].Value = 0;
     6d6:	10 92 77 01 	sts	0x0177, r1
     6da:	10 92 78 01 	sts	0x0178, r1
     6de:	10 92 79 01 	sts	0x0179, r1
     6e2:	10 92 7a 01 	sts	0x017A, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     6e6:	10 92 7b 01 	sts	0x017B, r1
     6ea:	10 92 7c 01 	sts	0x017C, r1
     6ee:	10 92 7d 01 	sts	0x017D, r1
     6f2:	10 92 7e 01 	sts	0x017E, r1
  }
  #endif
}
     6f6:	08 95       	ret

000006f8 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     6f8:	7f 92       	push	r7
     6fa:	8f 92       	push	r8
     6fc:	9f 92       	push	r9
     6fe:	af 92       	push	r10
     700:	bf 92       	push	r11
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	2a 97       	sbiw	r28, 0x0a	; 10
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     724:	c0 90 41 01 	lds	r12, 0x0141
     728:	d0 90 42 01 	lds	r13, 0x0142
     72c:	f6 01       	movw	r30, r12
     72e:	80 81       	ld	r24, Z
     730:	80 ff       	sbrs	r24, 0
     732:	31 c0       	rjmp	.+98     	; 0x796 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val=0;
    if(UpdateRateHz==1){
     734:	01 30       	cpi	r16, 0x01	; 1
     736:	11 05       	cpc	r17, r1
     738:	11 f4       	brne	.+4      	; 0x73e <Timebase_Timer_Config+0x46>
     73a:	96 e0       	ldi	r25, 0x06	; 6
     73c:	19 c0       	rjmp	.+50     	; 0x770 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x06;
    }else if(UpdateRateHz==2){
     73e:	02 30       	cpi	r16, 0x02	; 2
     740:	11 05       	cpc	r17, r1
     742:	11 f4       	brne	.+4      	; 0x748 <Timebase_Timer_Config+0x50>
     744:	95 e0       	ldi	r25, 0x05	; 5
     746:	14 c0       	rjmp	.+40     	; 0x770 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x05;
    }else if(UpdateRateHz==4){
     748:	04 30       	cpi	r16, 0x04	; 4
     74a:	11 05       	cpc	r17, r1
     74c:	11 f4       	brne	.+4      	; 0x752 <Timebase_Timer_Config+0x5a>
     74e:	94 e0       	ldi	r25, 0x04	; 4
     750:	0f c0       	rjmp	.+30     	; 0x770 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x04;
    }else if(UpdateRateHz==8){
     752:	08 30       	cpi	r16, 0x08	; 8
     754:	11 05       	cpc	r17, r1
     756:	11 f4       	brne	.+4      	; 0x75c <Timebase_Timer_Config+0x64>
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0a c0       	rjmp	.+20     	; 0x770 <Timebase_Timer_Config+0x78>
      Prescaler_val=0x03;
    }else if(UpdateRateHz==16){
     75c:	00 31       	cpi	r16, 0x10	; 16
     75e:	11 05       	cpc	r17, r1
     760:	11 f4       	brne	.+4      	; 0x766 <Timebase_Timer_Config+0x6e>
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	05 c0       	rjmp	.+10     	; 0x770 <Timebase_Timer_Config+0x78>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	00 32       	cpi	r16, 0x20	; 32
     76a:	11 05       	cpc	r17, r1
     76c:	09 f4       	brne	.+2      	; 0x770 <Timebase_Timer_Config+0x78>
     76e:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz==64){
      Prescaler_val=0x00;
    }else{
      Prescaler_val=0x00;
    }
    cli();
     770:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     772:	84 b7       	in	r24, 0x34	; 52
     774:	87 7f       	andi	r24, 0xF7	; 247
     776:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     778:	80 91 60 00 	lds	r24, 0x0060
     77c:	80 68       	ori	r24, 0x80	; 128
     77e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     782:	80 91 60 00 	lds	r24, 0x0060
     786:	88 61       	ori	r24, 0x18	; 24
     788:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     78c:	90 64       	ori	r25, 0x40	; 64
     78e:	90 93 60 00 	sts	0x0060, r25
    sei();
     792:	78 94       	sei
     794:	67 c0       	rjmp	.+206    	; 0x864 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     796:	81 fd       	sbrc	r24, 1
     798:	65 c0       	rjmp	.+202    	; 0x864 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     79a:	82 ff       	sbrs	r24, 2
     79c:	63 c0       	rjmp	.+198    	; 0x864 <Timebase_Timer_Config+0x16c>
    
	uint32_t temp=F_CPU;
	uint16_t clock_div_factor[5]={1,8,64,256,1024};
     79e:	de 01       	movw	r26, r28
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	e5 e0       	ldi	r30, 0x05	; 5
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <Timebase_Timer_Config+0xb0>
	
	temp/=UpdateRateHz;
     7b0:	98 01       	movw	r18, r16
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	7b e1       	ldi	r23, 0x1B	; 27
     7ba:	87 eb       	ldi	r24, 0xB7	; 183
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
     7c2:	72 2e       	mov	r7, r18
     7c4:	83 2e       	mov	r8, r19
     7c6:	94 2e       	mov	r9, r20
     7c8:	e5 2e       	mov	r14, r21
     7ca:	5e 01       	movw	r10, r28
     7cc:	08 94       	sec
     7ce:	a1 1c       	adc	r10, r1
     7d0:	b1 1c       	adc	r11, r1
     7d2:	c9 01       	movw	r24, r18
     7d4:	da 01       	movw	r26, r20
     7d6:	9c 01       	movw	r18, r24
     7d8:	ad 01       	movw	r20, r26
     7da:	ff 24       	eor	r15, r15
     7dc:	14 c0       	rjmp	.+40     	; 0x806 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq=temp;
	  curr_freq/=clock_div_factor[clock_div_index];
     7de:	f5 01       	movw	r30, r10
     7e0:	21 91       	ld	r18, Z+
     7e2:	31 91       	ld	r19, Z+
     7e4:	5f 01       	movw	r10, r30
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	67 2d       	mov	r22, r7
     7ec:	78 2d       	mov	r23, r8
     7ee:	89 2d       	mov	r24, r9
     7f0:	9e 2d       	mov	r25, r14
     7f2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
     7f6:	c9 01       	movw	r24, r18
     7f8:	da 01       	movw	r26, r20
     7fa:	9c 01       	movw	r18, r24
     7fc:	ad 01       	movw	r20, r26
	  clock_div_index++;
     7fe:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     800:	f5 e0       	ldi	r31, 0x05	; 5
     802:	ff 16       	cp	r15, r31
     804:	31 f0       	breq	.+12     	; 0x812 <Timebase_Timer_Config+0x11a>
	temp/=UpdateRateHz;
	
	uint8_t  clock_div_index=0;
	uint32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
     806:	2f 3f       	cpi	r18, 0xFF	; 255
     808:	31 05       	cpc	r19, r1
     80a:	41 05       	cpc	r20, r1
     80c:	51 05       	cpc	r21, r1
     80e:	09 f0       	breq	.+2      	; 0x812 <Timebase_Timer_Config+0x11a>
     810:	30 f7       	brcc	.-52     	; 0x7de <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index-=1;
     812:	8f 2d       	mov	r24, r15
     814:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     816:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     818:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     81a:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     81e:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     820:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     822:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     824:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     826:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     828:	88 23       	and	r24, r24
     82a:	11 f4       	brne	.+4      	; 0x830 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0f c0       	rjmp	.+30     	; 0x84e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	11 f4       	brne	.+4      	; 0x838 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0b c0       	rjmp	.+22     	; 0x84e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	11 f4       	brne	.+4      	; 0x840 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	07 c0       	rjmp	.+14     	; 0x84e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	11 f4       	brne	.+4      	; 0x848 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	03 c0       	rjmp	.+6      	; 0x84e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	11 f4       	brne	.+4      	; 0x850 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     84c:	85 e0       	ldi	r24, 0x05	; 5
     84e:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = 0xFF-curr_freq;
     850:	82 2f       	mov	r24, r18
     852:	80 95       	com	r24
     854:	f6 01       	movw	r30, r12
     856:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     858:	83 81       	ldd	r24, Z+3	; 0x03
     85a:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 6e 00 	sts	0x006E, r24
    sei();
     862:	78 94       	sei
  }
  Timebase->Config.UpdateRate=UpdateRateHz;
     864:	f6 01       	movw	r30, r12
     866:	12 83       	std	Z+2, r17	; 0x02
     868:	01 83       	std	Z+1, r16	; 0x01
}
     86a:	2a 96       	adiw	r28, 0x0a	; 10
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	08 95       	ret

00000892 <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     892:	e0 91 41 01 	lds	r30, 0x0141
     896:	f0 91 42 01 	lds	r31, 0x0142
     89a:	81 8d       	ldd	r24, Z+25	; 0x19
}
     89c:	08 95       	ret

0000089e <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     89e:	e0 91 41 01 	lds	r30, 0x0141
     8a2:	f0 91 42 01 	lds	r31, 0x0142
     8a6:	81 8d       	ldd	r24, Z+25	; 0x19
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     8a8:	8f 33       	cpi	r24, 0x3F	; 63
     8aa:	18 f4       	brcc	.+6      	; 0x8b2 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens+=1;
     8ac:	81 8d       	ldd	r24, Z+25	; 0x19
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	81 8f       	std	Z+25, r24	; 0x19
     8b2:	08 95       	ret

000008b4 <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8b4:	e0 91 41 01 	lds	r30, 0x0141
     8b8:	f0 91 42 01 	lds	r31, 0x0142
     8bc:	81 8d       	ldd	r24, Z+25	; 0x19
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8be:	88 23       	and	r24, r24
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens-=1;
     8c2:	81 8d       	ldd	r24, Z+25	; 0x19
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	81 8f       	std	Z+25, r24	; 0x19
     8c8:	08 95       	ret

000008ca <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens=0;
     8ca:	e0 91 41 01 	lds	r30, 0x0141
     8ce:	f0 91 42 01 	lds	r31, 0x0142
     8d2:	11 8e       	std	Z+25, r1	; 0x19
}
     8d4:	08 95       	ret

000008d6 <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8d6:	e0 91 41 01 	lds	r30, 0x0141
     8da:	f0 91 42 01 	lds	r31, 0x0142
     8de:	20 85       	ldd	r18, Z+8	; 0x08
     8e0:	31 85       	ldd	r19, Z+9	; 0x09
     8e2:	42 85       	ldd	r20, Z+10	; 0x0a
     8e4:	53 85       	ldd	r21, Z+11	; 0x0b
}
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	08 95       	ret

000008ec <Timebase_Timer_Get_Seconds>:

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8ec:	e0 91 41 01 	lds	r30, 0x0141
     8f0:	f0 91 42 01 	lds	r31, 0x0142
     8f4:	24 85       	ldd	r18, Z+12	; 0x0c
     8f6:	35 85       	ldd	r19, Z+13	; 0x0d
     8f8:	46 85       	ldd	r20, Z+14	; 0x0e
     8fa:	57 85       	ldd	r21, Z+15	; 0x0f
}
     8fc:	b9 01       	movw	r22, r18
     8fe:	ca 01       	movw	r24, r20
     900:	08 95       	ret

00000902 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint32_t value){
  Timebase->Time.SubSeconds=value;
     902:	e0 91 41 01 	lds	r30, 0x0141
     906:	f0 91 42 01 	lds	r31, 0x0142
     90a:	60 87       	std	Z+8, r22	; 0x08
     90c:	71 87       	std	Z+9, r23	; 0x09
     90e:	82 87       	std	Z+10, r24	; 0x0a
     910:	93 87       	std	Z+11, r25	; 0x0b
}
     912:	08 95       	ret

00000914 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
     914:	e0 91 41 01 	lds	r30, 0x0141
     918:	f0 91 42 01 	lds	r31, 0x0142
     91c:	64 87       	std	Z+12, r22	; 0x0c
     91e:	75 87       	std	Z+13, r23	; 0x0d
     920:	86 87       	std	Z+14, r24	; 0x0e
     922:	97 87       	std	Z+15, r25	; 0x0f
}
     924:	08 95       	ret

00000926 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     926:	9c 01       	movw	r18, r24


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     928:	e0 91 41 01 	lds	r30, 0x0141
     92c:	f0 91 42 01 	lds	r31, 0x0142
     930:	81 8d       	ldd	r24, Z+25	; 0x19
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     932:	8f 33       	cpi	r24, 0x3F	; 63
     934:	18 f4       	brcc	.+6      	; 0x93c <Timebase_Timer_Delay_SubSeconds+0x16>
    Timebase->ActiveTokens+=1;
     936:	81 8d       	ldd	r24, Z+25	; 0x19
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	81 8f       	std	Z+25, r24	; 0x19
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     93c:	80 85       	ldd	r24, Z+8	; 0x08
     93e:	91 85       	ldd	r25, Z+9	; 0x09
     940:	a2 85       	ldd	r26, Z+10	; 0x0a
     942:	b3 85       	ldd	r27, Z+11	; 0x0b
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 0f       	add	r18, r24
     94a:	39 1f       	adc	r19, r25
     94c:	4a 1f       	adc	r20, r26
     94e:	5b 1f       	adc	r21, r27
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     950:	80 85       	ldd	r24, Z+8	; 0x08
     952:	91 85       	ldd	r25, Z+9	; 0x09
     954:	a2 85       	ldd	r26, Z+10	; 0x0a
     956:	b3 85       	ldd	r27, Z+11	; 0x0b
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  uint32_t temp = Timebase_Timer_Get_SubSeconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     958:	82 17       	cp	r24, r18
     95a:	93 07       	cpc	r25, r19
     95c:	a4 07       	cpc	r26, r20
     95e:	b5 07       	cpc	r27, r21
     960:	b8 f3       	brcs	.-18     	; 0x950 <Timebase_Timer_Delay_SubSeconds+0x2a>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     962:	81 8d       	ldd	r24, Z+25	; 0x19
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     964:	88 23       	and	r24, r24
     966:	19 f0       	breq	.+6      	; 0x96e <Timebase_Timer_Delay_SubSeconds+0x48>
    Timebase->ActiveTokens-=1;
     968:	81 8d       	ldd	r24, Z+25	; 0x19
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	81 8f       	std	Z+25, r24	; 0x19
     96e:	08 95       	ret

00000970 <Timebase_Timer_Await_SubSeconds>:
  #endif
}


////////////////////////////
void Timebase_Timer_Await_SubSeconds(uint16_t value){
     970:	bc 01       	movw	r22, r24
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     972:	e0 91 41 01 	lds	r30, 0x0141
     976:	f0 91 42 01 	lds	r31, 0x0142
     97a:	20 85       	ldd	r18, Z+8	; 0x08
     97c:	31 85       	ldd	r19, Z+9	; 0x09
     97e:	42 85       	ldd	r20, Z+10	; 0x0a
     980:	53 85       	ldd	r21, Z+11	; 0x0b
  UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
  UART_Transmit_Text(" ELS: ");
  UART_Transmit_Number(Timebase->Time.LastSample);
  UART_Transmit_New_Line();*/
  
  while(Timebase_Timer_Get_SubSeconds()!=Timebase->Time.LastSample);
     982:	84 81       	ldd	r24, Z+4	; 0x04
     984:	95 81       	ldd	r25, Z+5	; 0x05
     986:	a6 81       	ldd	r26, Z+6	; 0x06
     988:	b7 81       	ldd	r27, Z+7	; 0x07
     98a:	28 17       	cp	r18, r24
     98c:	39 07       	cpc	r19, r25
     98e:	4a 07       	cpc	r20, r26
     990:	5b 07       	cpc	r21, r27
     992:	99 f7       	brne	.-26     	; 0x97a <Timebase_Timer_Await_SubSeconds+0xa>
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     994:	20 85       	ldd	r18, Z+8	; 0x08
     996:	31 85       	ldd	r19, Z+9	; 0x09
     998:	42 85       	ldd	r20, Z+10	; 0x0a
     99a:	53 85       	ldd	r21, Z+11	; 0x0b
  UART_Transmit_Number(Timebase->Time.LastSample);
  UART_Transmit_New_Line();*/
  
  while(Timebase_Timer_Get_SubSeconds()!=Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds()+value;
     99c:	cb 01       	movw	r24, r22
     99e:	a0 e0       	ldi	r26, 0x00	; 0
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	a4 1f       	adc	r26, r20
     9a8:	b5 1f       	adc	r27, r21
     9aa:	84 83       	std	Z+4, r24	; 0x04
     9ac:	95 83       	std	Z+5, r25	; 0x05
     9ae:	a6 83       	std	Z+6, r26	; 0x06
     9b0:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     9b2:	24 81       	ldd	r18, Z+4	; 0x04
     9b4:	35 81       	ldd	r19, Z+5	; 0x05
     9b6:	46 81       	ldd	r20, Z+6	; 0x06
     9b8:	57 81       	ldd	r21, Z+7	; 0x07
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
     9bc:	92 81       	ldd	r25, Z+2	; 0x02
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	28 17       	cp	r18, r24
     9c4:	39 07       	cpc	r19, r25
     9c6:	4a 07       	cpc	r20, r26
     9c8:	5b 07       	cpc	r21, r27
     9ca:	80 f0       	brcs	.+32     	; 0x9ec <Timebase_Timer_Await_SubSeconds+0x7c>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     9cc:	24 81       	ldd	r18, Z+4	; 0x04
     9ce:	35 81       	ldd	r19, Z+5	; 0x05
     9d0:	46 81       	ldd	r20, Z+6	; 0x06
     9d2:	57 81       	ldd	r21, Z+7	; 0x07
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
     9d6:	92 81       	ldd	r25, Z+2	; 0x02
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	28 1b       	sub	r18, r24
     9de:	39 0b       	sbc	r19, r25
     9e0:	4a 0b       	sbc	r20, r26
     9e2:	5b 0b       	sbc	r21, r27
     9e4:	24 83       	std	Z+4, r18	; 0x04
     9e6:	35 83       	std	Z+5, r19	; 0x05
     9e8:	46 83       	std	Z+6, r20	; 0x06
     9ea:	57 83       	std	Z+7, r21	; 0x07
     9ec:	08 95       	ret

000009ee <Timebase_Timer_Delay_Seconds>:
  UART_Transmit_New_Line();*/
  
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9f6:	e0 91 41 01 	lds	r30, 0x0141
     9fa:	f0 91 42 01 	lds	r31, 0x0142
     9fe:	24 85       	ldd	r18, Z+12	; 0x0c
     a00:	35 85       	ldd	r19, Z+13	; 0x0d
     a02:	46 85       	ldd	r20, Z+14	; 0x0e
     a04:	57 85       	ldd	r21, Z+15	; 0x0f
  
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
     a06:	7c 01       	movw	r14, r24
     a08:	00 e0       	ldi	r16, 0x00	; 0
     a0a:	10 e0       	ldi	r17, 0x00	; 0
     a0c:	e2 0e       	add	r14, r18
     a0e:	f3 1e       	adc	r15, r19
     a10:	04 1f       	adc	r16, r20
     a12:	15 1f       	adc	r17, r21
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a14:	80 85       	ldd	r24, Z+8	; 0x08
     a16:	91 85       	ldd	r25, Z+9	; 0x09
     a18:	a2 85       	ldd	r26, Z+10	; 0x0a
     a1a:	b3 85       	ldd	r27, Z+11	; 0x0b
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  uint32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     a1c:	8e 15       	cp	r24, r14
     a1e:	9f 05       	cpc	r25, r15
     a20:	a0 07       	cpc	r26, r16
     a22:	b1 07       	cpc	r27, r17
     a24:	b8 f3       	brcs	.-18     	; 0xa14 <Timebase_Timer_Delay_Seconds+0x26>
}
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds=0;
     a30:	e0 91 41 01 	lds	r30, 0x0141
     a34:	f0 91 42 01 	lds	r31, 0x0142
     a38:	10 8a       	std	Z+16, r1	; 0x10
     a3a:	11 8a       	std	Z+17, r1	; 0x11
     a3c:	12 8a       	std	Z+18, r1	; 0x12
     a3e:	13 8a       	std	Z+19, r1	; 0x13
  Timebase->Time.StartTimeSubSeconds=0;
     a40:	14 8a       	std	Z+20, r1	; 0x14
     a42:	15 8a       	std	Z+21, r1	; 0x15
     a44:	16 8a       	std	Z+22, r1	; 0x16
     a46:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.Status=0;
     a48:	10 8e       	std	Z+24, r1	; 0x18
}
     a4a:	08 95       	ret

00000a4c <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status==0){
     a4c:	e0 91 41 01 	lds	r30, 0x0141
     a50:	f0 91 42 01 	lds	r31, 0x0142
     a54:	80 8d       	ldd	r24, Z+24	; 0x18
     a56:	88 23       	and	r24, r24
     a58:	91 f4       	brne	.+36     	; 0xa7e <Timebase_Window_Timer_Start+0x32>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a5a:	84 85       	ldd	r24, Z+12	; 0x0c
     a5c:	95 85       	ldd	r25, Z+13	; 0x0d
     a5e:	a6 85       	ldd	r26, Z+14	; 0x0e
     a60:	b7 85       	ldd	r27, Z+15	; 0x0f
  Timebase->Time.Status=0;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status==0){
    Timebase->Time.StartTimeSeconds=Timebase_Timer_Get_Seconds();
     a62:	80 8b       	std	Z+16, r24	; 0x10
     a64:	91 8b       	std	Z+17, r25	; 0x11
     a66:	a2 8b       	std	Z+18, r26	; 0x12
     a68:	b3 8b       	std	Z+19, r27	; 0x13
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a6a:	80 85       	ldd	r24, Z+8	; 0x08
     a6c:	91 85       	ldd	r25, Z+9	; 0x09
     a6e:	a2 85       	ldd	r26, Z+10	; 0x0a
     a70:	b3 85       	ldd	r27, Z+11	; 0x0b
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status==0){
    Timebase->Time.StartTimeSeconds=Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds=Timebase_Timer_Get_SubSeconds();
     a72:	84 8b       	std	Z+20, r24	; 0x14
     a74:	95 8b       	std	Z+21, r25	; 0x15
     a76:	a6 8b       	std	Z+22, r26	; 0x16
     a78:	b7 8b       	std	Z+23, r27	; 0x17
    Timebase->Time.Status=1;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 8f       	std	Z+24, r24	; 0x18
     a7e:	08 95       	ret

00000a80 <Timebase_Window_Timer_Get_Interval>:
  }
}

uint32_t Timebase_Window_Timer_Get_Interval(void){
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
  if(Timebase->Time.Status){
     a8c:	c0 91 41 01 	lds	r28, 0x0141
     a90:	d0 91 42 01 	lds	r29, 0x0142
     a94:	88 8d       	ldd	r24, Y+24	; 0x18
     a96:	88 23       	and	r24, r24
     a98:	21 f4       	brne	.+8      	; 0xaa2 <Timebase_Window_Timer_Get_Interval+0x22>
     a9a:	ee 24       	eor	r14, r14
     a9c:	ff 24       	eor	r15, r15
     a9e:	87 01       	movw	r16, r14
     aa0:	22 c0       	rjmp	.+68     	; 0xae6 <Timebase_Window_Timer_Get_Interval+0x66>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     aa2:	2c 85       	ldd	r18, Y+12	; 0x0c
     aa4:	3d 85       	ldd	r19, Y+13	; 0x0d
     aa6:	4e 85       	ldd	r20, Y+14	; 0x0e
     aa8:	5f 85       	ldd	r21, Y+15	; 0x0f
#endif


//Timer Functions
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     aaa:	e8 84       	ldd	r14, Y+8	; 0x08
     aac:	f9 84       	ldd	r15, Y+9	; 0x09
     aae:	0a 85       	ldd	r16, Y+10	; 0x0a
     ab0:	1b 85       	ldd	r17, Y+11	; 0x0b

uint32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status){
    uint32_t curr_s =Timebase_Timer_Get_Seconds();
    uint32_t curr_ss=Timebase_Timer_Get_SubSeconds();
	curr_s-=Timebase->Time.StartTimeSeconds;
     ab2:	88 89       	ldd	r24, Y+16	; 0x10
     ab4:	99 89       	ldd	r25, Y+17	; 0x11
     ab6:	aa 89       	ldd	r26, Y+18	; 0x12
     ab8:	bb 89       	ldd	r27, Y+19	; 0x13
     aba:	28 1b       	sub	r18, r24
     abc:	39 0b       	sbc	r19, r25
     abe:	4a 0b       	sbc	r20, r26
     ac0:	5b 0b       	sbc	r21, r27
	curr_ss-=Timebase->Time.StartTimeSubSeconds;
	curr_s*=Timebase->Config.UpdateRate;
     ac2:	69 81       	ldd	r22, Y+1	; 0x01
     ac4:	7a 81       	ldd	r23, Y+2	; 0x02
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
	curr_s+=curr_ss;
     ace:	2c 89       	ldd	r18, Y+20	; 0x14
     ad0:	3d 89       	ldd	r19, Y+21	; 0x15
     ad2:	4e 89       	ldd	r20, Y+22	; 0x16
     ad4:	5f 89       	ldd	r21, Y+23	; 0x17
     ad6:	e2 1a       	sub	r14, r18
     ad8:	f3 0a       	sbc	r15, r19
     ada:	04 0b       	sbc	r16, r20
     adc:	15 0b       	sbc	r17, r21
     ade:	e6 0e       	add	r14, r22
     ae0:	f7 1e       	adc	r15, r23
     ae2:	08 1f       	adc	r16, r24
     ae4:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     ae6:	b7 01       	movw	r22, r14
     ae8:	c8 01       	movw	r24, r16
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <Timebase_Window_Timer_Get_Interval_Reset>:

uint32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  uint32_t val=Timebase_Window_Timer_Get_Interval();
     af8:	0e 94 40 05 	call	0xa80	; 0xa80 <Timebase_Window_Timer_Get_Interval>
     afc:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status){
     afe:	e0 91 41 01 	lds	r30, 0x0141
     b02:	f0 91 42 01 	lds	r31, 0x0142
     b06:	80 8d       	ldd	r24, Z+24	; 0x18
     b08:	88 23       	and	r24, r24
     b0a:	49 f0       	breq	.+18     	; 0xb1e <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_SubSeconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds=0;
     b0c:	10 8a       	std	Z+16, r1	; 0x10
     b0e:	11 8a       	std	Z+17, r1	; 0x11
     b10:	12 8a       	std	Z+18, r1	; 0x12
     b12:	13 8a       	std	Z+19, r1	; 0x13
  Timebase->Time.StartTimeSubSeconds=0;
     b14:	14 8a       	std	Z+20, r1	; 0x14
     b16:	15 8a       	std	Z+21, r1	; 0x15
     b18:	16 8a       	std	Z+22, r1	; 0x16
     b1a:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.Status=0;
     b1c:	10 8e       	std	Z+24, r1	; 0x18
  uint32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     b1e:	82 2f       	mov	r24, r18
     b20:	08 95       	ret

00000b22 <Timebase_UpCounter_Get_Status>:



//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
     b22:	e0 91 41 01 	lds	r30, 0x0141
     b26:	f0 91 42 01 	lds	r31, 0x0142
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	25 e1       	ldi	r18, 0x15	; 21
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	ac 01       	movw	r20, r24
     b32:	42 9f       	mul	r20, r18
     b34:	c0 01       	movw	r24, r0
     b36:	43 9f       	mul	r20, r19
     b38:	90 0d       	add	r25, r0
     b3a:	52 9f       	mul	r21, r18
     b3c:	90 0d       	add	r25, r0
     b3e:	11 24       	eor	r1, r1
     b40:	e8 0f       	add	r30, r24
     b42:	f9 1f       	adc	r31, r25
     b44:	82 8d       	ldd	r24, Z+26	; 0x1a
     b46:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
     b48:	8f 70       	andi	r24, 0x0F	; 15
     b4a:	08 95       	ret

00000b4c <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     b4c:	e0 91 41 01 	lds	r30, 0x0141
     b50:	f0 91 42 01 	lds	r31, 0x0142
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	25 e1       	ldi	r18, 0x15	; 21
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	ac 01       	movw	r20, r24
     b5c:	42 9f       	mul	r20, r18
     b5e:	c0 01       	movw	r24, r0
     b60:	43 9f       	mul	r20, r19
     b62:	90 0d       	add	r25, r0
     b64:	52 9f       	mul	r21, r18
     b66:	90 0d       	add	r25, r0
     b68:	11 24       	eor	r1, r1
     b6a:	e8 0f       	add	r30, r24
     b6c:	f9 1f       	adc	r31, r25
     b6e:	6f 70       	andi	r22, 0x0F	; 15
     b70:	66 0f       	add	r22, r22
     b72:	82 8d       	ldd	r24, Z+26	; 0x1a
     b74:	81 7e       	andi	r24, 0xE1	; 225
     b76:	86 2b       	or	r24, r22
     b78:	82 8f       	std	Z+26, r24	; 0x1a
}
     b7a:	08 95       	ret

00000b7c <Timebase_UpCounter_Get_Value>:

uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
     b7c:	e0 91 41 01 	lds	r30, 0x0141
     b80:	f0 91 42 01 	lds	r31, 0x0142
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	25 e1       	ldi	r18, 0x15	; 21
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	ac 01       	movw	r20, r24
     b8c:	42 9f       	mul	r20, r18
     b8e:	c0 01       	movw	r24, r0
     b90:	43 9f       	mul	r20, r19
     b92:	90 0d       	add	r25, r0
     b94:	52 9f       	mul	r21, r18
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	e8 0f       	add	r30, r24
     b9c:	f9 1f       	adc	r31, r25
     b9e:	df 01       	movw	r26, r30
     ba0:	97 96       	adiw	r26, 0x27	; 39
     ba2:	67 a1       	ldd	r22, Z+39	; 0x27
     ba4:	11 96       	adiw	r26, 0x01	; 1
     ba6:	7c 91       	ld	r23, X
     ba8:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].Value;
}
     baa:	12 96       	adiw	r26, 0x02	; 2
     bac:	8c 91       	ld	r24, X
     bae:	12 97       	sbiw	r26, 0x02	; 2
     bb0:	13 96       	adiw	r26, 0x03	; 3
     bb2:	9c 91       	ld	r25, X
     bb4:	08 95       	ret

00000bb6 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
     bb6:	e0 91 41 01 	lds	r30, 0x0141
     bba:	f0 91 42 01 	lds	r31, 0x0142
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	25 e1       	ldi	r18, 0x15	; 21
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	dc 01       	movw	r26, r24
     bc6:	a2 9f       	mul	r26, r18
     bc8:	c0 01       	movw	r24, r0
     bca:	a3 9f       	mul	r26, r19
     bcc:	90 0d       	add	r25, r0
     bce:	b2 9f       	mul	r27, r18
     bd0:	90 0d       	add	r25, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	47 a3       	std	Z+39, r20	; 0x27
     bda:	50 a7       	std	Z+40, r21	; 0x28
     bdc:	61 a7       	std	Z+41, r22	; 0x29
     bde:	72 a7       	std	Z+42, r23	; 0x2a
}
     be0:	08 95       	ret

00000be2 <Timebase_UpCounter_Get_EndValue>:

uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
     be2:	e0 91 41 01 	lds	r30, 0x0141
     be6:	f0 91 42 01 	lds	r31, 0x0142
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	25 e1       	ldi	r18, 0x15	; 21
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	ac 01       	movw	r20, r24
     bf2:	42 9f       	mul	r20, r18
     bf4:	c0 01       	movw	r24, r0
     bf6:	43 9f       	mul	r20, r19
     bf8:	90 0d       	add	r25, r0
     bfa:	52 9f       	mul	r21, r18
     bfc:	90 0d       	add	r25, r0
     bfe:	11 24       	eor	r1, r1
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	df 01       	movw	r26, r30
     c06:	5b 96       	adiw	r26, 0x1b	; 27
     c08:	63 8d       	ldd	r22, Z+27	; 0x1b
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	7c 91       	ld	r23, X
     c0e:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	8c 91       	ld	r24, X
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	13 96       	adiw	r26, 0x03	; 3
     c18:	9c 91       	ld	r25, X
     c1a:	08 95       	ret

00000c1c <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
     c1c:	e0 91 41 01 	lds	r30, 0x0141
     c20:	f0 91 42 01 	lds	r31, 0x0142
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	25 e1       	ldi	r18, 0x15	; 21
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	dc 01       	movw	r26, r24
     c2c:	a2 9f       	mul	r26, r18
     c2e:	c0 01       	movw	r24, r0
     c30:	a3 9f       	mul	r26, r19
     c32:	90 0d       	add	r25, r0
     c34:	b2 9f       	mul	r27, r18
     c36:	90 0d       	add	r25, r0
     c38:	11 24       	eor	r1, r1
     c3a:	e8 0f       	add	r30, r24
     c3c:	f9 1f       	adc	r31, r25
     c3e:	43 8f       	std	Z+27, r20	; 0x1b
     c40:	54 8f       	std	Z+28, r21	; 0x1c
     c42:	65 8f       	std	Z+29, r22	; 0x1d
     c44:	76 8f       	std	Z+30, r23	; 0x1e
}
     c46:	08 95       	ret

00000c48 <Timebase_UpCounter_Get_TargetValue>:

uint32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
     c48:	e0 91 41 01 	lds	r30, 0x0141
     c4c:	f0 91 42 01 	lds	r31, 0x0142
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	25 e1       	ldi	r18, 0x15	; 21
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	ac 01       	movw	r20, r24
     c58:	42 9f       	mul	r20, r18
     c5a:	c0 01       	movw	r24, r0
     c5c:	43 9f       	mul	r20, r19
     c5e:	90 0d       	add	r25, r0
     c60:	52 9f       	mul	r21, r18
     c62:	90 0d       	add	r25, r0
     c64:	11 24       	eor	r1, r1
     c66:	e8 0f       	add	r30, r24
     c68:	f9 1f       	adc	r31, r25
     c6a:	df 01       	movw	r26, r30
     c6c:	5f 96       	adiw	r26, 0x1f	; 31
     c6e:	67 8d       	ldd	r22, Z+31	; 0x1f
     c70:	11 96       	adiw	r26, 0x01	; 1
     c72:	7c 91       	ld	r23, X
     c74:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].Target;
}
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	8c 91       	ld	r24, X
     c7a:	12 97       	sbiw	r26, 0x02	; 2
     c7c:	13 96       	adiw	r26, 0x03	; 3
     c7e:	9c 91       	ld	r25, X
     c80:	08 95       	ret

00000c82 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Target = value;
     c82:	e0 91 41 01 	lds	r30, 0x0141
     c86:	f0 91 42 01 	lds	r31, 0x0142
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	25 e1       	ldi	r18, 0x15	; 21
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	dc 01       	movw	r26, r24
     c92:	a2 9f       	mul	r26, r18
     c94:	c0 01       	movw	r24, r0
     c96:	a3 9f       	mul	r26, r19
     c98:	90 0d       	add	r25, r0
     c9a:	b2 9f       	mul	r27, r18
     c9c:	90 0d       	add	r25, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	e8 0f       	add	r30, r24
     ca2:	f9 1f       	adc	r31, r25
     ca4:	47 8f       	std	Z+31, r20	; 0x1f
     ca6:	50 a3       	std	Z+32, r21	; 0x20
     ca8:	61 a3       	std	Z+33, r22	; 0x21
     caa:	72 a3       	std	Z+34, r23	; 0x22
}
     cac:	08 95       	ret

00000cae <Timebase_UpCounter_Get_TemporaryValue>:

uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
     cae:	e0 91 41 01 	lds	r30, 0x0141
     cb2:	f0 91 42 01 	lds	r31, 0x0142
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	25 e1       	ldi	r18, 0x15	; 21
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	ac 01       	movw	r20, r24
     cbe:	42 9f       	mul	r20, r18
     cc0:	c0 01       	movw	r24, r0
     cc2:	43 9f       	mul	r20, r19
     cc4:	90 0d       	add	r25, r0
     cc6:	52 9f       	mul	r21, r18
     cc8:	90 0d       	add	r25, r0
     cca:	11 24       	eor	r1, r1
     ccc:	e8 0f       	add	r30, r24
     cce:	f9 1f       	adc	r31, r25
     cd0:	df 01       	movw	r26, r30
     cd2:	93 96       	adiw	r26, 0x23	; 35
     cd4:	63 a1       	ldd	r22, Z+35	; 0x23
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	7c 91       	ld	r23, X
     cda:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}
     cdc:	12 96       	adiw	r26, 0x02	; 2
     cde:	8c 91       	ld	r24, X
     ce0:	12 97       	sbiw	r26, 0x02	; 2
     ce2:	13 96       	adiw	r26, 0x03	; 3
     ce4:	9c 91       	ld	r25, X
     ce6:	08 95       	ret

00000ce8 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
     ce8:	e0 91 41 01 	lds	r30, 0x0141
     cec:	f0 91 42 01 	lds	r31, 0x0142
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	25 e1       	ldi	r18, 0x15	; 21
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	dc 01       	movw	r26, r24
     cf8:	a2 9f       	mul	r26, r18
     cfa:	c0 01       	movw	r24, r0
     cfc:	a3 9f       	mul	r26, r19
     cfe:	90 0d       	add	r25, r0
     d00:	b2 9f       	mul	r27, r18
     d02:	90 0d       	add	r25, r0
     d04:	11 24       	eor	r1, r1
     d06:	e8 0f       	add	r30, r24
     d08:	f9 1f       	adc	r31, r25
     d0a:	43 a3       	std	Z+35, r20	; 0x23
     d0c:	54 a3       	std	Z+36, r21	; 0x24
     d0e:	65 a3       	std	Z+37, r22	; 0x25
     d10:	76 a3       	std	Z+38, r23	; 0x26
}
     d12:	08 95       	ret

00000d14 <Timebase_UpCounter_Get_PeriodValue>:

uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
     d14:	e0 91 41 01 	lds	r30, 0x0141
     d18:	f0 91 42 01 	lds	r31, 0x0142
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	25 e1       	ldi	r18, 0x15	; 21
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	ac 01       	movw	r20, r24
     d24:	42 9f       	mul	r20, r18
     d26:	c0 01       	movw	r24, r0
     d28:	43 9f       	mul	r20, r19
     d2a:	90 0d       	add	r25, r0
     d2c:	52 9f       	mul	r21, r18
     d2e:	90 0d       	add	r25, r0
     d30:	11 24       	eor	r1, r1
     d32:	e8 0f       	add	r30, r24
     d34:	f9 1f       	adc	r31, r25
     d36:	df 01       	movw	r26, r30
     d38:	9b 96       	adiw	r26, 0x2b	; 43
     d3a:	63 a5       	ldd	r22, Z+43	; 0x2b
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	7c 91       	ld	r23, X
     d40:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
}
     d42:	12 96       	adiw	r26, 0x02	; 2
     d44:	8c 91       	ld	r24, X
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	13 96       	adiw	r26, 0x03	; 3
     d4a:	9c 91       	ld	r25, X
     d4c:	08 95       	ret

00000d4e <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     d4e:	e0 91 41 01 	lds	r30, 0x0141
     d52:	f0 91 42 01 	lds	r31, 0x0142
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	25 e1       	ldi	r18, 0x15	; 21
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	dc 01       	movw	r26, r24
     d5e:	a2 9f       	mul	r26, r18
     d60:	c0 01       	movw	r24, r0
     d62:	a3 9f       	mul	r26, r19
     d64:	90 0d       	add	r25, r0
     d66:	b2 9f       	mul	r27, r18
     d68:	90 0d       	add	r25, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	43 a7       	std	Z+43, r20	; 0x2b
     d72:	54 a7       	std	Z+44, r21	; 0x2c
     d74:	65 a7       	std	Z+45, r22	; 0x2d
     d76:	76 a7       	std	Z+46, r23	; 0x2e
}
     d78:	08 95       	ret

00000d7a <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
     d7a:	e0 91 41 01 	lds	r30, 0x0141
     d7e:	f0 91 42 01 	lds	r31, 0x0142
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	25 e1       	ldi	r18, 0x15	; 21
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	ac 01       	movw	r20, r24
     d8a:	42 9f       	mul	r20, r18
     d8c:	c0 01       	movw	r24, r0
     d8e:	43 9f       	mul	r20, r19
     d90:	90 0d       	add	r25, r0
     d92:	52 9f       	mul	r21, r18
     d94:	90 0d       	add	r25, r0
     d96:	11 24       	eor	r1, r1
     d98:	e8 0f       	add	r30, r24
     d9a:	f9 1f       	adc	r31, r25
     d9c:	82 8d       	ldd	r24, Z+26	; 0x1a
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
     d9e:	81 70       	andi	r24, 0x01	; 1
     da0:	08 95       	ret

00000da2 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
     da2:	e0 91 41 01 	lds	r30, 0x0141
     da6:	f0 91 42 01 	lds	r31, 0x0142
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	25 e1       	ldi	r18, 0x15	; 21
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	ac 01       	movw	r20, r24
     db2:	42 9f       	mul	r20, r18
     db4:	c0 01       	movw	r24, r0
     db6:	43 9f       	mul	r20, r19
     db8:	90 0d       	add	r25, r0
     dba:	52 9f       	mul	r21, r18
     dbc:	90 0d       	add	r25, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	e8 0f       	add	r30, r24
     dc2:	f9 1f       	adc	r31, r25
     dc4:	82 8d       	ldd	r24, Z+26	; 0x1a
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	82 8f       	std	Z+26, r24	; 0x1a
}
     dca:	08 95       	ret

00000dcc <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     dcc:	e0 91 41 01 	lds	r30, 0x0141
     dd0:	f0 91 42 01 	lds	r31, 0x0142
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	25 e1       	ldi	r18, 0x15	; 21
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	ac 01       	movw	r20, r24
     ddc:	42 9f       	mul	r20, r18
     dde:	c0 01       	movw	r24, r0
     de0:	43 9f       	mul	r20, r19
     de2:	90 0d       	add	r25, r0
     de4:	52 9f       	mul	r21, r18
     de6:	90 0d       	add	r25, r0
     de8:	11 24       	eor	r1, r1
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
     dee:	82 8d       	ldd	r24, Z+26	; 0x1a
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	82 8f       	std	Z+26, r24	; 0x1a
}
     df4:	08 95       	ret

00000df6 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     df6:	e0 91 41 01 	lds	r30, 0x0141
     dfa:	f0 91 42 01 	lds	r31, 0x0142
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	25 e1       	ldi	r18, 0x15	; 21
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	ac 01       	movw	r20, r24
     e06:	42 9f       	mul	r20, r18
     e08:	c0 01       	movw	r24, r0
     e0a:	43 9f       	mul	r20, r19
     e0c:	90 0d       	add	r25, r0
     e0e:	52 9f       	mul	r21, r18
     e10:	90 0d       	add	r25, r0
     e12:	11 24       	eor	r1, r1
     e14:	e8 0f       	add	r30, r24
     e16:	f9 1f       	adc	r31, r25
     e18:	82 8d       	ldd	r24, Z+26	; 0x1a
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
     e1a:	17 a2       	std	Z+39, r1	; 0x27
     e1c:	10 a6       	std	Z+40, r1	; 0x28
     e1e:	11 a6       	std	Z+41, r1	; 0x29
     e20:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
     e22:	13 8e       	std	Z+27, r1	; 0x1b
     e24:	14 8e       	std	Z+28, r1	; 0x1c
     e26:	15 8e       	std	Z+29, r1	; 0x1d
     e28:	16 8e       	std	Z+30, r1	; 0x1e
uint32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Target = value;
     e2a:	17 8e       	std	Z+31, r1	; 0x1f
     e2c:	10 a2       	std	Z+32, r1	; 0x20
     e2e:	11 a2       	std	Z+33, r1	; 0x21
     e30:	12 a2       	std	Z+34, r1	; 0x22
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
     e32:	13 a2       	std	Z+35, r1	; 0x23
     e34:	14 a2       	std	Z+36, r1	; 0x24
     e36:	15 a2       	std	Z+37, r1	; 0x25
     e38:	16 a2       	std	Z+38, r1	; 0x26
uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     e3a:	13 a6       	std	Z+43, r1	; 0x2b
     e3c:	14 a6       	std	Z+44, r1	; 0x2c
     e3e:	15 a6       	std	Z+45, r1	; 0x2d
     e40:	16 a6       	std	Z+46, r1	; 0x2e
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     e42:	80 7e       	andi	r24, 0xE0	; 224
     e44:	82 8f       	std	Z+26, r24	; 0x1a
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
     e46:	08 95       	ret

00000e48 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
     e48:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Timebase_UpCounter_Reset>
}
     e4c:	08 95       	ret

00000e4e <Timebase_UpCounter_Start>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e4e:	e0 91 41 01 	lds	r30, 0x0141
     e52:	f0 91 42 01 	lds	r31, 0x0142
     e56:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 1){
     e58:	25 e1       	ldi	r18, 0x15	; 21
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	ac 01       	movw	r20, r24
     e5e:	42 9f       	mul	r20, r18
     e60:	c0 01       	movw	r24, r0
     e62:	43 9f       	mul	r20, r19
     e64:	90 0d       	add	r25, r0
     e66:	52 9f       	mul	r21, r18
     e68:	90 0d       	add	r25, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	e8 0f       	add	r30, r24
     e6e:	f9 1f       	adc	r31, r25
     e70:	92 8d       	ldd	r25, Z+26	; 0x1a
     e72:	89 2f       	mov	r24, r25
     e74:	86 95       	lsr	r24
     e76:	8f 70       	andi	r24, 0x0F	; 15
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	19 f0       	breq	.+6      	; 0xe82 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     e7c:	91 7e       	andi	r25, 0xE1	; 225
     e7e:	92 60       	ori	r25, 0x02	; 2
     e80:	92 8f       	std	Z+26, r25	; 0x1a
     e82:	08 95       	ret

00000e84 <Timebase_UpCounter_Stop>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e84:	e0 91 41 01 	lds	r30, 0x0141
     e88:	f0 91 42 01 	lds	r31, 0x0142
     e8c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , 1);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 2){
     e8e:	25 e1       	ldi	r18, 0x15	; 21
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	ac 01       	movw	r20, r24
     e94:	42 9f       	mul	r20, r18
     e96:	c0 01       	movw	r24, r0
     e98:	43 9f       	mul	r20, r19
     e9a:	90 0d       	add	r25, r0
     e9c:	52 9f       	mul	r21, r18
     e9e:	90 0d       	add	r25, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	e8 0f       	add	r30, r24
     ea4:	f9 1f       	adc	r31, r25
     ea6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ea8:	89 2f       	mov	r24, r25
     eaa:	86 95       	lsr	r24
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     eb2:	91 7e       	andi	r25, 0xE1	; 225
     eb4:	94 60       	ori	r25, 0x04	; 4
     eb6:	92 8f       	std	Z+26, r25	; 0x1a
     eb8:	08 95       	ret

00000eba <Timebase_UpCounter_Set_Securely>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     eba:	a0 91 41 01 	lds	r26, 0x0141
     ebe:	b0 91 42 01 	lds	r27, 0x0142
     ec2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, uint32_t value){
  if( Timebase_UpCounter_Get_Status( window ) == 0 ){
     ec4:	25 e1       	ldi	r18, 0x15	; 21
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	82 9f       	mul	r24, r18
     eca:	f0 01       	movw	r30, r0
     ecc:	83 9f       	mul	r24, r19
     ece:	f0 0d       	add	r31, r0
     ed0:	92 9f       	mul	r25, r18
     ed2:	f0 0d       	add	r31, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	ea 0f       	add	r30, r26
     ed8:	fb 1f       	adc	r31, r27
     eda:	82 8d       	ldd	r24, Z+26	; 0x1a
     edc:	86 95       	lsr	r24
     ede:	8f 70       	andi	r24, 0x0F	; 15
     ee0:	19 f5       	brne	.+70     	; 0xf28 <Timebase_UpCounter_Set_Securely+0x6e>
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
     ee2:	17 a2       	std	Z+39, r1	; 0x27
     ee4:	10 a6       	std	Z+40, r1	; 0x28
     ee6:	11 a6       	std	Z+41, r1	; 0x29
     ee8:	12 a6       	std	Z+42, r1	; 0x2a
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
     eea:	13 a2       	std	Z+35, r1	; 0x23
     eec:	14 a2       	std	Z+36, r1	; 0x24
     eee:	15 a2       	std	Z+37, r1	; 0x25
     ef0:	16 a2       	std	Z+38, r1	; 0x26
uint32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Target = value;
     ef2:	47 8f       	std	Z+31, r20	; 0x1f
     ef4:	50 a3       	std	Z+32, r21	; 0x20
     ef6:	61 a3       	std	Z+33, r22	; 0x21
     ef8:	72 a3       	std	Z+34, r23	; 0x22
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     efa:	1c 96       	adiw	r26, 0x0c	; 12
     efc:	8d 91       	ld	r24, X+
     efe:	9d 91       	ld	r25, X+
     f00:	0d 90       	ld	r0, X+
     f02:	bc 91       	ld	r27, X
     f04:	a0 2d       	mov	r26, r0
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
     f06:	84 0f       	add	r24, r20
     f08:	95 1f       	adc	r25, r21
     f0a:	a6 1f       	adc	r26, r22
     f0c:	b7 1f       	adc	r27, r23
     f0e:	83 8f       	std	Z+27, r24	; 0x1b
     f10:	94 8f       	std	Z+28, r25	; 0x1c
     f12:	a5 8f       	std	Z+29, r26	; 0x1d
     f14:	b6 8f       	std	Z+30, r27	; 0x1e
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 1){
     f16:	92 8d       	ldd	r25, Z+26	; 0x1a
     f18:	89 2f       	mov	r24, r25
     f1a:	86 95       	lsr	r24
     f1c:	8f 70       	andi	r24, 0x0F	; 15
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	19 f0       	breq	.+6      	; 0xf28 <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     f22:	91 7e       	andi	r25, 0xE1	; 225
     f24:	92 60       	ori	r25, 0x02	; 2
     f26:	92 8f       	std	Z+26, r25	; 0x1a
     f28:	08 95       	ret

00000f2a <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, uint32_t value){
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	d8 2e       	mov	r13, r24
     f36:	7a 01       	movw	r14, r20
     f38:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
     f3a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
     f3e:	8d 2d       	mov	r24, r13
     f40:	b8 01       	movw	r22, r16
     f42:	a7 01       	movw	r20, r14
     f44:	0e 94 5d 07 	call	0xeba	; 0xeba <Timebase_UpCounter_Set_Securely>
} 
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	08 95       	ret

00000f54 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     f5c:	a0 91 41 01 	lds	r26, 0x0141
     f60:	b0 91 42 01 	lds	r27, 0x0142
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	25 e1       	ldi	r18, 0x15	; 21
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	82 9f       	mul	r24, r18
     f6c:	f0 01       	movw	r30, r0
     f6e:	83 9f       	mul	r24, r19
     f70:	f0 0d       	add	r31, r0
     f72:	92 9f       	mul	r25, r18
     f74:	f0 0d       	add	r31, r0
     f76:	11 24       	eor	r1, r1
     f78:	ea 0f       	add	r30, r26
     f7a:	fb 1f       	adc	r31, r27
     f7c:	82 8d       	ldd	r24, Z+26	; 0x1a
     f7e:	86 95       	lsr	r24
     f80:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Reset( window );
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	b1 f5       	brne	.+108    	; 0xff2 <Timebase_UpCounter_Update+0x9e>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f86:	1c 96       	adiw	r26, 0x0c	; 12
     f88:	8d 91       	ld	r24, X+
     f8a:	9d 91       	ld	r25, X+
     f8c:	0d 90       	ld	r0, X+
     f8e:	bc 91       	ld	r27, X
     f90:	a0 2d       	mov	r26, r0
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
     f92:	23 8d       	ldd	r18, Z+27	; 0x1b
     f94:	34 8d       	ldd	r19, Z+28	; 0x1c
     f96:	45 8d       	ldd	r20, Z+29	; 0x1d
     f98:	56 8d       	ldd	r21, Z+30	; 0x1e
     f9a:	28 1b       	sub	r18, r24
     f9c:	39 0b       	sbc	r19, r25
     f9e:	4a 0b       	sbc	r20, r26
     fa0:	5b 0b       	sbc	r21, r27
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
     fa2:	23 a3       	std	Z+35, r18	; 0x23
     fa4:	34 a3       	std	Z+36, r19	; 0x24
     fa6:	45 a3       	std	Z+37, r20	; 0x25
     fa8:	56 a3       	std	Z+38, r21	; 0x26
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
     faa:	e7 8c       	ldd	r14, Z+31	; 0x1f
     fac:	f0 a0       	ldd	r15, Z+32	; 0x20
     fae:	01 a1       	ldd	r16, Z+33	; 0x21
     fb0:	12 a1       	ldd	r17, Z+34	; 0x22
     fb2:	d8 01       	movw	r26, r16
     fb4:	c7 01       	movw	r24, r14
     fb6:	82 1b       	sub	r24, r18
     fb8:	93 0b       	sbc	r25, r19
     fba:	a4 0b       	sbc	r26, r20
     fbc:	b5 0b       	sbc	r27, r21
     fbe:	87 a3       	std	Z+39, r24	; 0x27
     fc0:	90 a7       	std	Z+40, r25	; 0x28
     fc2:	a1 a7       	std	Z+41, r26	; 0x29
     fc4:	b2 a7       	std	Z+42, r27	; 0x2a

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	41 05       	cpc	r20, r1
     fcc:	51 05       	cpc	r21, r1
     fce:	89 f5       	brne	.+98     	; 0x1032 <Timebase_UpCounter_Update+0xde>
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
     fd0:	13 8e       	std	Z+27, r1	; 0x1b
     fd2:	14 8e       	std	Z+28, r1	; 0x1c
     fd4:	15 8e       	std	Z+29, r1	; 0x1d
     fd6:	16 8e       	std	Z+30, r1	; 0x1e
uint32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
     fd8:	13 a2       	std	Z+35, r1	; 0x23
     fda:	14 a2       	std	Z+36, r1	; 0x24
     fdc:	15 a2       	std	Z+37, r1	; 0x25
     fde:	16 a2       	std	Z+38, r1	; 0x26
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
     fe0:	e7 a2       	std	Z+39, r14	; 0x27
     fe2:	f0 a6       	std	Z+40, r15	; 0x28
     fe4:	01 a7       	std	Z+41, r16	; 0x29
     fe6:	12 a7       	std	Z+42, r17	; 0x2a
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     fe8:	82 8d       	ldd	r24, Z+26	; 0x1a
     fea:	81 7e       	andi	r24, 0xE1	; 225
     fec:	88 60       	ori	r24, 0x08	; 8
     fee:	82 8f       	std	Z+26, r24	; 0x1a
     ff0:	20 c0       	rjmp	.+64     	; 0x1032 <Timebase_UpCounter_Update+0xde>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, 4);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == 2){
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	f1 f4       	brne	.+60     	; 0x1032 <Timebase_UpCounter_Update+0xde>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ff6:	1c 96       	adiw	r26, 0x0c	; 12
     ff8:	8d 91       	ld	r24, X+
     ffa:	9d 91       	ld	r25, X+
     ffc:	0d 90       	ld	r0, X+
     ffe:	bc 91       	ld	r27, X
    1000:	a0 2d       	mov	r26, r0
uint32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1002:	23 a1       	ldd	r18, Z+35	; 0x23
    1004:	34 a1       	ldd	r19, Z+36	; 0x24
    1006:	45 a1       	ldd	r20, Z+37	; 0x25
    1008:	56 a1       	ldd	r21, Z+38	; 0x26
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	a4 1f       	adc	r26, r20
    1010:	b5 1f       	adc	r27, r21
    1012:	83 8f       	std	Z+27, r24	; 0x1b
    1014:	94 8f       	std	Z+28, r25	; 0x1c
    1016:	a5 8f       	std	Z+29, r26	; 0x1d
    1018:	b6 8f       	std	Z+30, r27	; 0x1e
uint32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Value = value;
    101a:	87 8d       	ldd	r24, Z+31	; 0x1f
    101c:	90 a1       	ldd	r25, Z+32	; 0x20
    101e:	a1 a1       	ldd	r26, Z+33	; 0x21
    1020:	b2 a1       	ldd	r27, Z+34	; 0x22
    1022:	82 1b       	sub	r24, r18
    1024:	93 0b       	sbc	r25, r19
    1026:	a4 0b       	sbc	r26, r20
    1028:	b5 0b       	sbc	r27, r21
    102a:	87 a3       	std	Z+39, r24	; 0x27
    102c:	90 a7       	std	Z+40, r25	; 0x28
    102e:	a1 a7       	std	Z+41, r26	; 0x29
    1030:	b2 a7       	std	Z+42, r27	; 0x2a
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == 2){
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + Timebase_Timer_Get_Seconds());
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	08 95       	ret

0000103c <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	e0 91 41 01 	lds	r30, 0x0141
    1042:	f0 91 42 01 	lds	r31, 0x0142
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	25 e1       	ldi	r18, 0x15	; 21
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	62 9f       	mul	r22, r18
    1050:	c0 01       	movw	r24, r0
    1052:	63 9f       	mul	r22, r19
    1054:	90 0d       	add	r25, r0
    1056:	72 9f       	mul	r23, r18
    1058:	90 0d       	add	r25, r0
    105a:	11 24       	eor	r1, r1
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	82 8d       	ldd	r24, Z+26	; 0x1a
    1062:	86 95       	lsr	r24
    1064:	8f 70       	andi	r24, 0x0F	; 15
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	09 f4       	brne	.+2      	; 0x106c <Timebase_UpCounter_Expired+0x30>
    106a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == 4){
    return 1;
  }else{
    return 0;
  }
}
    106c:	84 2f       	mov	r24, r20
    106e:	08 95       	ret

00001070 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1070:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == 4){
    1072:	e0 91 41 01 	lds	r30, 0x0141
    1076:	f0 91 42 01 	lds	r31, 0x0142
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	85 e1       	ldi	r24, 0x15	; 21
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	bc 01       	movw	r22, r24
    1084:	26 9f       	mul	r18, r22
    1086:	c0 01       	movw	r24, r0
    1088:	27 9f       	mul	r18, r23
    108a:	90 0d       	add	r25, r0
    108c:	36 9f       	mul	r19, r22
    108e:	90 0d       	add	r25, r0
    1090:	11 24       	eor	r1, r1
    1092:	e8 0f       	add	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	82 8d       	ldd	r24, Z+26	; 0x1a
    1098:	86 95       	lsr	r24
    109a:	8f 70       	andi	r24, 0x0F	; 15
    109c:	84 30       	cpi	r24, 0x04	; 4
    109e:	11 f0       	breq	.+4      	; 0x10a4 <Timebase_UpCounter_Expired_Event+0x34>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    10a4:	84 2f       	mov	r24, r20
    10a6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Timebase_UpCounter_Reset>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    10ac:	08 95       	ret

000010ae <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    10ae:	e0 91 41 01 	lds	r30, 0x0141
    10b2:	f0 91 42 01 	lds	r31, 0x0142
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, uint32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    10b8:	25 e1       	ldi	r18, 0x15	; 21
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	dc 01       	movw	r26, r24
    10be:	a2 9f       	mul	r26, r18
    10c0:	c0 01       	movw	r24, r0
    10c2:	a3 9f       	mul	r26, r19
    10c4:	90 0d       	add	r25, r0
    10c6:	b2 9f       	mul	r27, r18
    10c8:	90 0d       	add	r25, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	e8 0f       	add	r30, r24
    10ce:	f9 1f       	adc	r31, r25
    10d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    10d2:	80 fd       	sbrc	r24, 0
    10d4:	0f c0       	rjmp	.+30     	; 0x10f4 <Timebase_UpCounter_Set_Period_Value_Securely+0x46>
uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    10d6:	87 a1       	ldd	r24, Z+39	; 0x27
    10d8:	90 a5       	ldd	r25, Z+40	; 0x28
    10da:	a1 a5       	ldd	r26, Z+41	; 0x29
    10dc:	b2 a5       	ldd	r27, Z+42	; 0x2a
    10de:	84 0f       	add	r24, r20
    10e0:	95 1f       	adc	r25, r21
    10e2:	a6 1f       	adc	r26, r22
    10e4:	b7 1f       	adc	r27, r23
    10e6:	83 a7       	std	Z+43, r24	; 0x2b
    10e8:	94 a7       	std	Z+44, r25	; 0x2c
    10ea:	a5 a7       	std	Z+45, r26	; 0x2d
    10ec:	b6 a7       	std	Z+46, r27	; 0x2e
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    10ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    10f0:	81 60       	ori	r24, 0x01	; 1
    10f2:	82 8f       	std	Z+26, r24	; 0x1a
    10f4:	08 95       	ret

000010f6 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
    10f6:	e0 91 41 01 	lds	r30, 0x0141
    10fa:	f0 91 42 01 	lds	r31, 0x0142
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

uint32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1100:	25 e1       	ldi	r18, 0x15	; 21
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	ac 01       	movw	r20, r24
    1106:	42 9f       	mul	r20, r18
    1108:	c0 01       	movw	r24, r0
    110a:	43 9f       	mul	r20, r19
    110c:	90 0d       	add	r25, r0
    110e:	52 9f       	mul	r21, r18
    1110:	90 0d       	add	r25, r0
    1112:	11 24       	eor	r1, r1
    1114:	e8 0f       	add	r30, r24
    1116:	f9 1f       	adc	r31, r25
    1118:	23 a5       	ldd	r18, Z+43	; 0x2b
    111a:	34 a5       	ldd	r19, Z+44	; 0x2c
    111c:	45 a5       	ldd	r20, Z+45	; 0x2d
    111e:	56 a5       	ldd	r21, Z+46	; 0x2e
    1120:	87 a1       	ldd	r24, Z+39	; 0x27
    1122:	90 a5       	ldd	r25, Z+40	; 0x28
    1124:	a1 a5       	ldd	r26, Z+41	; 0x29
    1126:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1128:	28 1b       	sub	r18, r24
    112a:	39 0b       	sbc	r19, r25
    112c:	4a 0b       	sbc	r20, r26
    112e:	5b 0b       	sbc	r21, r27
    1130:	57 ff       	sbrs	r21, 7
    1132:	04 c0       	rjmp	.+8      	; 0x113c <Timebase_UpCounter_Get_Remaining_Period_Value+0x46>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    113c:	b9 01       	movw	r22, r18
    113e:	ca 01       	movw	r24, r20
    1140:	08 95       	ret

00001142 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, uint32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

uint32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (uint32_t)Timebase->UpCounter[window].PeriodValue;
    1146:	c0 91 41 01 	lds	r28, 0x0141
    114a:	d0 91 42 01 	lds	r29, 0x0142
    114e:	68 2f       	mov	r22, r24
    1150:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

uint32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1152:	85 e1       	ldi	r24, 0x15	; 21
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	68 9f       	mul	r22, r24
    1158:	f0 01       	movw	r30, r0
    115a:	69 9f       	mul	r22, r25
    115c:	f0 0d       	add	r31, r0
    115e:	78 9f       	mul	r23, r24
    1160:	f0 0d       	add	r31, r0
    1162:	11 24       	eor	r1, r1
    1164:	ec 0f       	add	r30, r28
    1166:	fd 1f       	adc	r31, r29
    1168:	23 a5       	ldd	r18, Z+43	; 0x2b
    116a:	34 a5       	ldd	r19, Z+44	; 0x2c
    116c:	45 a5       	ldd	r20, Z+45	; 0x2d
    116e:	56 a5       	ldd	r21, Z+46	; 0x2e
    1170:	87 a1       	ldd	r24, Z+39	; 0x27
    1172:	90 a5       	ldd	r25, Z+40	; 0x28
    1174:	a1 a5       	ldd	r26, Z+41	; 0x29
    1176:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1178:	28 1b       	sub	r18, r24
    117a:	39 0b       	sbc	r19, r25
    117c:	4a 0b       	sbc	r20, r26
    117e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1180:	57 fd       	sbrc	r21, 7
    1182:	07 c0       	rjmp	.+14     	; 0x1192 <Timebase_UpCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_UpCounter_Get_Period_Flag( window )){
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	41 05       	cpc	r20, r1
    118a:	51 05       	cpc	r21, r1
    118c:	11 f0       	breq	.+4      	; 0x1192 <Timebase_UpCounter_Period_Value_Expired+0x50>
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	12 c0       	rjmp	.+36     	; 0x11b6 <Timebase_UpCounter_Period_Value_Expired+0x74>
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	85 e1       	ldi	r24, 0x15	; 21
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	ac 01       	movw	r20, r24
    119a:	64 9f       	mul	r22, r20
    119c:	c0 01       	movw	r24, r0
    119e:	65 9f       	mul	r22, r21
    11a0:	90 0d       	add	r25, r0
    11a2:	74 9f       	mul	r23, r20
    11a4:	90 0d       	add	r25, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	c8 0f       	add	r28, r24
    11aa:	d9 1f       	adc	r29, r25
    11ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11ae:	80 ff       	sbrs	r24, 0
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    11b6:	82 2f       	mov	r24, r18
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    11be:	1f 93       	push	r17
    11c0:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == 1){
    11c2:	0e 94 a1 08 	call	0x1142	; 0x1142 <Timebase_UpCounter_Period_Value_Expired>
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	11 f0       	breq	.+4      	; 0x11ce <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	16 c0       	rjmp	.+44     	; 0x11fa <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    11ce:	e0 91 41 01 	lds	r30, 0x0141
    11d2:	f0 91 42 01 	lds	r31, 0x0142
    11d6:	21 2f       	mov	r18, r17
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	85 e1       	ldi	r24, 0x15	; 21
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	ac 01       	movw	r20, r24
    11e0:	24 9f       	mul	r18, r20
    11e2:	c0 01       	movw	r24, r0
    11e4:	25 9f       	mul	r18, r21
    11e6:	90 0d       	add	r25, r0
    11e8:	34 9f       	mul	r19, r20
    11ea:	90 0d       	add	r25, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	e8 0f       	add	r30, r24
    11f0:	f9 1f       	adc	r31, r25
    11f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    11f4:	8e 7f       	andi	r24, 0xFE	; 254
    11f6:	82 8f       	std	Z+26, r24	; 0x1a
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    11fa:	1f 91       	pop	r17
    11fc:	08 95       	ret

000011fe <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	0e 94 aa 07 	call	0xf54	; 0xf54 <Timebase_UpCounter_Update>
  }
}
    1204:	08 95       	ret

00001206 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Timebase_UpCounter_Reset>
  }
}
    120c:	08 95       	ret

0000120e <Timebase_DownCounter_Get_Status>:
#endif



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    120e:	e0 91 41 01 	lds	r30, 0x0141
    1212:	f0 91 42 01 	lds	r31, 0x0142
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	2d e0       	ldi	r18, 0x0D	; 13
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	ac 01       	movw	r20, r24
    121e:	42 9f       	mul	r20, r18
    1220:	c0 01       	movw	r24, r0
    1222:	43 9f       	mul	r20, r19
    1224:	90 0d       	add	r25, r0
    1226:	52 9f       	mul	r21, r18
    1228:	90 0d       	add	r25, r0
    122a:	11 24       	eor	r1, r1
    122c:	e8 0f       	add	r30, r24
    122e:	f9 1f       	adc	r31, r25
    1230:	87 a5       	ldd	r24, Z+47	; 0x2f
    1232:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    1234:	8f 70       	andi	r24, 0x0F	; 15
    1236:	08 95       	ret

00001238 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1238:	e0 91 41 01 	lds	r30, 0x0141
    123c:	f0 91 42 01 	lds	r31, 0x0142
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2d e0       	ldi	r18, 0x0D	; 13
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	ac 01       	movw	r20, r24
    1248:	42 9f       	mul	r20, r18
    124a:	c0 01       	movw	r24, r0
    124c:	43 9f       	mul	r20, r19
    124e:	90 0d       	add	r25, r0
    1250:	52 9f       	mul	r21, r18
    1252:	90 0d       	add	r25, r0
    1254:	11 24       	eor	r1, r1
    1256:	e8 0f       	add	r30, r24
    1258:	f9 1f       	adc	r31, r25
    125a:	6f 70       	andi	r22, 0x0F	; 15
    125c:	66 0f       	add	r22, r22
    125e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1260:	81 7e       	andi	r24, 0xE1	; 225
    1262:	86 2b       	or	r24, r22
    1264:	87 a7       	std	Z+47, r24	; 0x2f
}
    1266:	08 95       	ret

00001268 <Timebase_DownCounter_Get_Value>:

uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
    1268:	e0 91 41 01 	lds	r30, 0x0141
    126c:	f0 91 42 01 	lds	r31, 0x0142
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	2d e0       	ldi	r18, 0x0D	; 13
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	ac 01       	movw	r20, r24
    1278:	42 9f       	mul	r20, r18
    127a:	c0 01       	movw	r24, r0
    127c:	43 9f       	mul	r20, r19
    127e:	90 0d       	add	r25, r0
    1280:	52 9f       	mul	r21, r18
    1282:	90 0d       	add	r25, r0
    1284:	11 24       	eor	r1, r1
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	df 01       	movw	r26, r30
    128c:	d4 96       	adiw	r26, 0x34	; 52
    128e:	64 a9       	ldd	r22, Z+52	; 0x34
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	7c 91       	ld	r23, X
    1294:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->DownCounter[window].Value;
}
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	8c 91       	ld	r24, X
    129a:	12 97       	sbiw	r26, 0x02	; 2
    129c:	13 96       	adiw	r26, 0x03	; 3
    129e:	9c 91       	ld	r25, X
    12a0:	08 95       	ret

000012a2 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    12a2:	e0 91 41 01 	lds	r30, 0x0141
    12a6:	f0 91 42 01 	lds	r31, 0x0142
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	2d e0       	ldi	r18, 0x0D	; 13
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	dc 01       	movw	r26, r24
    12b2:	a2 9f       	mul	r26, r18
    12b4:	c0 01       	movw	r24, r0
    12b6:	a3 9f       	mul	r26, r19
    12b8:	90 0d       	add	r25, r0
    12ba:	b2 9f       	mul	r27, r18
    12bc:	90 0d       	add	r25, r0
    12be:	11 24       	eor	r1, r1
    12c0:	e8 0f       	add	r30, r24
    12c2:	f9 1f       	adc	r31, r25
    12c4:	44 ab       	std	Z+52, r20	; 0x34
    12c6:	55 ab       	std	Z+53, r21	; 0x35
    12c8:	66 ab       	std	Z+54, r22	; 0x36
    12ca:	77 ab       	std	Z+55, r23	; 0x37
}
    12cc:	08 95       	ret

000012ce <Timebase_DownCounter_Get_EndValue>:

uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    12ce:	e0 91 41 01 	lds	r30, 0x0141
    12d2:	f0 91 42 01 	lds	r31, 0x0142
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	2d e0       	ldi	r18, 0x0D	; 13
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	ac 01       	movw	r20, r24
    12de:	42 9f       	mul	r20, r18
    12e0:	c0 01       	movw	r24, r0
    12e2:	43 9f       	mul	r20, r19
    12e4:	90 0d       	add	r25, r0
    12e6:	52 9f       	mul	r21, r18
    12e8:	90 0d       	add	r25, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	e8 0f       	add	r30, r24
    12ee:	f9 1f       	adc	r31, r25
    12f0:	df 01       	movw	r26, r30
    12f2:	d0 96       	adiw	r26, 0x30	; 48
    12f4:	60 a9       	ldd	r22, Z+48	; 0x30
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	7c 91       	ld	r23, X
    12fa:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	8c 91       	ld	r24, X
    1300:	12 97       	sbiw	r26, 0x02	; 2
    1302:	13 96       	adiw	r26, 0x03	; 3
    1304:	9c 91       	ld	r25, X
    1306:	08 95       	ret

00001308 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1308:	e0 91 41 01 	lds	r30, 0x0141
    130c:	f0 91 42 01 	lds	r31, 0x0142
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	2d e0       	ldi	r18, 0x0D	; 13
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	dc 01       	movw	r26, r24
    1318:	a2 9f       	mul	r26, r18
    131a:	c0 01       	movw	r24, r0
    131c:	a3 9f       	mul	r26, r19
    131e:	90 0d       	add	r25, r0
    1320:	b2 9f       	mul	r27, r18
    1322:	90 0d       	add	r25, r0
    1324:	11 24       	eor	r1, r1
    1326:	e8 0f       	add	r30, r24
    1328:	f9 1f       	adc	r31, r25
    132a:	40 ab       	std	Z+48, r20	; 0x30
    132c:	51 ab       	std	Z+49, r21	; 0x31
    132e:	62 ab       	std	Z+50, r22	; 0x32
    1330:	73 ab       	std	Z+51, r23	; 0x33
}
    1332:	08 95       	ret

00001334 <Timebase_DownCounter_Get_PeriodValue>:


uint32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    1334:	e0 91 41 01 	lds	r30, 0x0141
    1338:	f0 91 42 01 	lds	r31, 0x0142
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	2d e0       	ldi	r18, 0x0D	; 13
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	ac 01       	movw	r20, r24
    1344:	42 9f       	mul	r20, r18
    1346:	c0 01       	movw	r24, r0
    1348:	43 9f       	mul	r20, r19
    134a:	90 0d       	add	r25, r0
    134c:	52 9f       	mul	r21, r18
    134e:	90 0d       	add	r25, r0
    1350:	11 24       	eor	r1, r1
    1352:	e8 0f       	add	r30, r24
    1354:	f9 1f       	adc	r31, r25
    1356:	df 01       	movw	r26, r30
    1358:	d8 96       	adiw	r26, 0x38	; 56
    135a:	60 ad       	ldd	r22, Z+56	; 0x38
    135c:	11 96       	adiw	r26, 0x01	; 1
    135e:	7c 91       	ld	r23, X
    1360:	11 97       	sbiw	r26, 0x01	; 1
  return (uint32_t)Timebase->DownCounter[window].PeriodValue;
}
    1362:	12 96       	adiw	r26, 0x02	; 2
    1364:	8c 91       	ld	r24, X
    1366:	12 97       	sbiw	r26, 0x02	; 2
    1368:	13 96       	adiw	r26, 0x03	; 3
    136a:	9c 91       	ld	r25, X
    136c:	08 95       	ret

0000136e <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  if(value < 0){
    Timebase->DownCounter[window].PeriodValue = 0;
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    136e:	e0 91 41 01 	lds	r30, 0x0141
    1372:	f0 91 42 01 	lds	r31, 0x0142
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	2d e0       	ldi	r18, 0x0D	; 13
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	dc 01       	movw	r26, r24
    137e:	a2 9f       	mul	r26, r18
    1380:	c0 01       	movw	r24, r0
    1382:	a3 9f       	mul	r26, r19
    1384:	90 0d       	add	r25, r0
    1386:	b2 9f       	mul	r27, r18
    1388:	90 0d       	add	r25, r0
    138a:	11 24       	eor	r1, r1
    138c:	e8 0f       	add	r30, r24
    138e:	f9 1f       	adc	r31, r25
    1390:	40 af       	std	Z+56, r20	; 0x38
    1392:	51 af       	std	Z+57, r21	; 0x39
    1394:	62 af       	std	Z+58, r22	; 0x3a
    1396:	73 af       	std	Z+59, r23	; 0x3b
  }
  
}
    1398:	08 95       	ret

0000139a <Timebase_DownCounter_Get_Period_Flag>:

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    139a:	e0 91 41 01 	lds	r30, 0x0141
    139e:	f0 91 42 01 	lds	r31, 0x0142
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	2d e0       	ldi	r18, 0x0D	; 13
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	ac 01       	movw	r20, r24
    13aa:	42 9f       	mul	r20, r18
    13ac:	c0 01       	movw	r24, r0
    13ae:	43 9f       	mul	r20, r19
    13b0:	90 0d       	add	r25, r0
    13b2:	52 9f       	mul	r21, r18
    13b4:	90 0d       	add	r25, r0
    13b6:	11 24       	eor	r1, r1
    13b8:	e8 0f       	add	r30, r24
    13ba:	f9 1f       	adc	r31, r25
    13bc:	87 a5       	ldd	r24, Z+47	; 0x2f
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
}
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	08 95       	ret

000013c2 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    13c2:	e0 91 41 01 	lds	r30, 0x0141
    13c6:	f0 91 42 01 	lds	r31, 0x0142
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	2d e0       	ldi	r18, 0x0D	; 13
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	ac 01       	movw	r20, r24
    13d2:	42 9f       	mul	r20, r18
    13d4:	c0 01       	movw	r24, r0
    13d6:	43 9f       	mul	r20, r19
    13d8:	90 0d       	add	r25, r0
    13da:	52 9f       	mul	r21, r18
    13dc:	90 0d       	add	r25, r0
    13de:	11 24       	eor	r1, r1
    13e0:	e8 0f       	add	r30, r24
    13e2:	f9 1f       	adc	r31, r25
    13e4:	87 a5       	ldd	r24, Z+47	; 0x2f
    13e6:	81 60       	ori	r24, 0x01	; 1
    13e8:	87 a7       	std	Z+47, r24	; 0x2f
}
    13ea:	08 95       	ret

000013ec <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    13ec:	e0 91 41 01 	lds	r30, 0x0141
    13f0:	f0 91 42 01 	lds	r31, 0x0142
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	2d e0       	ldi	r18, 0x0D	; 13
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	ac 01       	movw	r20, r24
    13fc:	42 9f       	mul	r20, r18
    13fe:	c0 01       	movw	r24, r0
    1400:	43 9f       	mul	r20, r19
    1402:	90 0d       	add	r25, r0
    1404:	52 9f       	mul	r21, r18
    1406:	90 0d       	add	r25, r0
    1408:	11 24       	eor	r1, r1
    140a:	e8 0f       	add	r30, r24
    140c:	f9 1f       	adc	r31, r25
    140e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1410:	8e 7f       	andi	r24, 0xFE	; 254
    1412:	87 a7       	std	Z+47, r24	; 0x2f
}
    1414:	08 95       	ret

00001416 <Timebase_DownCounter_Reset>:
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1416:	e0 91 41 01 	lds	r30, 0x0141
    141a:	f0 91 42 01 	lds	r31, 0x0142
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	2d e0       	ldi	r18, 0x0D	; 13
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	ac 01       	movw	r20, r24
    1426:	42 9f       	mul	r20, r18
    1428:	c0 01       	movw	r24, r0
    142a:	43 9f       	mul	r20, r19
    142c:	90 0d       	add	r25, r0
    142e:	52 9f       	mul	r21, r18
    1430:	90 0d       	add	r25, r0
    1432:	11 24       	eor	r1, r1
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	10 aa       	std	Z+48, r1	; 0x30
    143a:	11 aa       	std	Z+49, r1	; 0x31
    143c:	12 aa       	std	Z+50, r1	; 0x32
    143e:	13 aa       	std	Z+51, r1	; 0x33
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1440:	14 aa       	std	Z+52, r1	; 0x34
    1442:	15 aa       	std	Z+53, r1	; 0x35
    1444:	16 aa       	std	Z+54, r1	; 0x36
    1446:	17 aa       	std	Z+55, r1	; 0x37
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1448:	87 a5       	ldd	r24, Z+47	; 0x2f
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    144a:	80 7e       	andi	r24, 0xE0	; 224
    144c:	87 a7       	std	Z+47, r24	; 0x2f
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, 0);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    144e:	08 95       	ret

00001450 <Timebase_DownCounter_Clear_All_Flags>:
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1450:	e0 91 41 01 	lds	r30, 0x0141
    1454:	f0 91 42 01 	lds	r31, 0x0142
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	2d e0       	ldi	r18, 0x0D	; 13
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	ac 01       	movw	r20, r24
    1460:	42 9f       	mul	r20, r18
    1462:	c0 01       	movw	r24, r0
    1464:	43 9f       	mul	r20, r19
    1466:	90 0d       	add	r25, r0
    1468:	52 9f       	mul	r21, r18
    146a:	90 0d       	add	r25, r0
    146c:	11 24       	eor	r1, r1
    146e:	e8 0f       	add	r30, r24
    1470:	f9 1f       	adc	r31, r25
    1472:	10 aa       	std	Z+48, r1	; 0x30
    1474:	11 aa       	std	Z+49, r1	; 0x31
    1476:	12 aa       	std	Z+50, r1	; 0x32
    1478:	13 aa       	std	Z+51, r1	; 0x33
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    147a:	14 aa       	std	Z+52, r1	; 0x34
    147c:	15 aa       	std	Z+53, r1	; 0x35
    147e:	16 aa       	std	Z+54, r1	; 0x36
    1480:	17 aa       	std	Z+55, r1	; 0x37
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1482:	87 a5       	ldd	r24, Z+47	; 0x2f
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1484:	80 7e       	andi	r24, 0xE0	; 224
    1486:	87 a7       	std	Z+47, r24	; 0x2f
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    1488:	08 95       	ret

0000148a <Timebase_DownCounter_Start>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    148a:	e0 91 41 01 	lds	r30, 0x0141
    148e:	f0 91 42 01 	lds	r31, 0x0142
    1492:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 1){
    1494:	2d e0       	ldi	r18, 0x0D	; 13
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	ac 01       	movw	r20, r24
    149a:	42 9f       	mul	r20, r18
    149c:	c0 01       	movw	r24, r0
    149e:	43 9f       	mul	r20, r19
    14a0:	90 0d       	add	r25, r0
    14a2:	52 9f       	mul	r21, r18
    14a4:	90 0d       	add	r25, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	e8 0f       	add	r30, r24
    14aa:	f9 1f       	adc	r31, r25
    14ac:	97 a5       	ldd	r25, Z+47	; 0x2f
    14ae:	89 2f       	mov	r24, r25
    14b0:	86 95       	lsr	r24
    14b2:	8f 70       	andi	r24, 0x0F	; 15
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	19 f0       	breq	.+6      	; 0x14be <Timebase_DownCounter_Start+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14b8:	91 7e       	andi	r25, 0xE1	; 225
    14ba:	92 60       	ori	r25, 0x02	; 2
    14bc:	97 a7       	std	Z+47, r25	; 0x2f
    14be:	08 95       	ret

000014c0 <Timebase_DownCounter_Stop>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    14c0:	e0 91 41 01 	lds	r30, 0x0141
    14c4:	f0 91 42 01 	lds	r31, 0x0142
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, 1); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 2){
    14ca:	2d e0       	ldi	r18, 0x0D	; 13
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	ac 01       	movw	r20, r24
    14d0:	42 9f       	mul	r20, r18
    14d2:	c0 01       	movw	r24, r0
    14d4:	43 9f       	mul	r20, r19
    14d6:	90 0d       	add	r25, r0
    14d8:	52 9f       	mul	r21, r18
    14da:	90 0d       	add	r25, r0
    14dc:	11 24       	eor	r1, r1
    14de:	e8 0f       	add	r30, r24
    14e0:	f9 1f       	adc	r31, r25
    14e2:	97 a5       	ldd	r25, Z+47	; 0x2f
    14e4:	89 2f       	mov	r24, r25
    14e6:	86 95       	lsr	r24
    14e8:	8f 70       	andi	r24, 0x0F	; 15
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <Timebase_DownCounter_Stop+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14ee:	91 7e       	andi	r25, 0xE1	; 225
    14f0:	94 60       	ori	r25, 0x04	; 4
    14f2:	97 a7       	std	Z+47, r25	; 0x2f
    14f4:	08 95       	ret

000014f6 <Timebase_DownCounter_Set_Securely>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    14f6:	a0 91 41 01 	lds	r26, 0x0141
    14fa:	b0 91 42 01 	lds	r27, 0x0142
    14fe:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, uint32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == 0 ){
    1500:	2d e0       	ldi	r18, 0x0D	; 13
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	82 9f       	mul	r24, r18
    1506:	f0 01       	movw	r30, r0
    1508:	83 9f       	mul	r24, r19
    150a:	f0 0d       	add	r31, r0
    150c:	92 9f       	mul	r25, r18
    150e:	f0 0d       	add	r31, r0
    1510:	11 24       	eor	r1, r1
    1512:	ea 0f       	add	r30, r26
    1514:	fb 1f       	adc	r31, r27
    1516:	87 a5       	ldd	r24, Z+47	; 0x2f
    1518:	86 95       	lsr	r24
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	d9 f4       	brne	.+54     	; 0x1554 <Timebase_DownCounter_Set_Securely+0x5e>
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    151e:	44 ab       	std	Z+52, r20	; 0x34
    1520:	55 ab       	std	Z+53, r21	; 0x35
    1522:	66 ab       	std	Z+54, r22	; 0x36
    1524:	77 ab       	std	Z+55, r23	; 0x37
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1526:	1c 96       	adiw	r26, 0x0c	; 12
    1528:	8d 91       	ld	r24, X+
    152a:	9d 91       	ld	r25, X+
    152c:	0d 90       	ld	r0, X+
    152e:	bc 91       	ld	r27, X
    1530:	a0 2d       	mov	r26, r0
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1532:	84 0f       	add	r24, r20
    1534:	95 1f       	adc	r25, r21
    1536:	a6 1f       	adc	r26, r22
    1538:	b7 1f       	adc	r27, r23
    153a:	80 ab       	std	Z+48, r24	; 0x30
    153c:	91 ab       	std	Z+49, r25	; 0x31
    153e:	a2 ab       	std	Z+50, r26	; 0x32
    1540:	b3 ab       	std	Z+51, r27	; 0x33
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 1){
    1542:	97 a5       	ldd	r25, Z+47	; 0x2f
    1544:	89 2f       	mov	r24, r25
    1546:	86 95       	lsr	r24
    1548:	8f 70       	andi	r24, 0x0F	; 15
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	19 f0       	breq	.+6      	; 0x1554 <Timebase_DownCounter_Set_Securely+0x5e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    154e:	91 7e       	andi	r25, 0xE1	; 225
    1550:	92 60       	ori	r25, 0x02	; 2
    1552:	97 a7       	std	Z+47, r25	; 0x2f
    1554:	08 95       	ret

00001556 <Timebase_DownCounter_Set_Forcefully>:
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, uint32_t value){
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    155a:	e0 91 41 01 	lds	r30, 0x0141
    155e:	f0 91 42 01 	lds	r31, 0x0142
    1562:	a8 2f       	mov	r26, r24
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	2d e0       	ldi	r18, 0x0D	; 13
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	e9 01       	movw	r28, r18
    156c:	ac 9f       	mul	r26, r28
    156e:	90 01       	movw	r18, r0
    1570:	ad 9f       	mul	r26, r29
    1572:	30 0d       	add	r19, r0
    1574:	bc 9f       	mul	r27, r28
    1576:	30 0d       	add	r19, r0
    1578:	11 24       	eor	r1, r1
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	10 aa       	std	Z+48, r1	; 0x30
    1580:	11 aa       	std	Z+49, r1	; 0x31
    1582:	12 aa       	std	Z+50, r1	; 0x32
    1584:	13 aa       	std	Z+51, r1	; 0x33
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    1586:	14 aa       	std	Z+52, r1	; 0x34
    1588:	15 aa       	std	Z+53, r1	; 0x35
    158a:	16 aa       	std	Z+54, r1	; 0x36
    158c:	17 aa       	std	Z+55, r1	; 0x37
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    158e:	97 a5       	ldd	r25, Z+47	; 0x2f
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1590:	90 7e       	andi	r25, 0xE0	; 224
    1592:	97 a7       	std	Z+47, r25	; 0x2f
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, uint32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    1594:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Timebase_DownCounter_Set_Securely>
} 
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <Timebase_DownCounter_Update>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    159e:	a0 91 41 01 	lds	r26, 0x0141
    15a2:	b0 91 42 01 	lds	r27, 0x0142
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	2d e0       	ldi	r18, 0x0D	; 13
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	82 9f       	mul	r24, r18
    15ae:	f0 01       	movw	r30, r0
    15b0:	83 9f       	mul	r24, r19
    15b2:	f0 0d       	add	r31, r0
    15b4:	92 9f       	mul	r25, r18
    15b6:	f0 0d       	add	r31, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	ea 0f       	add	r30, r26
    15bc:	fb 1f       	adc	r31, r27
    15be:	87 a5       	ldd	r24, Z+47	; 0x2f
    15c0:	86 95       	lsr	r24
    15c2:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	19 f5       	brne	.+70     	; 0x160e <Timebase_DownCounter_Update+0x70>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15c8:	1c 96       	adiw	r26, 0x0c	; 12
    15ca:	2d 91       	ld	r18, X+
    15cc:	3d 91       	ld	r19, X+
    15ce:	4d 91       	ld	r20, X+
    15d0:	5c 91       	ld	r21, X
    15d2:	1f 97       	sbiw	r26, 0x0f	; 15
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    15d4:	80 a9       	ldd	r24, Z+48	; 0x30
    15d6:	91 a9       	ldd	r25, Z+49	; 0x31
    15d8:	a2 a9       	ldd	r26, Z+50	; 0x32
    15da:	b3 a9       	ldd	r27, Z+51	; 0x33
    15dc:	82 1b       	sub	r24, r18
    15de:	93 0b       	sbc	r25, r19
    15e0:	a4 0b       	sbc	r26, r20
    15e2:	b5 0b       	sbc	r27, r21
    15e4:	84 ab       	std	Z+52, r24	; 0x34
    15e6:	95 ab       	std	Z+53, r25	; 0x35
    15e8:	a6 ab       	std	Z+54, r26	; 0x36
    15ea:	b7 ab       	std	Z+55, r27	; 0x37
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	a1 05       	cpc	r26, r1
    15f0:	b1 05       	cpc	r27, r1
    15f2:	09 f5       	brne	.+66     	; 0x1636 <Timebase_DownCounter_Update+0x98>
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    15f4:	10 aa       	std	Z+48, r1	; 0x30
    15f6:	11 aa       	std	Z+49, r1	; 0x31
    15f8:	12 aa       	std	Z+50, r1	; 0x32
    15fa:	13 aa       	std	Z+51, r1	; 0x33
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    15fc:	14 aa       	std	Z+52, r1	; 0x34
    15fe:	15 aa       	std	Z+53, r1	; 0x35
    1600:	16 aa       	std	Z+54, r1	; 0x36
    1602:	17 aa       	std	Z+55, r1	; 0x37
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1604:	87 a5       	ldd	r24, Z+47	; 0x2f
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1606:	80 7e       	andi	r24, 0xE0	; 224
    1608:	88 60       	ori	r24, 0x08	; 8
    160a:	87 a7       	std	Z+47, r24	; 0x2f
    160c:	08 95       	ret
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, 4);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == 2){ 
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 f4       	brne	.+36     	; 0x1636 <Timebase_DownCounter_Update+0x98>
uint32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

uint32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1612:	1c 96       	adiw	r26, 0x0c	; 12
    1614:	2d 91       	ld	r18, X+
    1616:	3d 91       	ld	r19, X+
    1618:	4d 91       	ld	r20, X+
    161a:	5c 91       	ld	r21, X
    161c:	1f 97       	sbiw	r26, 0x0f	; 15
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    161e:	84 a9       	ldd	r24, Z+52	; 0x34
    1620:	95 a9       	ldd	r25, Z+53	; 0x35
    1622:	a6 a9       	ldd	r26, Z+54	; 0x36
    1624:	b7 a9       	ldd	r27, Z+55	; 0x37
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	a4 1f       	adc	r26, r20
    162c:	b5 1f       	adc	r27, r21
    162e:	80 ab       	std	Z+48, r24	; 0x30
    1630:	91 ab       	std	Z+49, r25	; 0x31
    1632:	a2 ab       	std	Z+50, r26	; 0x32
    1634:	b3 ab       	std	Z+51, r27	; 0x33
    1636:	08 95       	ret

00001638 <Timebase_DownCounter_Expired>:
  } else if (Timebase_DownCounter_Get_Status( window ) == 2){ 
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	e0 91 41 01 	lds	r30, 0x0141
    163e:	f0 91 42 01 	lds	r31, 0x0142
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	2d e0       	ldi	r18, 0x0D	; 13
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	bc 01       	movw	r22, r24
    164a:	62 9f       	mul	r22, r18
    164c:	c0 01       	movw	r24, r0
    164e:	63 9f       	mul	r22, r19
    1650:	90 0d       	add	r25, r0
    1652:	72 9f       	mul	r23, r18
    1654:	90 0d       	add	r25, r0
    1656:	11 24       	eor	r1, r1
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	87 a5       	ldd	r24, Z+47	; 0x2f
    165e:	86 95       	lsr	r24
    1660:	8f 70       	andi	r24, 0x0F	; 15
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	09 f4       	brne	.+2      	; 0x1668 <Timebase_DownCounter_Expired+0x30>
    1666:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == 4){
    return 1;
  }else{
    return 0;
  }
}
    1668:	84 2f       	mov	r24, r20
    166a:	08 95       	ret

0000166c <Timebase_DownCounter_Expired_Event>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    166c:	e0 91 41 01 	lds	r30, 0x0141
    1670:	f0 91 42 01 	lds	r31, 0x0142
    1674:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == 4){
    1676:	2d e0       	ldi	r18, 0x0D	; 13
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	ac 01       	movw	r20, r24
    167c:	42 9f       	mul	r20, r18
    167e:	c0 01       	movw	r24, r0
    1680:	43 9f       	mul	r20, r19
    1682:	90 0d       	add	r25, r0
    1684:	52 9f       	mul	r21, r18
    1686:	90 0d       	add	r25, r0
    1688:	11 24       	eor	r1, r1
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
    168e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1690:	86 95       	lsr	r24
    1692:	8f 70       	andi	r24, 0x0F	; 15
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	11 f0       	breq	.+4      	; 0x169c <Timebase_DownCounter_Expired_Event+0x30>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	08 95       	ret
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    169c:	10 aa       	std	Z+48, r1	; 0x30
    169e:	11 aa       	std	Z+49, r1	; 0x31
    16a0:	12 aa       	std	Z+50, r1	; 0x32
    16a2:	13 aa       	std	Z+51, r1	; 0x33
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    16a4:	14 aa       	std	Z+52, r1	; 0x34
    16a6:	15 aa       	std	Z+53, r1	; 0x35
    16a8:	16 aa       	std	Z+54, r1	; 0x36
    16aa:	17 aa       	std	Z+55, r1	; 0x37
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16ac:	87 a5       	ldd	r24, Z+47	; 0x2f
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    16ae:	80 7e       	andi	r24, 0xE0	; 224
    16b0:	87 a7       	std	Z+47, r24	; 0x2f
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    16b4:	08 95       	ret

000016b6 <Timebase_DownCounter_Set_Period_Value_Securely>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
    16b6:	e0 91 41 01 	lds	r30, 0x0141
    16ba:	f0 91 42 01 	lds	r31, 0x0142
    16be:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, uint32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    16c0:	2d e0       	ldi	r18, 0x0D	; 13
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	dc 01       	movw	r26, r24
    16c6:	a2 9f       	mul	r26, r18
    16c8:	c0 01       	movw	r24, r0
    16ca:	a3 9f       	mul	r26, r19
    16cc:	90 0d       	add	r25, r0
    16ce:	b2 9f       	mul	r27, r18
    16d0:	90 0d       	add	r25, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	e8 0f       	add	r30, r24
    16d6:	f9 1f       	adc	r31, r25
    16d8:	87 a5       	ldd	r24, Z+47	; 0x2f
    16da:	80 fd       	sbrc	r24, 0
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <Timebase_DownCounter_Set_Period_Value_Securely+0x46>

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, uint32_t value){
  if(value < 0){
    Timebase->DownCounter[window].PeriodValue = 0;
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    16de:	84 a9       	ldd	r24, Z+52	; 0x34
    16e0:	95 a9       	ldd	r25, Z+53	; 0x35
    16e2:	a6 a9       	ldd	r26, Z+54	; 0x36
    16e4:	b7 a9       	ldd	r27, Z+55	; 0x37
    16e6:	84 1b       	sub	r24, r20
    16e8:	95 0b       	sbc	r25, r21
    16ea:	a6 0b       	sbc	r26, r22
    16ec:	b7 0b       	sbc	r27, r23
    16ee:	80 af       	std	Z+56, r24	; 0x38
    16f0:	91 af       	std	Z+57, r25	; 0x39
    16f2:	a2 af       	std	Z+58, r26	; 0x3a
    16f4:	b3 af       	std	Z+59, r27	; 0x3b
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    16f6:	87 a5       	ldd	r24, Z+47	; 0x2f
    16f8:	81 60       	ori	r24, 0x01	; 1
    16fa:	87 a7       	std	Z+47, r24	; 0x2f
    16fc:	08 95       	ret

000016fe <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
    16fe:	e0 91 41 01 	lds	r30, 0x0141
    1702:	f0 91 42 01 	lds	r31, 0x0142
    1706:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

uint32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1708:	2d e0       	ldi	r18, 0x0D	; 13
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	ac 01       	movw	r20, r24
    170e:	42 9f       	mul	r20, r18
    1710:	c0 01       	movw	r24, r0
    1712:	43 9f       	mul	r20, r19
    1714:	90 0d       	add	r25, r0
    1716:	52 9f       	mul	r21, r18
    1718:	90 0d       	add	r25, r0
    171a:	11 24       	eor	r1, r1
    171c:	e8 0f       	add	r30, r24
    171e:	f9 1f       	adc	r31, r25
    1720:	24 a9       	ldd	r18, Z+52	; 0x34
    1722:	35 a9       	ldd	r19, Z+53	; 0x35
    1724:	46 a9       	ldd	r20, Z+54	; 0x36
    1726:	57 a9       	ldd	r21, Z+55	; 0x37
    1728:	80 ad       	ldd	r24, Z+56	; 0x38
    172a:	91 ad       	ldd	r25, Z+57	; 0x39
    172c:	a2 ad       	ldd	r26, Z+58	; 0x3a
    172e:	b3 ad       	ldd	r27, Z+59	; 0x3b
    1730:	28 1b       	sub	r18, r24
    1732:	39 0b       	sbc	r19, r25
    1734:	4a 0b       	sbc	r20, r26
    1736:	5b 0b       	sbc	r21, r27
    1738:	57 ff       	sbrs	r21, 7
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <Timebase_DownCounter_Get_Remaining_Period_Value+0x46>
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1744:	b9 01       	movw	r22, r18
    1746:	ca 01       	movw	r24, r20
    1748:	08 95       	ret

0000174a <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
    174e:	c0 91 41 01 	lds	r28, 0x0141
    1752:	d0 91 42 01 	lds	r29, 0x0142
    1756:	68 2f       	mov	r22, r24
    1758:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

uint32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    175a:	8d e0       	ldi	r24, 0x0D	; 13
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	68 9f       	mul	r22, r24
    1760:	f0 01       	movw	r30, r0
    1762:	69 9f       	mul	r22, r25
    1764:	f0 0d       	add	r31, r0
    1766:	78 9f       	mul	r23, r24
    1768:	f0 0d       	add	r31, r0
    176a:	11 24       	eor	r1, r1
    176c:	ec 0f       	add	r30, r28
    176e:	fd 1f       	adc	r31, r29
    1770:	24 a9       	ldd	r18, Z+52	; 0x34
    1772:	35 a9       	ldd	r19, Z+53	; 0x35
    1774:	46 a9       	ldd	r20, Z+54	; 0x36
    1776:	57 a9       	ldd	r21, Z+55	; 0x37
    1778:	80 ad       	ldd	r24, Z+56	; 0x38
    177a:	91 ad       	ldd	r25, Z+57	; 0x39
    177c:	a2 ad       	ldd	r26, Z+58	; 0x3a
    177e:	b3 ad       	ldd	r27, Z+59	; 0x3b
    1780:	28 1b       	sub	r18, r24
    1782:	39 0b       	sbc	r19, r25
    1784:	4a 0b       	sbc	r20, r26
    1786:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1788:	57 fd       	sbrc	r21, 7
    178a:	07 c0       	rjmp	.+14     	; 0x179a <Timebase_DownCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    178c:	21 15       	cp	r18, r1
    178e:	31 05       	cpc	r19, r1
    1790:	41 05       	cpc	r20, r1
    1792:	51 05       	cpc	r21, r1
    1794:	11 f0       	breq	.+4      	; 0x179a <Timebase_DownCounter_Period_Value_Expired+0x50>
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	12 c0       	rjmp	.+36     	; 0x17be <Timebase_DownCounter_Period_Value_Expired+0x74>
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	8d e0       	ldi	r24, 0x0D	; 13
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	ac 01       	movw	r20, r24
    17a2:	64 9f       	mul	r22, r20
    17a4:	c0 01       	movw	r24, r0
    17a6:	65 9f       	mul	r22, r21
    17a8:	90 0d       	add	r25, r0
    17aa:	74 9f       	mul	r23, r20
    17ac:	90 0d       	add	r25, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	c8 0f       	add	r28, r24
    17b2:	d9 1f       	adc	r29, r25
    17b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b6:	80 ff       	sbrs	r24, 0
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    17be:	82 2f       	mov	r24, r18
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    17c6:	1f 93       	push	r17
    17c8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    17ca:	0e 94 a5 0b 	call	0x174a	; 0x174a <Timebase_DownCounter_Period_Value_Expired>
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	11 f0       	breq	.+4      	; 0x17d6 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	16 c0       	rjmp	.+44     	; 0x1802 <Timebase_DownCounter_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    17d6:	e0 91 41 01 	lds	r30, 0x0141
    17da:	f0 91 42 01 	lds	r31, 0x0142
    17de:	21 2f       	mov	r18, r17
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8d e0       	ldi	r24, 0x0D	; 13
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	ac 01       	movw	r20, r24
    17e8:	24 9f       	mul	r18, r20
    17ea:	c0 01       	movw	r24, r0
    17ec:	25 9f       	mul	r18, r21
    17ee:	90 0d       	add	r25, r0
    17f0:	34 9f       	mul	r19, r20
    17f2:	90 0d       	add	r25, r0
    17f4:	11 24       	eor	r1, r1
    17f6:	e8 0f       	add	r30, r24
    17f8:	f9 1f       	adc	r31, r25
    17fa:	87 a5       	ldd	r24, Z+47	; 0x2f
    17fc:	8e 7f       	andi	r24, 0xFE	; 254
    17fe:	87 a7       	std	Z+47, r24	; 0x2f
    1800:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1802:	1f 91       	pop	r17
    1804:	08 95       	ret

00001806 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	0e 94 cf 0a 	call	0x159e	; 0x159e <Timebase_DownCounter_Update>
  }
}
    180c:	08 95       	ret

0000180e <Timebase_DownCounter_Reset_All>:
uint32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].EndValue = value;
    180e:	e0 91 41 01 	lds	r30, 0x0141
    1812:	f0 91 42 01 	lds	r31, 0x0142
    1816:	10 aa       	std	Z+48, r1	; 0x30
    1818:	11 aa       	std	Z+49, r1	; 0x31
    181a:	12 aa       	std	Z+50, r1	; 0x32
    181c:	13 aa       	std	Z+51, r1	; 0x33
uint32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (uint32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, uint32_t value){
  Timebase->DownCounter[window].Value = value;
    181e:	14 aa       	std	Z+52, r1	; 0x34
    1820:	15 aa       	std	Z+53, r1	; 0x35
    1822:	16 aa       	std	Z+54, r1	; 0x36
    1824:	17 aa       	std	Z+55, r1	; 0x37
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1826:	87 a5       	ldd	r24, Z+47	; 0x2f
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1828:	80 7e       	andi	r24, 0xE0	; 224
    182a:	87 a7       	std	Z+47, r24	; 0x2f

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    182c:	08 95       	ret

0000182e <Timebase_Reset>:



void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    182e:	0e 94 03 09 	call	0x1206	; 0x1206 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1832:	0e 94 07 0c 	call	0x180e	; 0x180e <Timebase_DownCounter_Reset_All>
  #endif
}
    1836:	08 95       	ret

00001838 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    183e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1842:	c8 01       	movw	r24, r16
    1844:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Timebase_Timer_Config>
  Timebase_Reset();
    1848:	0e 94 17 0c 	call	0x182e	; 0x182e <Timebase_Reset>
}
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
    1852:	0e 94 ff 08 	call	0x11fe	; 0x11fe <Timebase_UpCounter_Update_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1856:	0e 94 03 0c 	call	0x1806	; 0x1806 <Timebase_DownCounter_Update_All>
  #endif
}
    185a:	08 95       	ret

0000185c <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
  Timebase->Time.SubSeconds++;
    1860:	c0 91 41 01 	lds	r28, 0x0141
    1864:	d0 91 42 01 	lds	r29, 0x0142
    1868:	88 85       	ldd	r24, Y+8	; 0x08
    186a:	99 85       	ldd	r25, Y+9	; 0x09
    186c:	aa 85       	ldd	r26, Y+10	; 0x0a
    186e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	a1 1d       	adc	r26, r1
    1874:	b1 1d       	adc	r27, r1
    1876:	88 87       	std	Y+8, r24	; 0x08
    1878:	99 87       	std	Y+9, r25	; 0x09
    187a:	aa 87       	std	Y+10, r26	; 0x0a
    187c:	bb 87       	std	Y+11, r27	; 0x0b
  TCNT0  = Timebase->Time.OVFUpdateValue;
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1882:	68 85       	ldd	r22, Y+8	; 0x08
    1884:	79 85       	ldd	r23, Y+9	; 0x09
    1886:	8a 85       	ldd	r24, Y+10	; 0x0a
    1888:	9b 85       	ldd	r25, Y+11	; 0x0b
    188a:	29 81       	ldd	r18, Y+1	; 0x01
    188c:	3a 81       	ldd	r19, Y+2	; 0x02
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1896:	61 15       	cp	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	81 05       	cpc	r24, r1
    189c:	91 05       	cpc	r25, r1
    189e:	91 f4       	brne	.+36     	; 0x18c4 <Timebase_ISR_Executables+0x68>
    Timebase->Time.Seconds++;
    18a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    18a4:	ae 85       	ldd	r26, Y+14	; 0x0e
    18a6:	bf 85       	ldd	r27, Y+15	; 0x0f
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	a1 1d       	adc	r26, r1
    18ac:	b1 1d       	adc	r27, r1
    18ae:	8c 87       	std	Y+12, r24	; 0x0c
    18b0:	9d 87       	std	Y+13, r25	; 0x0d
    18b2:	ae 87       	std	Y+14, r26	; 0x0e
    18b4:	bf 87       	std	Y+15, r27	; 0x0f


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    18b6:	89 8d       	ldd	r24, Y+25	; 0x19
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
    18b8:	88 23       	and	r24, r24
    18ba:	21 f4       	brne	.+8      	; 0x18c4 <Timebase_ISR_Executables+0x68>
      Timebase->Time.SubSeconds = 0;
    18bc:	18 86       	std	Y+8, r1	; 0x08
    18be:	19 86       	std	Y+9, r1	; 0x09
    18c0:	1a 86       	std	Y+10, r1	; 0x0a
    18c2:	1b 86       	std	Y+11, r1	; 0x0b
    }
	#endif
  }
}
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <__vector_16>:

ISR(TIMER0_OVF_vect){
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	af 93       	push	r26
    18e6:	bf 93       	push	r27
    18e8:	ef 93       	push	r30
    18ea:	ff 93       	push	r31
  Timebase_ISR_Executables();
    18ec:	0e 94 2e 0c 	call	0x185c	; 0x185c <Timebase_ISR_Executables>
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	7f 91       	pop	r23
    18fe:	6f 91       	pop	r22
    1900:	5f 91       	pop	r21
    1902:	4f 91       	pop	r20
    1904:	3f 91       	pop	r19
    1906:	2f 91       	pop	r18
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <ADC_Struct_Init>:

ADC_t ADC_type;
ADC_t *ADCC;

void ADC_Struct_Init(void){
  ADCC=&ADC_type;
    1912:	8f e7       	ldi	r24, 0x7F	; 127
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	90 93 af 01 	sts	0x01AF, r25
    191a:	80 93 ae 01 	sts	0x01AE, r24
  ADCC->Calibration.Vdd=MCU_SUPPLY_VOLTAGE_VDD;
    191e:	84 ee       	ldi	r24, 0xE4	; 228
    1920:	9c e0       	ldi	r25, 0x0C	; 12
    1922:	90 93 80 01 	sts	0x0180, r25
    1926:	80 93 7f 01 	sts	0x017F, r24
  ADCC->Calibration.VdivFact=VOLTAGE_ADC_CHNL_VOLTAGE_DIVIDER;
    192a:	86 e3       	ldi	r24, 0x36	; 54
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	90 93 84 01 	sts	0x0184, r25
    1932:	80 93 83 01 	sts	0x0183, r24
  ADCC->Calibration.TempFact=80;
    1936:	80 e5       	ldi	r24, 0x50	; 80
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	90 93 86 01 	sts	0x0186, r25
    193e:	80 93 85 01 	sts	0x0185, r24
  ADCC->Calibration.VrefInt=ADC_INTERNAL_VOLTAGE_REFERENCE;
    1942:	8c e4       	ldi	r24, 0x4C	; 76
    1944:	94 e0       	ldi	r25, 0x04	; 4
    1946:	90 93 82 01 	sts	0x0182, r25
    194a:	80 93 81 01 	sts	0x0181, r24
  ADCC->Calibration.IDSensePUR=IRON_ID_SENSE_PULL_UP_RESISTOR;
    194e:	80 e1       	ldi	r24, 0x10	; 16
    1950:	97 e2       	ldi	r25, 0x27	; 39
    1952:	90 93 88 01 	sts	0x0188, r25
    1956:	80 93 87 01 	sts	0x0187, r24
  ADCC->Calibration.IDSensePDR=IRON_ID_SENSE_PULL_DOWN_RESISTOR;
    195a:	8c e5       	ldi	r24, 0x5C	; 92
    195c:	92 e1       	ldi	r25, 0x12	; 18
    195e:	90 93 8a 01 	sts	0x018A, r25
    1962:	80 93 89 01 	sts	0x0189, r24
  ADCC->Calibration.IDSenseShunt=CURRENT_SESNSE_ADC_SHUNT_RESISTOR;
    1966:	84 e6       	ldi	r24, 0x64	; 100
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	90 93 8c 01 	sts	0x018C, r25
    196e:	80 93 8b 01 	sts	0x018B, r24
  ADCC->Calibration.MaxPower=360;
    1972:	88 e6       	ldi	r24, 0x68	; 104
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	80 93 8d 01 	sts	0x018D, r24
    197e:	90 93 8e 01 	sts	0x018E, r25
    1982:	a0 93 8f 01 	sts	0x018F, r26
    1986:	b0 93 90 01 	sts	0x0190, r27
  ADCC->Channels.TSense=TEMPERATURE_SENSE_ADC_CHANNEL;
    198a:	10 92 91 01 	sts	0x0191, r1
  ADCC->Channels.VSense=VOLTAGE_SENSE_ADC_CHANNEL;
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	80 93 92 01 	sts	0x0192, r24
  ADCC->Channels.ISense=CURRENT_SENSE_ADC_CHANNEL;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 93 01 	sts	0x0193, r24
  ADCC->Channels.IronID=IRON_ID_SENSE_ADC_CHANNEL;
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	80 93 94 01 	sts	0x0194, r24
  ADCC->NSamples.Dummy=DISCARD_ADC_SAMPLE;
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	80 93 95 01 	sts	0x0195, r24
  ADCC->NSamples.TSense=TEMPERATURE_SENSE_ADC_SAMPLE;
    19a6:	80 e8       	ldi	r24, 0x80	; 128
    19a8:	80 93 96 01 	sts	0x0196, r24
  ADCC->NSamples.VSense=VOLTAGE_SENSE_ADC_SAMPLE;
    19ac:	80 e1       	ldi	r24, 0x10	; 16
    19ae:	80 93 97 01 	sts	0x0197, r24
  ADCC->NSamples.ISense=CURRENT_SESNSE_ADC_SAMPLE;
    19b2:	80 93 98 01 	sts	0x0198, r24
  ADCC->NSamples.IronID=IRON_ID_SENSE_ADC_SAMPLE;
    19b6:	80 93 99 01 	sts	0x0199, r24
  ADCC->Result.Temporary=0;
    19ba:	10 92 9a 01 	sts	0x019A, r1
    19be:	10 92 9b 01 	sts	0x019B, r1
    19c2:	10 92 9c 01 	sts	0x019C, r1
    19c6:	10 92 9d 01 	sts	0x019D, r1
  ADCC->Result.TSense=0;
    19ca:	10 92 9f 01 	sts	0x019F, r1
    19ce:	10 92 9e 01 	sts	0x019E, r1
  ADCC->Result.VSense=0;
    19d2:	10 92 a1 01 	sts	0x01A1, r1
    19d6:	10 92 a0 01 	sts	0x01A0, r1
  ADCC->Result.ISense=0;
    19da:	10 92 a3 01 	sts	0x01A3, r1
    19de:	10 92 a2 01 	sts	0x01A2, r1
  ADCC->Result.IronID=0;
    19e2:	10 92 a9 01 	sts	0x01A9, r1
    19e6:	10 92 a8 01 	sts	0x01A8, r1
  ADCC->Result.PSense=0;
    19ea:	10 92 a4 01 	sts	0x01A4, r1
    19ee:	10 92 a5 01 	sts	0x01A5, r1
    19f2:	10 92 a6 01 	sts	0x01A6, r1
    19f6:	10 92 a7 01 	sts	0x01A7, r1
  ADCC->Result.PowBar=0;
    19fa:	10 92 ab 01 	sts	0x01AB, r1
    19fe:	10 92 aa 01 	sts	0x01AA, r1
  ADCC->Result.DispTemp=0;
    1a02:	10 92 ad 01 	sts	0x01AD, r1
    1a06:	10 92 ac 01 	sts	0x01AC, r1
}
    1a0a:	08 95       	ret

00001a0c <ADC_Read>:
    LPF_Set_Alpha(3, DISP_TEMPERATURE_LPF_ALPHA);
  #endif
}

uint16_t ADC_Read(uint8_t channel){
  uint8_t admux=(0xC0|channel);
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	90 6c       	ori	r25, 0xC0	; 192
  if(ADMUX!=admux){ADMUX=admux;}
    1a10:	80 91 7c 00 	lds	r24, 0x007C
    1a14:	89 17       	cp	r24, r25
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <ADC_Read+0x10>
    1a18:	90 93 7c 00 	sts	0x007C, r25
  ADCSRA|=(1<<ADSC);
    1a1c:	80 91 7a 00 	lds	r24, 0x007A
    1a20:	80 64       	ori	r24, 0x40	; 64
    1a22:	80 93 7a 00 	sts	0x007A, r24
  while(!(ADCSRA &(1<<ADIF)));
    1a26:	80 91 7a 00 	lds	r24, 0x007A
    1a2a:	84 ff       	sbrs	r24, 4
    1a2c:	fc cf       	rjmp	.-8      	; 0x1a26 <ADC_Read+0x1a>
  ADCSRA|=(1<<ADIF);
    1a2e:	80 91 7a 00 	lds	r24, 0x007A
    1a32:	80 61       	ori	r24, 0x10	; 16
    1a34:	80 93 7a 00 	sts	0x007A, r24
  return ADCW;
    1a38:	20 91 78 00 	lds	r18, 0x0078
    1a3c:	30 91 79 00 	lds	r19, 0x0079
}
    1a40:	c9 01       	movw	r24, r18
    1a42:	08 95       	ret

00001a44 <ADC_Read_Chennel_Average>:

void ADC_Read_Chennel_Average(uint8_t channel, uint8_t nsamples){
    1a44:	bf 92       	push	r11
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	18 2f       	mov	r17, r24
    1a54:	b6 2e       	mov	r11, r22
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <ADC_Read_Chennel_Average+0x1e>
  uint32_t sum=0;
  for(uint8_t i=0;i<ADCC->NSamples.Dummy;i++){
    uint16_t dummy=ADC_Read(channel);
    1a5a:	81 2f       	mov	r24, r17
    1a5c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <ADC_Read>
  return ADCW;
}

void ADC_Read_Chennel_Average(uint8_t channel, uint8_t nsamples){
  uint32_t sum=0;
  for(uint8_t i=0;i<ADCC->NSamples.Dummy;i++){
    1a60:	0f 5f       	subi	r16, 0xFF	; 255
    1a62:	e0 91 ae 01 	lds	r30, 0x01AE
    1a66:	f0 91 af 01 	lds	r31, 0x01AF
    1a6a:	86 89       	ldd	r24, Z+22	; 0x16
    1a6c:	08 17       	cp	r16, r24
    1a6e:	a8 f3       	brcs	.-22     	; 0x1a5a <ADC_Read_Chennel_Average+0x16>
    1a70:	00 e0       	ldi	r16, 0x00	; 0
    1a72:	cc 24       	eor	r12, r12
    1a74:	dd 24       	eor	r13, r13
    1a76:	76 01       	movw	r14, r12
    1a78:	0a c0       	rjmp	.+20     	; 0x1a8e <ADC_Read_Chennel_Average+0x4a>
    uint16_t dummy=ADC_Read(channel);
    dummy=0xFF;
  }
  for(uint8_t i=0;i<nsamples;i++){
    sum+=ADC_Read(channel);
    1a7a:	81 2f       	mov	r24, r17
    1a7c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <ADC_Read>
    1a80:	a0 e0       	ldi	r26, 0x00	; 0
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	c8 0e       	add	r12, r24
    1a86:	d9 1e       	adc	r13, r25
    1a88:	ea 1e       	adc	r14, r26
    1a8a:	fb 1e       	adc	r15, r27
  uint32_t sum=0;
  for(uint8_t i=0;i<ADCC->NSamples.Dummy;i++){
    uint16_t dummy=ADC_Read(channel);
    dummy=0xFF;
  }
  for(uint8_t i=0;i<nsamples;i++){
    1a8c:	0f 5f       	subi	r16, 0xFF	; 255
    1a8e:	0b 15       	cp	r16, r11
    1a90:	a0 f3       	brcs	.-24     	; 0x1a7a <ADC_Read_Chennel_Average+0x36>
    sum+=ADC_Read(channel);
  }
  sum/=nsamples;
  ADCC->Result.Temporary=sum;
    1a92:	00 91 ae 01 	lds	r16, 0x01AE
    1a96:	10 91 af 01 	lds	r17, 0x01AF
    1a9a:	2b 2d       	mov	r18, r11
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1aaa:	f8 01       	movw	r30, r16
    1aac:	23 8f       	std	Z+27, r18	; 0x1b
    1aae:	34 8f       	std	Z+28, r19	; 0x1c
    1ab0:	45 8f       	std	Z+29, r20	; 0x1d
    1ab2:	56 8f       	std	Z+30, r21	; 0x1e
}
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	bf 90       	pop	r11
    1ac2:	08 95       	ret

00001ac4 <ADC_Read_Iron_ID_Resistor>:
  #ifdef CURRENT_SENSE_LPF_ALPHA
    ADCC->Result.ISense=(uint16_t)LPF_Get_Filtered_Value(2, ADCC->Result.ISense);
  #endif
}

void ADC_Read_Iron_ID_Resistor(void){ // Result in Ohms
    1ac4:	8f 92       	push	r8
    1ac6:	9f 92       	push	r9
    1ac8:	af 92       	push	r10
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
  uint32_t iron_id_channel_voltage_div_output_mv=0,R_equivalent=0;
  ADC_Read_Chennel_Average(ADCC->Channels.IronID, ADCC->NSamples.IronID);
    1ad8:	e0 91 ae 01 	lds	r30, 0x01AE
    1adc:	f0 91 af 01 	lds	r31, 0x01AF
    1ae0:	85 89       	ldd	r24, Z+21	; 0x15
    1ae2:	62 8d       	ldd	r22, Z+26	; 0x1a
    1ae4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <ADC_Read_Chennel_Average>
  ADCC->Result.Temporary*=ADCC->Calibration.VrefInt;
    1ae8:	80 90 ae 01 	lds	r8, 0x01AE
    1aec:	90 90 af 01 	lds	r9, 0x01AF
  ADCC->Result.Temporary/=1024;    // mV
    1af0:	f4 01       	movw	r30, r8
    1af2:	62 81       	ldd	r22, Z+2	; 0x02
    1af4:	73 81       	ldd	r23, Z+3	; 0x03
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	23 8d       	ldd	r18, Z+27	; 0x1b
    1afc:	34 8d       	ldd	r19, Z+28	; 0x1c
    1afe:	45 8d       	ldd	r20, Z+29	; 0x1d
    1b00:	56 8d       	ldd	r21, Z+30	; 0x1e
    1b02:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    1b06:	7b 01       	movw	r14, r22
    1b08:	8c 01       	movw	r16, r24
    1b0a:	8a e0       	ldi	r24, 0x0A	; 10
    1b0c:	16 95       	lsr	r17
    1b0e:	07 95       	ror	r16
    1b10:	f7 94       	ror	r15
    1b12:	e7 94       	ror	r14
    1b14:	8a 95       	dec	r24
    1b16:	d1 f7       	brne	.-12     	; 0x1b0c <ADC_Read_Iron_ID_Resistor+0x48>
  iron_id_channel_voltage_div_output_mv=ADCC->Result.Temporary;
  ADCC->Result.Temporary*=ADCC->Calibration.IDSensePUR; // Vout*Pull_up_resistor
    1b18:	f4 01       	movw	r30, r8
    1b1a:	20 85       	ldd	r18, Z+8	; 0x08
    1b1c:	31 85       	ldd	r19, Z+9	; 0x09
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	c8 01       	movw	r24, r16
    1b24:	b7 01       	movw	r22, r14
    1b26:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
  ADCC->Result.Temporary/=(ADCC->Calibration.Vdd-iron_id_channel_voltage_div_output_mv); 
    1b2a:	f4 01       	movw	r30, r8
    1b2c:	20 81       	ld	r18, Z
    1b2e:	31 81       	ldd	r19, Z+1	; 0x01
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	2e 19       	sub	r18, r14
    1b36:	3f 09       	sbc	r19, r15
    1b38:	40 0b       	sbc	r20, r16
    1b3a:	51 0b       	sbc	r21, r17
    1b3c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1b40:	79 01       	movw	r14, r18
    1b42:	8a 01       	movw	r16, r20
  // Req=Vout*Pull_up_resistor/(Vin-Vout)
  R_equivalent=ADCC->Result.Temporary;
  ADCC->Result.Temporary*=ADCC->Calibration.IDSensePDR; // Req*Pull_down_resistor
    1b44:	f4 01       	movw	r30, r8
    1b46:	a2 84       	ldd	r10, Z+10	; 0x0a
    1b48:	b3 84       	ldd	r11, Z+11	; 0x0b
    1b4a:	cc 24       	eor	r12, r12
    1b4c:	dd 24       	eor	r13, r13
    1b4e:	c8 01       	movw	r24, r16
    1b50:	b7 01       	movw	r22, r14
    1b52:	a6 01       	movw	r20, r12
    1b54:	95 01       	movw	r18, r10
    1b56:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
  ADCC->Result.Temporary/=(ADCC->Calibration.IDSensePDR-R_equivalent);
    1b5a:	ae 18       	sub	r10, r14
    1b5c:	bf 08       	sbc	r11, r15
    1b5e:	c0 0a       	sbc	r12, r16
    1b60:	d1 0a       	sbc	r13, r17
    1b62:	a6 01       	movw	r20, r12
    1b64:	95 01       	movw	r18, r10
    1b66:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1b6a:	f4 01       	movw	r30, r8
    1b6c:	23 8f       	std	Z+27, r18	; 0x1b
    1b6e:	34 8f       	std	Z+28, r19	; 0x1c
    1b70:	45 8f       	std	Z+29, r20	; 0x1d
    1b72:	56 8f       	std	Z+30, r21	; 0x1e
  // Rsense=Req*Pull_down_resistor/ (Pull_down_resistor-Req)
  ADCC->Result.IronID=(uint16_t)ADCC->Result.Temporary;
    1b74:	c9 01       	movw	r24, r18
    1b76:	21 a7       	std	Z+41, r18	; 0x29
    1b78:	92 a7       	std	Z+42, r25	; 0x2a
}
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	9f 90       	pop	r9
    1b8c:	8f 90       	pop	r8
    1b8e:	08 95       	ret

00001b90 <ADC_Read_Power_Draw>:

void ADC_Read_Power_Draw(void){         // Result in mW 
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
  uint32_t vin=ADCC->Result.VSense;
    1ba4:	80 90 ae 01 	lds	r8, 0x01AE
    1ba8:	90 90 af 01 	lds	r9, 0x01AF
    1bac:	f4 01       	movw	r30, r8
    1bae:	a1 a0       	ldd	r10, Z+33	; 0x21
    1bb0:	b2 a0       	ldd	r11, Z+34	; 0x22
    1bb2:	cc 24       	eor	r12, r12
    1bb4:	dd 24       	eor	r13, r13
  vin/=100;                             // mV/100
  uint32_t curr=ADCC->Result.ISense/10; // mA/10
    1bb6:	83 a1       	ldd	r24, Z+35	; 0x23
    1bb8:	94 a1       	ldd	r25, Z+36	; 0x24
    1bba:	6a e0       	ldi	r22, 0x0A	; 10
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodhi4>
    1bc2:	7b 01       	movw	r14, r22
    1bc4:	00 e0       	ldi	r16, 0x00	; 0
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
  curr*=vin;
  ADCC->Result.PSense=curr;
    1bc8:	c6 01       	movw	r24, r12
    1bca:	b5 01       	movw	r22, r10
    1bcc:	24 e6       	ldi	r18, 0x64	; 100
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1bd8:	c8 01       	movw	r24, r16
    1bda:	b7 01       	movw	r22, r14
    1bdc:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    1be0:	f4 01       	movw	r30, r8
    1be2:	65 a3       	std	Z+37, r22	; 0x25
    1be4:	76 a3       	std	Z+38, r23	; 0x26
    1be6:	87 a3       	std	Z+39, r24	; 0x27
    1be8:	90 a7       	std	Z+40, r25	; 0x28
}
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	af 90       	pop	r10
    1bfa:	9f 90       	pop	r9
    1bfc:	8f 90       	pop	r8
    1bfe:	08 95       	ret

00001c00 <ADC_Calculate_Power_Bar>:

void ADC_Calculate_Power_Bar(void){
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
  uint32_t bar_val=ADCC->Result.PSense*100; //max 100%
    1c04:	c0 91 ae 01 	lds	r28, 0x01AE
    1c08:	d0 91 af 01 	lds	r29, 0x01AF
    1c0c:	6d a1       	ldd	r22, Y+37	; 0x25
    1c0e:	7e a1       	ldd	r23, Y+38	; 0x26
    1c10:	8f a1       	ldd	r24, Y+39	; 0x27
    1c12:	98 a5       	ldd	r25, Y+40	; 0x28
    1c14:	24 e6       	ldi	r18, 0x64	; 100
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
  bar_val/=ADCC->Calibration.MaxPower;
  ADCC->Result.PowBar=(uint16_t)bar_val;
    1c20:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c22:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c24:	48 89       	ldd	r20, Y+16	; 0x10
    1c26:	59 89       	ldd	r21, Y+17	; 0x11
    1c28:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1c2c:	3c a7       	std	Y+44, r19	; 0x2c
    1c2e:	2b a7       	std	Y+43, r18	; 0x2b
  if(ADCC->Result.PowBar>100){
    1c30:	25 36       	cpi	r18, 0x65	; 101
    1c32:	31 05       	cpc	r19, r1
    1c34:	20 f0       	brcs	.+8      	; 0x1c3e <ADC_Calculate_Power_Bar+0x3e>
    ADCC->Result.PowBar=100;
    1c36:	84 e6       	ldi	r24, 0x64	; 100
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c a7       	std	Y+44, r25	; 0x2c
    1c3c:	8b a7       	std	Y+43, r24	; 0x2b
  }
}
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <ADC_Set_Max_Power>:

void ADC_Set_Max_Power(uint32_t power){
  ADCC->Calibration.MaxPower=power;
    1c44:	e0 91 ae 01 	lds	r30, 0x01AE
    1c48:	f0 91 af 01 	lds	r31, 0x01AF
    1c4c:	66 87       	std	Z+14, r22	; 0x0e
    1c4e:	77 87       	std	Z+15, r23	; 0x0f
    1c50:	80 8b       	std	Z+16, r24	; 0x10
    1c52:	91 8b       	std	Z+17, r25	; 0x11
}
    1c54:	08 95       	ret

00001c56 <ADC_Set_Temperature_Factor>:

void ADC_Set_Temperature_Factor(uint16_t factor){
  ADCC->Calibration.TempFact=factor;
    1c56:	e0 91 ae 01 	lds	r30, 0x01AE
    1c5a:	f0 91 af 01 	lds	r31, 0x01AF
    1c5e:	97 83       	std	Z+7, r25	; 0x07
    1c60:	86 83       	std	Z+6, r24	; 0x06
}
    1c62:	08 95       	ret

00001c64 <ADC_Get_Temperature>:

uint16_t ADC_Get_Temperature(void){
    1c64:	e0 91 ae 01 	lds	r30, 0x01AE
    1c68:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.TSense;
}
    1c6c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c6e:	90 a1       	ldd	r25, Z+32	; 0x20
    1c70:	08 95       	ret

00001c72 <ADC_Get_Input_Voltage>:

uint16_t ADC_Get_Input_Voltage(void){
    1c72:	e0 91 ae 01 	lds	r30, 0x01AE
    1c76:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.VSense;
}
    1c7a:	81 a1       	ldd	r24, Z+33	; 0x21
    1c7c:	92 a1       	ldd	r25, Z+34	; 0x22
    1c7e:	08 95       	ret

00001c80 <ADC_Get_Current>:

uint16_t ADC_Get_Current(void){
    1c80:	e0 91 ae 01 	lds	r30, 0x01AE
    1c84:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.ISense;
}
    1c88:	83 a1       	ldd	r24, Z+35	; 0x23
    1c8a:	94 a1       	ldd	r25, Z+36	; 0x24
    1c8c:	08 95       	ret

00001c8e <ADC_Get_Iron_ID_Resistor>:

uint16_t ADC_Get_Iron_ID_Resistor(void){
    1c8e:	e0 91 ae 01 	lds	r30, 0x01AE
    1c92:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.IronID;
}
    1c96:	81 a5       	ldd	r24, Z+41	; 0x29
    1c98:	92 a5       	ldd	r25, Z+42	; 0x2a
    1c9a:	08 95       	ret

00001c9c <ADC_Get_Power_Draw>:

uint16_t ADC_Get_Power_Draw(void){
    1c9c:	e0 91 ae 01 	lds	r30, 0x01AE
    1ca0:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.PSense;
}
    1ca4:	85 a1       	ldd	r24, Z+37	; 0x25
    1ca6:	96 a1       	ldd	r25, Z+38	; 0x26
    1ca8:	08 95       	ret

00001caa <ADC_Get_Power_Bar>:

uint16_t ADC_Get_Power_Bar(void){
    1caa:	e0 91 ae 01 	lds	r30, 0x01AE
    1cae:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.PowBar;
}
    1cb2:	83 a5       	ldd	r24, Z+43	; 0x2b
    1cb4:	94 a5       	ldd	r25, Z+44	; 0x2c
    1cb6:	08 95       	ret

00001cb8 <ADC_Get_Display_Temperature>:

uint16_t ADC_Get_Display_Temperature(void){
    1cb8:	e0 91 ae 01 	lds	r30, 0x01AE
    1cbc:	f0 91 af 01 	lds	r31, 0x01AF
  return ADCC->Result.DispTemp;
    1cc0:	85 a5       	ldd	r24, Z+45	; 0x2d
    1cc2:	96 a5       	ldd	r25, Z+46	; 0x2e
    1cc4:	08 95       	ret

00001cc6 <ADC_Read_Current>:
  #ifdef VOLTAGE_SENSE_LPF_ALPHA
    ADCC->Result.VSense=(uint16_t)LPF_Get_Filtered_Value(1, ADCC->Result.VSense);
  #endif
}

void ADC_Read_Current(void){       // Result in mA
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
  ADC_Read_Chennel_Average(ADCC->Channels.ISense, ADCC->NSamples.ISense);
    1cca:	e0 91 ae 01 	lds	r30, 0x01AE
    1cce:	f0 91 af 01 	lds	r31, 0x01AF
    1cd2:	84 89       	ldd	r24, Z+20	; 0x14
    1cd4:	61 8d       	ldd	r22, Z+25	; 0x19
    1cd6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <ADC_Read_Chennel_Average>
  ADCC->Result.Temporary*=ADCC->Calibration.VrefInt;
    1cda:	00 91 ae 01 	lds	r16, 0x01AE
    1cde:	10 91 af 01 	lds	r17, 0x01AF
  ADCC->Result.Temporary/=1024;    // mV
  ADCC->Result.Temporary*=1000;    // uV
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	62 81       	ldd	r22, Z+2	; 0x02
    1ce6:	73 81       	ldd	r23, Z+3	; 0x03
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	23 8d       	ldd	r18, Z+27	; 0x1b
    1cee:	34 8d       	ldd	r19, Z+28	; 0x1c
    1cf0:	45 8d       	ldd	r20, Z+29	; 0x1d
    1cf2:	56 8d       	ldd	r21, Z+30	; 0x1e
    1cf4:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    1cf8:	2a e0       	ldi	r18, 0x0A	; 10
    1cfa:	96 95       	lsr	r25
    1cfc:	87 95       	ror	r24
    1cfe:	77 95       	ror	r23
    1d00:	67 95       	ror	r22
    1d02:	2a 95       	dec	r18
    1d04:	d1 f7       	brne	.-12     	; 0x1cfa <ADC_Read_Current+0x34>
    1d06:	28 ee       	ldi	r18, 0xE8	; 232
    1d08:	33 e0       	ldi	r19, 0x03	; 3
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
  ADCC->Result.Temporary/=ADCC->Calibration.IDSenseShunt; // uV/mOhm=mA
    1d12:	f8 01       	movw	r30, r16
    1d14:	24 85       	ldd	r18, Z+12	; 0x0c
    1d16:	35 85       	ldd	r19, Z+13	; 0x0d
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1d20:	f8 01       	movw	r30, r16
    1d22:	23 8f       	std	Z+27, r18	; 0x1b
    1d24:	34 8f       	std	Z+28, r19	; 0x1c
    1d26:	45 8f       	std	Z+29, r20	; 0x1d
    1d28:	56 8f       	std	Z+30, r21	; 0x1e
  ADCC->Result.ISense=(uint16_t)ADCC->Result.Temporary;
    1d2a:	a9 01       	movw	r20, r18
    1d2c:	34 a3       	std	Z+36, r19	; 0x24
    1d2e:	23 a3       	std	Z+35, r18	; 0x23
  #ifdef CURRENT_SENSE_LPF_ALPHA
    ADCC->Result.ISense=(uint16_t)LPF_Get_Filtered_Value(2, ADCC->Result.ISense);
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LPF_Get_Filtered_Value>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	74 a3       	std	Z+36, r23	; 0x24
    1d3e:	63 a3       	std	Z+35, r22	; 0x23
  #endif
}
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <ADC_Read_Input_Voltage>:
  #ifdef DISP_TEMPERATURE_LPF_ALPHA
    ADCC->Result.DispTemp=(uint16_t)LPF_Get_Filtered_Value(3, ADCC->Result.TSense);
  #endif
}

void ADC_Read_Input_Voltage(void){ // Result in mV
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
  ADC_Read_Chennel_Average(ADCC->Channels.VSense, ADCC->NSamples.VSense);
    1d4a:	e0 91 ae 01 	lds	r30, 0x01AE
    1d4e:	f0 91 af 01 	lds	r31, 0x01AF
    1d52:	83 89       	ldd	r24, Z+19	; 0x13
    1d54:	60 8d       	ldd	r22, Z+24	; 0x18
    1d56:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <ADC_Read_Chennel_Average>
  ADCC->Result.Temporary*=ADCC->Calibration.VrefInt;
    1d5a:	00 91 ae 01 	lds	r16, 0x01AE
    1d5e:	10 91 af 01 	lds	r17, 0x01AF
  ADCC->Result.Temporary/=1024;    // mV
    1d62:	f8 01       	movw	r30, r16
    1d64:	62 81       	ldd	r22, Z+2	; 0x02
    1d66:	73 81       	ldd	r23, Z+3	; 0x03
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1d6e:	34 8d       	ldd	r19, Z+28	; 0x1c
    1d70:	45 8d       	ldd	r20, Z+29	; 0x1d
    1d72:	56 8d       	ldd	r21, Z+30	; 0x1e
    1d74:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    1d78:	3a e0       	ldi	r19, 0x0A	; 10
    1d7a:	96 95       	lsr	r25
    1d7c:	87 95       	ror	r24
    1d7e:	77 95       	ror	r23
    1d80:	67 95       	ror	r22
    1d82:	3a 95       	dec	r19
    1d84:	d1 f7       	brne	.-12     	; 0x1d7a <ADC_Read_Input_Voltage+0x34>
  ADCC->Result.Temporary*=ADCC->Calibration.VdivFact;
  ADCC->Result.Temporary/=10;      // mV*voltage_divider_factorx10/10=Input_mV
    1d86:	f8 01       	movw	r30, r16
    1d88:	24 81       	ldd	r18, Z+4	; 0x04
    1d8a:	35 81       	ldd	r19, Z+5	; 0x05
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    1d94:	2a e0       	ldi	r18, 0x0A	; 10
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1da0:	f8 01       	movw	r30, r16
    1da2:	23 8f       	std	Z+27, r18	; 0x1b
    1da4:	34 8f       	std	Z+28, r19	; 0x1c
    1da6:	45 8f       	std	Z+29, r20	; 0x1d
    1da8:	56 8f       	std	Z+30, r21	; 0x1e
  ADCC->Result.VSense=(uint16_t)ADCC->Result.Temporary;
    1daa:	a9 01       	movw	r20, r18
    1dac:	32 a3       	std	Z+34, r19	; 0x22
    1dae:	21 a3       	std	Z+33, r18	; 0x21
  #ifdef VOLTAGE_SENSE_LPF_ALPHA
    ADCC->Result.VSense=(uint16_t)LPF_Get_Filtered_Value(1, ADCC->Result.VSense);
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LPF_Get_Filtered_Value>
    1dba:	f8 01       	movw	r30, r16
    1dbc:	72 a3       	std	Z+34, r23	; 0x22
    1dbe:	61 a3       	std	Z+33, r22	; 0x21
  #endif
}
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <ADC_Read_Temperature>:
  }
  sum/=nsamples;
  ADCC->Result.Temporary=sum;
}

void ADC_Read_Temperature(void){
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
  ADC_Read_Chennel_Average(ADCC->Channels.TSense, ADCC->NSamples.TSense);
    1dca:	e0 91 ae 01 	lds	r30, 0x01AE
    1dce:	f0 91 af 01 	lds	r31, 0x01AF
    1dd2:	82 89       	ldd	r24, Z+18	; 0x12
    1dd4:	67 89       	ldd	r22, Z+23	; 0x17
    1dd6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <ADC_Read_Chennel_Average>
  ADCC->Result.Temporary*=ADCC->Calibration.TempFact;
    1dda:	00 91 ae 01 	lds	r16, 0x01AE
    1dde:	10 91 af 01 	lds	r17, 0x01AF
  ADCC->Result.Temporary/=100;
    1de2:	f8 01       	movw	r30, r16
    1de4:	66 81       	ldd	r22, Z+6	; 0x06
    1de6:	77 81       	ldd	r23, Z+7	; 0x07
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	23 8d       	ldd	r18, Z+27	; 0x1b
    1dee:	34 8d       	ldd	r19, Z+28	; 0x1c
    1df0:	45 8d       	ldd	r20, Z+29	; 0x1d
    1df2:	56 8d       	ldd	r21, Z+30	; 0x1e
    1df4:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    1df8:	24 e6       	ldi	r18, 0x64	; 100
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__udivmodsi4>
    1e04:	f8 01       	movw	r30, r16
    1e06:	23 8f       	std	Z+27, r18	; 0x1b
    1e08:	34 8f       	std	Z+28, r19	; 0x1c
    1e0a:	45 8f       	std	Z+29, r20	; 0x1d
    1e0c:	56 8f       	std	Z+30, r21	; 0x1e
  if(ADCC->Result.Temporary<0){ADCC->Result.Temporary=0;}
  ADCC->Result.TSense=(uint16_t)ADCC->Result.Temporary;
    1e0e:	a9 01       	movw	r20, r18
    1e10:	30 a3       	std	Z+32, r19	; 0x20
    1e12:	27 8f       	std	Z+31, r18	; 0x1f
  #ifdef TEMPERATURE_SENSE_LPF_ALPHA
    ADCC->Result.TSense=(uint16_t)LPF_Get_Filtered_Value(0, ADCC->Result.TSense);
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LPF_Get_Filtered_Value>
    1e1e:	f8 01       	movw	r30, r16
    1e20:	70 a3       	std	Z+32, r23	; 0x20
    1e22:	67 8f       	std	Z+31, r22	; 0x1f
  #endif
  
  #ifdef DISP_TEMPERATURE_LPF_ALPHA
    ADCC->Result.DispTemp=(uint16_t)LPF_Get_Filtered_Value(3, ADCC->Result.TSense);
    1e24:	00 91 ae 01 	lds	r16, 0x01AE
    1e28:	10 91 af 01 	lds	r17, 0x01AF
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	47 8d       	ldd	r20, Z+31	; 0x1f
    1e30:	50 a1       	ldd	r21, Z+32	; 0x20
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LPF_Get_Filtered_Value>
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	76 a7       	std	Z+46, r23	; 0x2e
    1e40:	65 a7       	std	Z+45, r22	; 0x2d
  #endif
}
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <ADC_Init>:
  ADCC->Result.PowBar=0;
  ADCC->Result.DispTemp=0;
}

void ADC_Init(void){
  ADC_Struct_Init();
    1e48:	0e 94 89 0c 	call	0x1912	; 0x1912 <ADC_Struct_Init>
  ADMUX  =(1<<REFS0)|(1<<REFS1);
    1e4c:	80 ec       	ldi	r24, 0xC0	; 192
    1e4e:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA =(1<<ADPS1)|(1<<ADPS2);
    1e52:	ea e7       	ldi	r30, 0x7A	; 122
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	86 e0       	ldi	r24, 0x06	; 6
    1e58:	80 83       	st	Z, r24
  ADCSRA|=(1<<ADEN);
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 68       	ori	r24, 0x80	; 128
    1e5e:	80 83       	st	Z, r24
  LPF_Init();
    1e60:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LPF_Init>
  
  #ifdef TEMPERATURE_SENSE_LPF_ALPHA
    LPF_Set_Alpha(0, TEMPERATURE_SENSE_LPF_ALPHA);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	6a e5       	ldi	r22, 0x5A	; 90
    1e68:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LPF_Set_Alpha>
  #endif
  
  #ifdef VOLTAGE_SENSE_LPF_ALPHA
    LPF_Set_Alpha(1, VOLTAGE_SENSE_LPF_ALPHA);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	6a e5       	ldi	r22, 0x5A	; 90
    1e70:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LPF_Set_Alpha>
  #endif
  
  #ifdef CURRENT_SENSE_LPF_ALPHA
    LPF_Set_Alpha(2, CURRENT_SENSE_LPF_ALPHA);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	66 e4       	ldi	r22, 0x46	; 70
    1e78:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LPF_Set_Alpha>
  #endif
  
  #ifdef DISP_TEMPERATURE_LPF_ALPHA
    LPF_Set_Alpha(3, DISP_TEMPERATURE_LPF_ALPHA);
    1e7c:	83 e0       	ldi	r24, 0x03	; 3
    1e7e:	62 e3       	ldi	r22, 0x32	; 50
    1e80:	0e 94 5e 10 	call	0x20bc	; 0x20bc <LPF_Set_Alpha>
  #endif
}
    1e84:	08 95       	ret

00001e86 <PWM_Struct_Init>:

heater_t HEATER_type;
heater_t *HEATER;

void PWM_Struct_Init(void){
  HEATER = &HEATER_type;
    1e86:	82 eb       	ldi	r24, 0xB2	; 178
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	90 93 b1 01 	sts	0x01B1, r25
    1e8e:	80 93 b0 01 	sts	0x01B0, r24
  HEATER->PWM.MaxValue = PWM_MAX_VAL;
    1e92:	87 e5       	ldi	r24, 0x57	; 87
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	90 93 b6 01 	sts	0x01B6, r25
    1e9a:	80 93 b5 01 	sts	0x01B5, r24
  HEATER->PWM.TopValue = ICR1_TOP_VAL;
    1e9e:	88 e5       	ldi	r24, 0x58	; 88
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	90 93 b4 01 	sts	0x01B4, r25
    1ea6:	80 93 b3 01 	sts	0x01B3, r24
  HEATER->PWM.CurrentValue = OCR1_INIT_VAL;
    1eaa:	10 92 b8 01 	sts	0x01B8, r1
    1eae:	10 92 b7 01 	sts	0x01B7, r1
  HEATER->Status = 0;
    1eb2:	10 92 b2 01 	sts	0x01B2, r1
}
    1eb6:	08 95       	ret

00001eb8 <PWM_Reg_Init>:
  
void PWM_Reg_Init(void){
  DDRB   |= (1<<1);
    1eb8:	21 9a       	sbi	0x04, 1	; 4
  PORTB  &=~(1<<1);
    1eba:	29 98       	cbi	0x05, 1	; 5
  TCCR1A  = (1<<COM1A1)|(1<<WGM11);
    1ebc:	e0 e8       	ldi	r30, 0x80	; 128
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	82 e8       	ldi	r24, 0x82	; 130
    1ec2:	80 83       	st	Z, r24
  TCCR1B  = (1<<CS10)|(1<<WGM12)|(1<<WGM13);
    1ec4:	89 e1       	ldi	r24, 0x19	; 25
    1ec6:	80 93 81 00 	sts	0x0081, r24
  ICR1    = ICR1_TOP_VAL;
    1eca:	88 e5       	ldi	r24, 0x58	; 88
    1ecc:	92 e0       	ldi	r25, 0x02	; 2
    1ece:	90 93 87 00 	sts	0x0087, r25
    1ed2:	80 93 86 00 	sts	0x0086, r24
  OCR1A   = OCR1_INIT_VAL;
    1ed6:	10 92 89 00 	sts	0x0089, r1
    1eda:	10 92 88 00 	sts	0x0088, r1
  TCCR1A &=~(1<<COM1A1);
    1ede:	80 81       	ld	r24, Z
    1ee0:	8f 77       	andi	r24, 0x7F	; 127
    1ee2:	80 83       	st	Z, r24
}
    1ee4:	08 95       	ret

00001ee6 <Iron_Heater_On>:


void Iron_Heater_On(uint16_t val){
    1ee6:	9c 01       	movw	r18, r24
  if( (HEATER->Status == 0) && (val > 0) ){
    1ee8:	e0 91 b0 01 	lds	r30, 0x01B0
    1eec:	f0 91 b1 01 	lds	r31, 0x01B1
    1ef0:	80 81       	ld	r24, Z
    1ef2:	88 23       	and	r24, r24
    1ef4:	b1 f4       	brne	.+44     	; 0x1f22 <Iron_Heater_On+0x3c>
    1ef6:	21 15       	cp	r18, r1
    1ef8:	31 05       	cpc	r19, r1
    1efa:	99 f0       	breq	.+38     	; 0x1f22 <Iron_Heater_On+0x3c>
    1efc:	43 81       	ldd	r20, Z+3	; 0x03
    1efe:	54 81       	ldd	r21, Z+4	; 0x04
    1f00:	42 17       	cp	r20, r18
    1f02:	53 07       	cpc	r21, r19
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <Iron_Heater_On+0x22>
    1f06:	9a 01       	movw	r18, r20
    if(val > HEATER->PWM.MaxValue){
	  val = HEATER->PWM.MaxValue;
	}
    OCR1A   = val;
    1f08:	30 93 89 00 	sts	0x0089, r19
    1f0c:	20 93 88 00 	sts	0x0088, r18
    TCCR1A |= (1<<COM1A1);
    1f10:	80 91 80 00 	lds	r24, 0x0080
    1f14:	80 68       	ori	r24, 0x80	; 128
    1f16:	80 93 80 00 	sts	0x0080, r24
	HEATER->PWM.CurrentValue = val;
    1f1a:	36 83       	std	Z+6, r19	; 0x06
    1f1c:	25 83       	std	Z+5, r18	; 0x05
	HEATER->Status = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 83       	st	Z, r24
    1f22:	08 95       	ret

00001f24 <Iron_Heater_Off>:
  }
}


void Iron_Heater_Off(void){
  if(HEATER->Status == 1){
    1f24:	e0 91 b0 01 	lds	r30, 0x01B0
    1f28:	f0 91 b1 01 	lds	r31, 0x01B1
    1f2c:	80 81       	ld	r24, Z
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	61 f4       	brne	.+24     	; 0x1f4a <Iron_Heater_Off+0x26>
    TCCR1A &=~(1<<COM1A1);
    1f32:	80 91 80 00 	lds	r24, 0x0080
    1f36:	8f 77       	andi	r24, 0x7F	; 127
    1f38:	80 93 80 00 	sts	0x0080, r24
	OCR1A   = 0;
    1f3c:	10 92 89 00 	sts	0x0089, r1
    1f40:	10 92 88 00 	sts	0x0088, r1
	HEATER->PWM.CurrentValue = 0;
    1f44:	16 82       	std	Z+6, r1	; 0x06
    1f46:	15 82       	std	Z+5, r1	; 0x05
	HEATER->Status = 0;
    1f48:	10 82       	st	Z, r1
    1f4a:	08 95       	ret

00001f4c <Iron_Set_Max_PWM>:
}



void Iron_Set_Max_PWM(uint16_t val){
  HEATER->PWM.MaxValue = val;
    1f4c:	e0 91 b0 01 	lds	r30, 0x01B0
    1f50:	f0 91 b1 01 	lds	r31, 0x01B1
    1f54:	94 83       	std	Z+4, r25	; 0x04
    1f56:	83 83       	std	Z+3, r24	; 0x03
}
    1f58:	08 95       	ret

00001f5a <Iron_Set_Max_PWM_Div_Fact>:

void Iron_Set_Max_PWM_Div_Fact(uint16_t val){
    1f5a:	bc 01       	movw	r22, r24
  HEATER->PWM.MaxValue = PWM_MAX_VAL/val;
    1f5c:	e0 91 b0 01 	lds	r30, 0x01B0
    1f60:	f0 91 b1 01 	lds	r31, 0x01B1
    1f64:	87 e5       	ldi	r24, 0x57	; 87
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodhi4>
    1f6c:	74 83       	std	Z+4, r23	; 0x04
    1f6e:	63 83       	std	Z+3, r22	; 0x03
}
    1f70:	08 95       	ret

00001f72 <Iron_Set_Max_PWM_Full>:

void Iron_Set_Max_PWM_Full(void){
  HEATER->PWM.MaxValue = PWM_MAX_VAL;
    1f72:	e0 91 b0 01 	lds	r30, 0x01B0
    1f76:	f0 91 b1 01 	lds	r31, 0x01B1
    1f7a:	87 e5       	ldi	r24, 0x57	; 87
    1f7c:	92 e0       	ldi	r25, 0x02	; 2
    1f7e:	94 83       	std	Z+4, r25	; 0x04
    1f80:	83 83       	std	Z+3, r24	; 0x03
}
    1f82:	08 95       	ret

00001f84 <Iron_Set_Max_PWM_Half>:

void Iron_Set_Max_PWM_Half(void){
  HEATER->PWM.MaxValue = PWM_MAX_VAL/2;
    1f84:	e0 91 b0 01 	lds	r30, 0x01B0
    1f88:	f0 91 b1 01 	lds	r31, 0x01B1
    1f8c:	8b e2       	ldi	r24, 0x2B	; 43
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	94 83       	std	Z+4, r25	; 0x04
    1f92:	83 83       	std	Z+3, r24	; 0x03
}
    1f94:	08 95       	ret

00001f96 <Iron_Set_Max_PWM_Quarter>:

void Iron_Set_Max_PWM_Quarter(void){
  HEATER->PWM.MaxValue = PWM_MAX_VAL/4;
    1f96:	e0 91 b0 01 	lds	r30, 0x01B0
    1f9a:	f0 91 b1 01 	lds	r31, 0x01B1
    1f9e:	85 e9       	ldi	r24, 0x95	; 149
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	94 83       	std	Z+4, r25	; 0x04
    1fa4:	83 83       	std	Z+3, r24	; 0x03
}
    1fa6:	08 95       	ret

00001fa8 <Iron_Set_Max_PWM_One_Eighth>:

void Iron_Set_Max_PWM_One_Eighth(void){
  HEATER->PWM.MaxValue = PWM_MAX_VAL/8;
    1fa8:	e0 91 b0 01 	lds	r30, 0x01B0
    1fac:	f0 91 b1 01 	lds	r31, 0x01B1
    1fb0:	8a e4       	ldi	r24, 0x4A	; 74
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	94 83       	std	Z+4, r25	; 0x04
    1fb6:	83 83       	std	Z+3, r24	; 0x03
}
    1fb8:	08 95       	ret

00001fba <Iron_Get_PWM>:

uint16_t Iron_Get_PWM(void){
    1fba:	e0 91 b0 01 	lds	r30, 0x01B0
    1fbe:	f0 91 b1 01 	lds	r31, 0x01B1
  return HEATER->PWM.CurrentValue;
}
    1fc2:	85 81       	ldd	r24, Z+5	; 0x05
    1fc4:	96 81       	ldd	r25, Z+6	; 0x06
    1fc6:	08 95       	ret

00001fc8 <Iron_Get_Max_PWM>:


uint16_t Iron_Get_Max_PWM(void){
    1fc8:	e0 91 b0 01 	lds	r30, 0x01B0
    1fcc:	f0 91 b1 01 	lds	r31, 0x01B1
  return HEATER->PWM.MaxValue;
}
    1fd0:	83 81       	ldd	r24, Z+3	; 0x03
    1fd2:	94 81       	ldd	r25, Z+4	; 0x04
    1fd4:	08 95       	ret

00001fd6 <PWM_Init>:

heater_t HEATER_type;
heater_t *HEATER;

void PWM_Struct_Init(void){
  HEATER = &HEATER_type;
    1fd6:	82 eb       	ldi	r24, 0xB2	; 178
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	90 93 b1 01 	sts	0x01B1, r25
    1fde:	80 93 b0 01 	sts	0x01B0, r24
  HEATER->PWM.MaxValue = PWM_MAX_VAL;
    1fe2:	87 e5       	ldi	r24, 0x57	; 87
    1fe4:	92 e0       	ldi	r25, 0x02	; 2
    1fe6:	90 93 b6 01 	sts	0x01B6, r25
    1fea:	80 93 b5 01 	sts	0x01B5, r24
  HEATER->PWM.TopValue = ICR1_TOP_VAL;
    1fee:	88 e5       	ldi	r24, 0x58	; 88
    1ff0:	92 e0       	ldi	r25, 0x02	; 2
    1ff2:	90 93 b4 01 	sts	0x01B4, r25
    1ff6:	80 93 b3 01 	sts	0x01B3, r24
  HEATER->PWM.CurrentValue = OCR1_INIT_VAL;
    1ffa:	10 92 b8 01 	sts	0x01B8, r1
    1ffe:	10 92 b7 01 	sts	0x01B7, r1
  HEATER->Status = 0;
    2002:	10 92 b2 01 	sts	0x01B2, r1



void PWM_Init(void){
  PWM_Struct_Init();
  PWM_Reg_Init();
    2006:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <PWM_Reg_Init>
    200a:	08 95       	ret

0000200c <Iron_Heater_Control>:
  }
}


void Iron_Heater_Control(void){
  if(ADC_Get_Temperature()>ABSOLUTE_MAX_TEMP){
    200c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <ADC_Get_Temperature>
    2010:	8d 57       	subi	r24, 0x7D	; 125
    2012:	91 40       	sbci	r25, 0x01	; 1
    2014:	18 f0       	brcs	.+6      	; 0x201c <Iron_Heater_Control+0x10>
    Iron_Heater_Off();
    2016:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Iron_Heater_Off>
    201a:	08 95       	ret
  }else{
    Iron_Heater_On(PID_Get_Output_NonNegative());
    201c:	0e 94 15 13 	call	0x262a	; 0x262a <PID_Get_Output_NonNegative>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Iron_Heater_On>
    2028:	08 95       	ret

0000202a <LPF_Struct_Init>:

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
    202a:	10 92 b9 01 	sts	0x01B9, r1
    LPF[i].Input = 0;
    202e:	10 92 ba 01 	sts	0x01BA, r1
    2032:	10 92 bb 01 	sts	0x01BB, r1
    2036:	10 92 bc 01 	sts	0x01BC, r1
    203a:	10 92 bd 01 	sts	0x01BD, r1
	LPF[i].Output = 0;
    203e:	10 92 be 01 	sts	0x01BE, r1
    2042:	10 92 bf 01 	sts	0x01BF, r1
    2046:	10 92 c0 01 	sts	0x01C0, r1
    204a:	10 92 c1 01 	sts	0x01C1, r1

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
    204e:	10 92 c2 01 	sts	0x01C2, r1
    LPF[i].Input = 0;
    2052:	10 92 c3 01 	sts	0x01C3, r1
    2056:	10 92 c4 01 	sts	0x01C4, r1
    205a:	10 92 c5 01 	sts	0x01C5, r1
    205e:	10 92 c6 01 	sts	0x01C6, r1
	LPF[i].Output = 0;
    2062:	10 92 c7 01 	sts	0x01C7, r1
    2066:	10 92 c8 01 	sts	0x01C8, r1
    206a:	10 92 c9 01 	sts	0x01C9, r1
    206e:	10 92 ca 01 	sts	0x01CA, r1

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
    2072:	10 92 cb 01 	sts	0x01CB, r1
    LPF[i].Input = 0;
    2076:	10 92 cc 01 	sts	0x01CC, r1
    207a:	10 92 cd 01 	sts	0x01CD, r1
    207e:	10 92 ce 01 	sts	0x01CE, r1
    2082:	10 92 cf 01 	sts	0x01CF, r1
	LPF[i].Output = 0;
    2086:	10 92 d0 01 	sts	0x01D0, r1
    208a:	10 92 d1 01 	sts	0x01D1, r1
    208e:	10 92 d2 01 	sts	0x01D2, r1
    2092:	10 92 d3 01 	sts	0x01D3, r1

lpf_t LPF[NUMBER_OF_LPF];

void LPF_Struct_Init(void){
  for(uint8_t i=0; i<NUMBER_OF_LPF; i++){
    LPF[i].Alpha = 0;
    2096:	10 92 d4 01 	sts	0x01D4, r1
    LPF[i].Input = 0;
    209a:	10 92 d5 01 	sts	0x01D5, r1
    209e:	10 92 d6 01 	sts	0x01D6, r1
    20a2:	10 92 d7 01 	sts	0x01D7, r1
    20a6:	10 92 d8 01 	sts	0x01D8, r1
	LPF[i].Output = 0;
    20aa:	10 92 d9 01 	sts	0x01D9, r1
    20ae:	10 92 da 01 	sts	0x01DA, r1
    20b2:	10 92 db 01 	sts	0x01DB, r1
    20b6:	10 92 dc 01 	sts	0x01DC, r1
  }
}
    20ba:	08 95       	ret

000020bc <LPF_Set_Alpha>:

void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	fc 01       	movw	r30, r24
    20c0:	23 e0       	ldi	r18, 0x03	; 3
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	2a 95       	dec	r18
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <LPF_Set_Alpha+0x6>
    20ca:	e8 0f       	add	r30, r24
    20cc:	f9 1f       	adc	r31, r25
    20ce:	e7 54       	subi	r30, 0x47	; 71
    20d0:	fe 4f       	sbci	r31, 0xFE	; 254
    20d2:	60 83       	st	Z, r22
}
    20d4:	08 95       	ret

000020d6 <LPF_Get_Alpha>:

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	fc 01       	movw	r30, r24
    20da:	33 e0       	ldi	r19, 0x03	; 3
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	3a 95       	dec	r19
    20e2:	e1 f7       	brne	.-8      	; 0x20dc <LPF_Get_Alpha+0x6>
    20e4:	e8 0f       	add	r30, r24
    20e6:	f9 1f       	adc	r31, r25
    20e8:	e7 54       	subi	r30, 0x47	; 71
    20ea:	fe 4f       	sbci	r31, 0xFE	; 254
  return LPF[lpf_index].Alpha;
}
    20ec:	80 81       	ld	r24, Z
    20ee:	08 95       	ret

000020f0 <LPF_Get_Filtered_Value>:

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
    20f0:	6f 92       	push	r6
    20f2:	7f 92       	push	r7
    20f4:	8f 92       	push	r8
    20f6:	9f 92       	push	r9
    20f8:	af 92       	push	r10
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	5a 01       	movw	r10, r20
    210a:	6b 01       	movw	r12, r22
void LPF_Set_Alpha(uint8_t lpf_index, uint8_t val){
  LPF[lpf_index].Alpha = val;
}

uint8_t LPF_Get_Alpha(uint8_t lpf_index){
  return LPF[lpf_index].Alpha;
    210c:	90 e0       	ldi	r25, 0x00	; 0
}

int32_t LPF_Get_Filtered_Value(uint8_t lpf_index, int32_t val){
  int32_t tmp1=LPF_Get_Alpha(lpf_index);
    210e:	4c 01       	movw	r8, r24
    2110:	73 e0       	ldi	r23, 0x03	; 3
    2112:	88 0c       	add	r8, r8
    2114:	99 1c       	adc	r9, r9
    2116:	7a 95       	dec	r23
    2118:	e1 f7       	brne	.-8      	; 0x2112 <LPF_Get_Filtered_Value+0x22>
    211a:	88 0e       	add	r8, r24
    211c:	99 1e       	adc	r9, r25
    211e:	89 eb       	ldi	r24, 0xB9	; 185
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	88 0e       	add	r8, r24
    2124:	99 1e       	adc	r9, r25
    2126:	f4 01       	movw	r30, r8
    2128:	20 81       	ld	r18, Z
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
  tmp1*=val;
  int32_t tmp2=100;
  tmp2-=LPF_Get_Alpha(lpf_index);
    2130:	64 e6       	ldi	r22, 0x64	; 100
    2132:	e6 2e       	mov	r14, r22
    2134:	f1 2c       	mov	r15, r1
    2136:	01 2d       	mov	r16, r1
    2138:	11 2d       	mov	r17, r1
    213a:	e2 1a       	sub	r14, r18
    213c:	f3 0a       	sbc	r15, r19
    213e:	04 0b       	sbc	r16, r20
    2140:	15 0b       	sbc	r17, r21
  tmp2*=LPF[lpf_index].Output ;
  LPF[lpf_index].Output = tmp1 + tmp2;
  LPF[lpf_index].Output/=100;
    2142:	c6 01       	movw	r24, r12
    2144:	b5 01       	movw	r22, r10
    2146:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    214a:	5b 01       	movw	r10, r22
    214c:	6c 01       	movw	r12, r24
    214e:	45 e0       	ldi	r20, 0x05	; 5
    2150:	64 2e       	mov	r6, r20
    2152:	71 2c       	mov	r7, r1
    2154:	68 0c       	add	r6, r8
    2156:	79 1c       	adc	r7, r9
    2158:	f4 01       	movw	r30, r8
    215a:	25 81       	ldd	r18, Z+5	; 0x05
    215c:	36 81       	ldd	r19, Z+6	; 0x06
    215e:	47 81       	ldd	r20, Z+7	; 0x07
    2160:	50 85       	ldd	r21, Z+8	; 0x08
    2162:	c8 01       	movw	r24, r16
    2164:	b7 01       	movw	r22, r14
    2166:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    216a:	a6 0e       	add	r10, r22
    216c:	b7 1e       	adc	r11, r23
    216e:	c8 1e       	adc	r12, r24
    2170:	d9 1e       	adc	r13, r25
    2172:	c6 01       	movw	r24, r12
    2174:	b5 01       	movw	r22, r10
    2176:	24 e6       	ldi	r18, 0x64	; 100
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__divmodsi4>
    2182:	ca 01       	movw	r24, r20
    2184:	f4 01       	movw	r30, r8
    2186:	25 83       	std	Z+5, r18	; 0x05
    2188:	f3 01       	movw	r30, r6
    218a:	31 83       	std	Z+1, r19	; 0x01
    218c:	42 83       	std	Z+2, r20	; 0x02
    218e:	93 83       	std	Z+3, r25	; 0x03
  return LPF[lpf_index].Output;
}
    2190:	b9 01       	movw	r22, r18
    2192:	1f 91       	pop	r17
    2194:	0f 91       	pop	r16
    2196:	ff 90       	pop	r15
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	bf 90       	pop	r11
    21a0:	af 90       	pop	r10
    21a2:	9f 90       	pop	r9
    21a4:	8f 90       	pop	r8
    21a6:	7f 90       	pop	r7
    21a8:	6f 90       	pop	r6
    21aa:	08 95       	ret

000021ac <LPF_Init>:

void LPF_Init(void){
  LPF_Struct_Init();
    21ac:	0e 94 15 10 	call	0x202a	; 0x202a <LPF_Struct_Init>
    21b0:	08 95       	ret

000021b2 <PID_Struct_Init>:

PID_t PID_type;
PID_t *PID;

void PID_Struct_Init(void){
  PID=&PID_type;
    21b2:	8f ed       	ldi	r24, 0xDF	; 223
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	90 93 de 01 	sts	0x01DE, r25
    21ba:	80 93 dd 01 	sts	0x01DD, r24
  PID->Input.Kp = 0;
    21be:	10 92 df 01 	sts	0x01DF, r1
    21c2:	10 92 e0 01 	sts	0x01E0, r1
    21c6:	10 92 e1 01 	sts	0x01E1, r1
    21ca:	10 92 e2 01 	sts	0x01E2, r1
  PID->Input.Ki = 0;
    21ce:	10 92 e3 01 	sts	0x01E3, r1
    21d2:	10 92 e4 01 	sts	0x01E4, r1
    21d6:	10 92 e5 01 	sts	0x01E5, r1
    21da:	10 92 e6 01 	sts	0x01E6, r1
  PID->Input.Kd = 0;
    21de:	10 92 e7 01 	sts	0x01E7, r1
    21e2:	10 92 e8 01 	sts	0x01E8, r1
    21e6:	10 92 e9 01 	sts	0x01E9, r1
    21ea:	10 92 ea 01 	sts	0x01EA, r1
  PID->Input.SetPoint = 0;
    21ee:	10 92 eb 01 	sts	0x01EB, r1
    21f2:	10 92 ec 01 	sts	0x01EC, r1
    21f6:	10 92 ed 01 	sts	0x01ED, r1
    21fa:	10 92 ee 01 	sts	0x01EE, r1
  PID->Input.ProcessValue = 0;
    21fe:	10 92 ef 01 	sts	0x01EF, r1
    2202:	10 92 f0 01 	sts	0x01F0, r1
    2206:	10 92 f1 01 	sts	0x01F1, r1
    220a:	10 92 f2 01 	sts	0x01F2, r1
  PID->Error.PError = 0;
    220e:	10 92 f3 01 	sts	0x01F3, r1
    2212:	10 92 f4 01 	sts	0x01F4, r1
    2216:	10 92 f5 01 	sts	0x01F5, r1
    221a:	10 92 f6 01 	sts	0x01F6, r1
  PID->Error.DError = 0;
    221e:	10 92 f7 01 	sts	0x01F7, r1
    2222:	10 92 f8 01 	sts	0x01F8, r1
    2226:	10 92 f9 01 	sts	0x01F9, r1
    222a:	10 92 fa 01 	sts	0x01FA, r1
  PID->Error.IError = 0;
    222e:	10 92 fb 01 	sts	0x01FB, r1
    2232:	10 92 fc 01 	sts	0x01FC, r1
    2236:	10 92 fd 01 	sts	0x01FD, r1
    223a:	10 92 fe 01 	sts	0x01FE, r1
  PID->Error.IErrorLimit = PID_MAX_IERROR;
    223e:	86 e9       	ldi	r24, 0x96	; 150
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e0       	ldi	r26, 0x00	; 0
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	80 93 ff 01 	sts	0x01FF, r24
    224a:	90 93 00 02 	sts	0x0200, r25
    224e:	a0 93 01 02 	sts	0x0201, r26
    2252:	b0 93 02 02 	sts	0x0202, r27
  PID->Error.LastError = 0;
    2256:	10 92 03 02 	sts	0x0203, r1
    225a:	10 92 04 02 	sts	0x0204, r1
    225e:	10 92 05 02 	sts	0x0205, r1
    2262:	10 92 06 02 	sts	0x0206, r1
  PID->Products.PError=0;
    2266:	10 92 07 02 	sts	0x0207, r1
    226a:	10 92 08 02 	sts	0x0208, r1
    226e:	10 92 09 02 	sts	0x0209, r1
    2272:	10 92 0a 02 	sts	0x020A, r1
  PID->Products.IError=0;
    2276:	10 92 0b 02 	sts	0x020B, r1
    227a:	10 92 0c 02 	sts	0x020C, r1
    227e:	10 92 0d 02 	sts	0x020D, r1
    2282:	10 92 0e 02 	sts	0x020E, r1
  PID->Products.DError=0;
    2286:	10 92 0f 02 	sts	0x020F, r1
    228a:	10 92 10 02 	sts	0x0210, r1
    228e:	10 92 11 02 	sts	0x0211, r1
    2292:	10 92 12 02 	sts	0x0212, r1
  PID->Output = 0;
    2296:	10 92 13 02 	sts	0x0213, r1
    229a:	10 92 14 02 	sts	0x0214, r1
    229e:	10 92 15 02 	sts	0x0215, r1
    22a2:	10 92 16 02 	sts	0x0216, r1
}
    22a6:	08 95       	ret

000022a8 <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID->Input.Kp = kp;
    22a8:	e0 91 dd 01 	lds	r30, 0x01DD
    22ac:	f0 91 de 01 	lds	r31, 0x01DE
    22b0:	60 83       	st	Z, r22
    22b2:	71 83       	std	Z+1, r23	; 0x01
    22b4:	82 83       	std	Z+2, r24	; 0x02
    22b6:	93 83       	std	Z+3, r25	; 0x03
}
    22b8:	08 95       	ret

000022ba <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID->Input.Ki = ki;
    22ba:	e0 91 dd 01 	lds	r30, 0x01DD
    22be:	f0 91 de 01 	lds	r31, 0x01DE
    22c2:	64 83       	std	Z+4, r22	; 0x04
    22c4:	75 83       	std	Z+5, r23	; 0x05
    22c6:	86 83       	std	Z+6, r24	; 0x06
    22c8:	97 83       	std	Z+7, r25	; 0x07
}
    22ca:	08 95       	ret

000022cc <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID->Input.Kd = kd;
    22cc:	e0 91 dd 01 	lds	r30, 0x01DD
    22d0:	f0 91 de 01 	lds	r31, 0x01DE
    22d4:	60 87       	std	Z+8, r22	; 0x08
    22d6:	71 87       	std	Z+9, r23	; 0x09
    22d8:	82 87       	std	Z+10, r24	; 0x0a
    22da:	93 87       	std	Z+11, r25	; 0x0b
}
    22dc:	08 95       	ret

000022de <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    22de:	ef 92       	push	r14
    22e0:	ff 92       	push	r15
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
  PID->Output = 0;
}


void PID_Set_Kp(signed long kp){
  PID->Input.Kp = kp;
    22e6:	e0 91 dd 01 	lds	r30, 0x01DD
    22ea:	f0 91 de 01 	lds	r31, 0x01DE
    22ee:	60 83       	st	Z, r22
    22f0:	71 83       	std	Z+1, r23	; 0x01
    22f2:	82 83       	std	Z+2, r24	; 0x02
    22f4:	93 83       	std	Z+3, r25	; 0x03
}

void PID_Set_Ki(signed long ki){
  PID->Input.Ki = ki;
    22f6:	24 83       	std	Z+4, r18	; 0x04
    22f8:	35 83       	std	Z+5, r19	; 0x05
    22fa:	46 83       	std	Z+6, r20	; 0x06
    22fc:	57 83       	std	Z+7, r21	; 0x07
}

void PID_Set_Kd(signed long kd){
  PID->Input.Kd = kd;
    22fe:	e0 86       	std	Z+8, r14	; 0x08
    2300:	f1 86       	std	Z+9, r15	; 0x09
    2302:	02 87       	std	Z+10, r16	; 0x0a
    2304:	13 87       	std	Z+11, r17	; 0x0b

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	08 95       	ret

00002310 <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID->Input.SetPoint = set_point;
    2310:	e0 91 dd 01 	lds	r30, 0x01DD
    2314:	f0 91 de 01 	lds	r31, 0x01DE
    2318:	64 87       	std	Z+12, r22	; 0x0c
    231a:	75 87       	std	Z+13, r23	; 0x0d
    231c:	86 87       	std	Z+14, r24	; 0x0e
    231e:	97 87       	std	Z+15, r25	; 0x0f
}
    2320:	08 95       	ret

00002322 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID->Input.ProcessValue = process_value;
    2322:	e0 91 dd 01 	lds	r30, 0x01DD
    2326:	f0 91 de 01 	lds	r31, 0x01DE
    232a:	60 8b       	std	Z+16, r22	; 0x10
    232c:	71 8b       	std	Z+17, r23	; 0x11
    232e:	82 8b       	std	Z+18, r24	; 0x12
    2330:	93 8b       	std	Z+19, r25	; 0x13
}
    2332:	08 95       	ret

00002334 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID->Error.IErrorLimit = max_ierror;
    2334:	e0 91 dd 01 	lds	r30, 0x01DD
    2338:	f0 91 de 01 	lds	r31, 0x01DE
    233c:	60 a3       	std	Z+32, r22	; 0x20
    233e:	71 a3       	std	Z+33, r23	; 0x21
    2340:	82 a3       	std	Z+34, r24	; 0x22
    2342:	93 a3       	std	Z+35, r25	; 0x23
}
    2344:	08 95       	ret

00002346 <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID->Error.IError = 0;
    2346:	e0 91 dd 01 	lds	r30, 0x01DD
    234a:	f0 91 de 01 	lds	r31, 0x01DE
    234e:	14 8e       	std	Z+28, r1	; 0x1c
    2350:	15 8e       	std	Z+29, r1	; 0x1d
    2352:	16 8e       	std	Z+30, r1	; 0x1e
    2354:	17 8e       	std	Z+31, r1	; 0x1f
}
    2356:	08 95       	ret

00002358 <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
  PID->Error.PError = PID->Input.SetPoint - PID->Input.ProcessValue;
    2360:	e0 91 dd 01 	lds	r30, 0x01DD
    2364:	f0 91 de 01 	lds	r31, 0x01DE
    2368:	24 85       	ldd	r18, Z+12	; 0x0c
    236a:	35 85       	ldd	r19, Z+13	; 0x0d
    236c:	46 85       	ldd	r20, Z+14	; 0x0e
    236e:	57 85       	ldd	r21, Z+15	; 0x0f
    2370:	80 89       	ldd	r24, Z+16	; 0x10
    2372:	91 89       	ldd	r25, Z+17	; 0x11
    2374:	a2 89       	ldd	r26, Z+18	; 0x12
    2376:	b3 89       	ldd	r27, Z+19	; 0x13
    2378:	28 1b       	sub	r18, r24
    237a:	39 0b       	sbc	r19, r25
    237c:	4a 0b       	sbc	r20, r26
    237e:	5b 0b       	sbc	r21, r27
    2380:	24 8b       	std	Z+20, r18	; 0x14
    2382:	35 8b       	std	Z+21, r19	; 0x15
    2384:	46 8b       	std	Z+22, r20	; 0x16
    2386:	57 8b       	std	Z+23, r21	; 0x17
  PID->Error.DError = PID->Error.PError - PID->Error.LastError;
    2388:	84 a1       	ldd	r24, Z+36	; 0x24
    238a:	95 a1       	ldd	r25, Z+37	; 0x25
    238c:	a6 a1       	ldd	r26, Z+38	; 0x26
    238e:	b7 a1       	ldd	r27, Z+39	; 0x27
    2390:	79 01       	movw	r14, r18
    2392:	8a 01       	movw	r16, r20
    2394:	e8 1a       	sub	r14, r24
    2396:	f9 0a       	sbc	r15, r25
    2398:	0a 0b       	sbc	r16, r26
    239a:	1b 0b       	sbc	r17, r27
    239c:	e0 8e       	std	Z+24, r14	; 0x18
    239e:	f1 8e       	std	Z+25, r15	; 0x19
    23a0:	02 8f       	std	Z+26, r16	; 0x1a
    23a2:	13 8f       	std	Z+27, r17	; 0x1b
  PID->Error.LastError = PID->Error.PError;
    23a4:	24 a3       	std	Z+36, r18	; 0x24
    23a6:	35 a3       	std	Z+37, r19	; 0x25
    23a8:	46 a3       	std	Z+38, r20	; 0x26
    23aa:	57 a3       	std	Z+39, r21	; 0x27
  PID->Error.IError += PID->Error.PError;
    23ac:	e4 8c       	ldd	r14, Z+28	; 0x1c
    23ae:	f5 8c       	ldd	r15, Z+29	; 0x1d
    23b0:	06 8d       	ldd	r16, Z+30	; 0x1e
    23b2:	17 8d       	ldd	r17, Z+31	; 0x1f
    23b4:	e2 0e       	add	r14, r18
    23b6:	f3 1e       	adc	r15, r19
    23b8:	04 1f       	adc	r16, r20
    23ba:	15 1f       	adc	r17, r21
    23bc:	e4 8e       	std	Z+28, r14	; 0x1c
    23be:	f5 8e       	std	Z+29, r15	; 0x1d
    23c0:	06 8f       	std	Z+30, r16	; 0x1e
    23c2:	17 8f       	std	Z+31, r17	; 0x1f
  if     ( PID->Error.IError > PID->Error.IErrorLimit ){
    23c4:	80 a1       	ldd	r24, Z+32	; 0x20
    23c6:	91 a1       	ldd	r25, Z+33	; 0x21
    23c8:	a2 a1       	ldd	r26, Z+34	; 0x22
    23ca:	b3 a1       	ldd	r27, Z+35	; 0x23
    23cc:	8e 15       	cp	r24, r14
    23ce:	9f 05       	cpc	r25, r15
    23d0:	a0 07       	cpc	r26, r16
    23d2:	b1 07       	cpc	r27, r17
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <PID_Calculate_Error+0x88>
    PID->Error.IError = PID->Error.IErrorLimit;
    23d6:	84 8f       	std	Z+28, r24	; 0x1c
    23d8:	95 8f       	std	Z+29, r25	; 0x1d
    23da:	a6 8f       	std	Z+30, r26	; 0x1e
    23dc:	b7 8f       	std	Z+31, r27	; 0x1f
    23de:	10 c0       	rjmp	.+32     	; 0x2400 <PID_Calculate_Error+0xa8>
  }
  else if( PID->Error.IError < -PID->Error.IErrorLimit ){
    23e0:	22 27       	eor	r18, r18
    23e2:	33 27       	eor	r19, r19
    23e4:	a9 01       	movw	r20, r18
    23e6:	28 1b       	sub	r18, r24
    23e8:	39 0b       	sbc	r19, r25
    23ea:	4a 0b       	sbc	r20, r26
    23ec:	5b 0b       	sbc	r21, r27
    23ee:	e2 16       	cp	r14, r18
    23f0:	f3 06       	cpc	r15, r19
    23f2:	04 07       	cpc	r16, r20
    23f4:	15 07       	cpc	r17, r21
    23f6:	24 f4       	brge	.+8      	; 0x2400 <PID_Calculate_Error+0xa8>
    PID->Error.IError = -PID->Error.IErrorLimit;
    23f8:	24 8f       	std	Z+28, r18	; 0x1c
    23fa:	35 8f       	std	Z+29, r19	; 0x1d
    23fc:	46 8f       	std	Z+30, r20	; 0x1e
    23fe:	57 8f       	std	Z+31, r21	; 0x1f
  }
}
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	08 95       	ret

0000240a <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
  PID->Products.PError = ( PID->Error.PError * PID->Input.Kp );
    2426:	00 91 dd 01 	lds	r16, 0x01DD
    242a:	10 91 de 01 	lds	r17, 0x01DE
    242e:	f8 01       	movw	r30, r16
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	24 89       	ldd	r18, Z+20	; 0x14
    243a:	35 89       	ldd	r19, Z+21	; 0x15
    243c:	46 89       	ldd	r20, Z+22	; 0x16
    243e:	57 89       	ldd	r21, Z+23	; 0x17
    2440:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    2444:	2b 01       	movw	r4, r22
    2446:	3c 01       	movw	r6, r24
  PID->Products.IError = ( PID->Error.IError * PID->Input.Ki );
    2448:	f8 01       	movw	r30, r16
    244a:	64 81       	ldd	r22, Z+4	; 0x04
    244c:	75 81       	ldd	r23, Z+5	; 0x05
    244e:	86 81       	ldd	r24, Z+6	; 0x06
    2450:	97 81       	ldd	r25, Z+7	; 0x07
    2452:	24 8d       	ldd	r18, Z+28	; 0x1c
    2454:	35 8d       	ldd	r19, Z+29	; 0x1d
    2456:	46 8d       	ldd	r20, Z+30	; 0x1e
    2458:	57 8d       	ldd	r21, Z+31	; 0x1f
    245a:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    245e:	4b 01       	movw	r8, r22
    2460:	5c 01       	movw	r10, r24
  PID->Products.DError = ( PID->Error.DError * PID->Input.Kd );
    2462:	f8 01       	movw	r30, r16
    2464:	60 85       	ldd	r22, Z+8	; 0x08
    2466:	71 85       	ldd	r23, Z+9	; 0x09
    2468:	82 85       	ldd	r24, Z+10	; 0x0a
    246a:	93 85       	ldd	r25, Z+11	; 0x0b
    246c:	20 8d       	ldd	r18, Z+24	; 0x18
    246e:	31 8d       	ldd	r19, Z+25	; 0x19
    2470:	42 8d       	ldd	r20, Z+26	; 0x1a
    2472:	53 8d       	ldd	r21, Z+27	; 0x1b
    2474:	0e 94 25 14 	call	0x284a	; 0x284a <__mulsi3>
    2478:	6b 01       	movw	r12, r22
    247a:	7c 01       	movw	r14, r24
  PID->Products.PError/= PID_OUTPUT_SCALING_FACT;
    247c:	c3 01       	movw	r24, r6
    247e:	b2 01       	movw	r22, r4
    2480:	24 e6       	ldi	r18, 0x64	; 100
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__divmodsi4>
    248c:	f8 01       	movw	r30, r16
    248e:	20 a7       	std	Z+40, r18	; 0x28
    2490:	31 a7       	std	Z+41, r19	; 0x29
    2492:	42 a7       	std	Z+42, r20	; 0x2a
    2494:	53 a7       	std	Z+43, r21	; 0x2b
  PID->Products.IError/= PID_OUTPUT_SCALING_FACT;
    2496:	c5 01       	movw	r24, r10
    2498:	b4 01       	movw	r22, r8
    249a:	24 e6       	ldi	r18, 0x64	; 100
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__divmodsi4>
    24a6:	f8 01       	movw	r30, r16
    24a8:	24 a7       	std	Z+44, r18	; 0x2c
    24aa:	35 a7       	std	Z+45, r19	; 0x2d
    24ac:	46 a7       	std	Z+46, r20	; 0x2e
    24ae:	57 a7       	std	Z+47, r21	; 0x2f
  PID->Products.DError/= PID_OUTPUT_SCALING_FACT;
    24b0:	c7 01       	movw	r24, r14
    24b2:	b6 01       	movw	r22, r12
    24b4:	24 e6       	ldi	r18, 0x64	; 100
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__divmodsi4>
    24c0:	f8 01       	movw	r30, r16
    24c2:	20 ab       	std	Z+48, r18	; 0x30
    24c4:	31 ab       	std	Z+49, r19	; 0x31
    24c6:	42 ab       	std	Z+50, r20	; 0x32
    24c8:	53 ab       	std	Z+51, r21	; 0x33
}
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	bf 90       	pop	r11
    24d8:	af 90       	pop	r10
    24da:	9f 90       	pop	r9
    24dc:	8f 90       	pop	r8
    24de:	7f 90       	pop	r7
    24e0:	6f 90       	pop	r6
    24e2:	5f 90       	pop	r5
    24e4:	4f 90       	pop	r4
    24e6:	08 95       	ret

000024e8 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    24e8:	0e 94 ac 11 	call	0x2358	; 0x2358 <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    24ec:	0e 94 05 12 	call	0x240a	; 0x240a <PID_Calculate_Error_Products>
  control_value  = PID->Products.PError;
    24f0:	e0 91 dd 01 	lds	r30, 0x01DD
    24f4:	f0 91 de 01 	lds	r31, 0x01DE
    24f8:	20 a5       	ldd	r18, Z+40	; 0x28
    24fa:	31 a5       	ldd	r19, Z+41	; 0x29
    24fc:	42 a5       	ldd	r20, Z+42	; 0x2a
    24fe:	53 a5       	ldd	r21, Z+43	; 0x2b
  control_value += PID->Products.IError;
    2500:	84 a5       	ldd	r24, Z+44	; 0x2c
    2502:	95 a5       	ldd	r25, Z+45	; 0x2d
    2504:	a6 a5       	ldd	r26, Z+46	; 0x2e
    2506:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2508:	28 0f       	add	r18, r24
    250a:	39 1f       	adc	r19, r25
    250c:	4a 1f       	adc	r20, r26
    250e:	5b 1f       	adc	r21, r27
  control_value += PID->Products.DError;
    2510:	80 a9       	ldd	r24, Z+48	; 0x30
    2512:	91 a9       	ldd	r25, Z+49	; 0x31
    2514:	a2 a9       	ldd	r26, Z+50	; 0x32
    2516:	b3 a9       	ldd	r27, Z+51	; 0x33
    2518:	28 0f       	add	r18, r24
    251a:	39 1f       	adc	r19, r25
    251c:	4a 1f       	adc	r20, r26
    251e:	5b 1f       	adc	r21, r27
  PID->Output    = control_value;
    2520:	24 ab       	std	Z+52, r18	; 0x34
    2522:	35 ab       	std	Z+53, r19	; 0x35
    2524:	46 ab       	std	Z+54, r20	; 0x36
    2526:	57 ab       	std	Z+55, r21	; 0x37
  if(control_value < 0){
    2528:	57 ff       	sbrs	r21, 7
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <PID_Execute_Routine+0x4e>
    PID->OutputNonNegative = 0;
    252c:	10 ae       	std	Z+56, r1	; 0x38
    252e:	11 ae       	std	Z+57, r1	; 0x39
    2530:	12 ae       	std	Z+58, r1	; 0x3a
    2532:	13 ae       	std	Z+59, r1	; 0x3b
    2534:	08 95       	ret
  }else{
    PID->OutputNonNegative = control_value;
    2536:	20 af       	std	Z+56, r18	; 0x38
    2538:	31 af       	std	Z+57, r19	; 0x39
    253a:	42 af       	std	Z+58, r20	; 0x3a
    253c:	53 af       	std	Z+59, r21	; 0x3b
    253e:	08 95       	ret

00002540 <PID_Get_Kp>:
  }
}

signed long PID_Get_Kp(void){
    2540:	e0 91 dd 01 	lds	r30, 0x01DD
    2544:	f0 91 de 01 	lds	r31, 0x01DE
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
  return PID->Input.Kp;
}
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	08 95       	ret

00002552 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2552:	e0 91 dd 01 	lds	r30, 0x01DD
    2556:	f0 91 de 01 	lds	r31, 0x01DE
    255a:	64 81       	ldd	r22, Z+4	; 0x04
    255c:	75 81       	ldd	r23, Z+5	; 0x05
  return PID->Input.Ki;
}
    255e:	86 81       	ldd	r24, Z+6	; 0x06
    2560:	97 81       	ldd	r25, Z+7	; 0x07
    2562:	08 95       	ret

00002564 <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    2564:	e0 91 dd 01 	lds	r30, 0x01DD
    2568:	f0 91 de 01 	lds	r31, 0x01DE
    256c:	60 85       	ldd	r22, Z+8	; 0x08
    256e:	71 85       	ldd	r23, Z+9	; 0x09
  return PID->Input.Kd;
}
    2570:	82 85       	ldd	r24, Z+10	; 0x0a
    2572:	93 85       	ldd	r25, Z+11	; 0x0b
    2574:	08 95       	ret

00002576 <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    2576:	e0 91 dd 01 	lds	r30, 0x01DD
    257a:	f0 91 de 01 	lds	r31, 0x01DE
    257e:	64 85       	ldd	r22, Z+12	; 0x0c
    2580:	75 85       	ldd	r23, Z+13	; 0x0d
  return PID->Input.SetPoint;
}
    2582:	86 85       	ldd	r24, Z+14	; 0x0e
    2584:	97 85       	ldd	r25, Z+15	; 0x0f
    2586:	08 95       	ret

00002588 <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    2588:	e0 91 dd 01 	lds	r30, 0x01DD
    258c:	f0 91 de 01 	lds	r31, 0x01DE
    2590:	60 89       	ldd	r22, Z+16	; 0x10
    2592:	71 89       	ldd	r23, Z+17	; 0x11
  return PID->Input.ProcessValue;
}
    2594:	82 89       	ldd	r24, Z+18	; 0x12
    2596:	93 89       	ldd	r25, Z+19	; 0x13
    2598:	08 95       	ret

0000259a <PID_Get_PError>:

signed long PID_Get_PError(void){
    259a:	e0 91 dd 01 	lds	r30, 0x01DD
    259e:	f0 91 de 01 	lds	r31, 0x01DE
    25a2:	64 89       	ldd	r22, Z+20	; 0x14
    25a4:	75 89       	ldd	r23, Z+21	; 0x15
  return PID->Error.PError;
}
    25a6:	86 89       	ldd	r24, Z+22	; 0x16
    25a8:	97 89       	ldd	r25, Z+23	; 0x17
    25aa:	08 95       	ret

000025ac <PID_Get_IError>:

signed long PID_Get_IError(void){
    25ac:	e0 91 dd 01 	lds	r30, 0x01DD
    25b0:	f0 91 de 01 	lds	r31, 0x01DE
    25b4:	64 8d       	ldd	r22, Z+28	; 0x1c
    25b6:	75 8d       	ldd	r23, Z+29	; 0x1d
  return PID->Error.IError;
}
    25b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    25ba:	97 8d       	ldd	r25, Z+31	; 0x1f
    25bc:	08 95       	ret

000025be <PID_Get_DError>:

signed long PID_Get_DError(void){
    25be:	e0 91 dd 01 	lds	r30, 0x01DD
    25c2:	f0 91 de 01 	lds	r31, 0x01DE
    25c6:	60 8d       	ldd	r22, Z+24	; 0x18
    25c8:	71 8d       	ldd	r23, Z+25	; 0x19
  return PID->Error.DError;
}
    25ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    25cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    25ce:	08 95       	ret

000025d0 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    25d0:	e0 91 dd 01 	lds	r30, 0x01DD
    25d4:	f0 91 de 01 	lds	r31, 0x01DE
    25d8:	60 a1       	ldd	r22, Z+32	; 0x20
    25da:	71 a1       	ldd	r23, Z+33	; 0x21
  return PID->Error.IErrorLimit;
}
    25dc:	82 a1       	ldd	r24, Z+34	; 0x22
    25de:	93 a1       	ldd	r25, Z+35	; 0x23
    25e0:	08 95       	ret

000025e2 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    25e2:	e0 91 dd 01 	lds	r30, 0x01DD
    25e6:	f0 91 de 01 	lds	r31, 0x01DE
    25ea:	60 a5       	ldd	r22, Z+40	; 0x28
    25ec:	71 a5       	ldd	r23, Z+41	; 0x29
  return PID->Products.PError;
}
    25ee:	82 a5       	ldd	r24, Z+42	; 0x2a
    25f0:	93 a5       	ldd	r25, Z+43	; 0x2b
    25f2:	08 95       	ret

000025f4 <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    25f4:	e0 91 dd 01 	lds	r30, 0x01DD
    25f8:	f0 91 de 01 	lds	r31, 0x01DE
    25fc:	64 a5       	ldd	r22, Z+44	; 0x2c
    25fe:	75 a5       	ldd	r23, Z+45	; 0x2d
  return PID->Products.IError;
}
    2600:	86 a5       	ldd	r24, Z+46	; 0x2e
    2602:	97 a5       	ldd	r25, Z+47	; 0x2f
    2604:	08 95       	ret

00002606 <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    2606:	e0 91 dd 01 	lds	r30, 0x01DD
    260a:	f0 91 de 01 	lds	r31, 0x01DE
    260e:	60 a9       	ldd	r22, Z+48	; 0x30
    2610:	71 a9       	ldd	r23, Z+49	; 0x31
  return PID->Products.DError;
}
    2612:	82 a9       	ldd	r24, Z+50	; 0x32
    2614:	93 a9       	ldd	r25, Z+51	; 0x33
    2616:	08 95       	ret

00002618 <PID_Get_Output>:


signed long PID_Get_Output(void){
    2618:	e0 91 dd 01 	lds	r30, 0x01DD
    261c:	f0 91 de 01 	lds	r31, 0x01DE
    2620:	64 a9       	ldd	r22, Z+52	; 0x34
    2622:	75 a9       	ldd	r23, Z+53	; 0x35
  return PID->Output;
}
    2624:	86 a9       	ldd	r24, Z+54	; 0x36
    2626:	97 a9       	ldd	r25, Z+55	; 0x37
    2628:	08 95       	ret

0000262a <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    262a:	e0 91 dd 01 	lds	r30, 0x01DD
    262e:	f0 91 de 01 	lds	r31, 0x01DE
    2632:	60 ad       	ldd	r22, Z+56	; 0x38
    2634:	71 ad       	ldd	r23, Z+57	; 0x39
  return PID->OutputNonNegative;
}
    2636:	82 ad       	ldd	r24, Z+58	; 0x3a
    2638:	93 ad       	ldd	r25, Z+59	; 0x3b
    263a:	08 95       	ret

0000263c <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    263c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <PID_Struct_Init>
}
    2640:	08 95       	ret

00002642 <Debug_Print_Seperation>:
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2642:	8f e0       	ldi	r24, 0x0F	; 15
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #elif DEBUG_SPACE_SEPERATED
    UART_Transmit_Text(" ");
  #endif
}
    264a:	08 95       	ret

0000264c <Debug_Print_Display_Temperature>:

void Debug_Print_Display_Temperature(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("DispTemp ");
  #endif
  UART_Transmit_Number(ADC_Get_Display_Temperature());
    264c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <ADC_Get_Display_Temperature>
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    265c:	8f e0       	ldi	r24, 0x0F	; 15
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("DispTemp ");
  #endif
  UART_Transmit_Number(ADC_Get_Display_Temperature());
  Debug_Print_Seperation();
}
    2664:	08 95       	ret

00002666 <Debug_Print_Current_Temperature>:

void Debug_Print_Current_Temperature(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Temp ");
  #endif
  UART_Transmit_Number(ADC_Get_Temperature());
    2666:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <ADC_Get_Temperature>
    266a:	a0 e0       	ldi	r26, 0x00	; 0
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2676:	8f e0       	ldi	r24, 0x0F	; 15
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Temp ");
  #endif
  UART_Transmit_Number(ADC_Get_Temperature());
  Debug_Print_Seperation();
}
    267e:	08 95       	ret

00002680 <Debug_Print_Power_Bar_Value>:

void Debug_Print_Power_Bar_Value(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PowerBar ");
  #endif
  UART_Transmit_Number(ADC_Get_Power_Bar());
    2680:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ADC_Get_Power_Bar>
    2684:	a0 e0       	ldi	r26, 0x00	; 0
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2690:	8f e0       	ldi	r24, 0x0F	; 15
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PowerBar ");
  #endif
  UART_Transmit_Number(ADC_Get_Power_Bar());
  Debug_Print_Seperation();
}
    2698:	08 95       	ret

0000269a <Debug_Print_Power_Draw>:

void Debug_Print_Power_Draw(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Power ");
  #endif
  UART_Transmit_Number(ADC_Get_Power_Draw());
    269a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <ADC_Get_Power_Draw>
    269e:	a0 e0       	ldi	r26, 0x00	; 0
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    26aa:	8f e0       	ldi	r24, 0x0F	; 15
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Power ");
  #endif
  UART_Transmit_Number(ADC_Get_Power_Draw());
  Debug_Print_Seperation();
}
    26b2:	08 95       	ret

000026b4 <Debug_Print_Current_Draw>:

void Debug_Print_Current_Draw(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Current ");
  #endif
  UART_Transmit_Number(ADC_Get_Current());
    26b4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <ADC_Get_Current>
    26b8:	a0 e0       	ldi	r26, 0x00	; 0
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    26c4:	8f e0       	ldi	r24, 0x0F	; 15
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Current ");
  #endif
  UART_Transmit_Number(ADC_Get_Current());
  Debug_Print_Seperation();
}
    26cc:	08 95       	ret

000026ce <Debug_Print_Vin>:

void Debug_Print_Vin(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Vin ");
  #endif
  UART_Transmit_Number(ADC_Get_Input_Voltage());
    26ce:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <ADC_Get_Input_Voltage>
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    26de:	8f e0       	ldi	r24, 0x0F	; 15
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Vin ");
  #endif
  UART_Transmit_Number(ADC_Get_Input_Voltage());
  Debug_Print_Seperation();
}
    26e6:	08 95       	ret

000026e8 <Debug_Print_Max_PWM>:

void Debug_Print_Max_PWM(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PWM ");
  #endif
  UART_Transmit_Number(Iron_Get_Max_PWM());
    26e8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <Iron_Get_Max_PWM>
    26ec:	a0 e0       	ldi	r26, 0x00	; 0
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    26f8:	8f e0       	ldi	r24, 0x0F	; 15
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PWM ");
  #endif
  UART_Transmit_Number(Iron_Get_Max_PWM());
  Debug_Print_Seperation();
}
    2700:	08 95       	ret

00002702 <Debug_Print_PWM>:

void Debug_Print_PWM(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PWM ");
  #endif
  UART_Transmit_Number(Iron_Get_PWM());
    2702:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <Iron_Get_PWM>
    2706:	a0 e0       	ldi	r26, 0x00	; 0
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2712:	8f e0       	ldi	r24, 0x0F	; 15
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PWM ");
  #endif
  UART_Transmit_Number(Iron_Get_PWM());
  Debug_Print_Seperation();
}
    271a:	08 95       	ret

0000271c <Debug_Print_PID_Output_NonNegative>:

void Debug_Print_PID_Output_NonNegative(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID OutputNN ");
  #endif
  UART_Transmit_Number(PID_Get_Output_NonNegative());
    271c:	0e 94 15 13 	call	0x262a	; 0x262a <PID_Get_Output_NonNegative>
    2720:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2724:	8f e0       	ldi	r24, 0x0F	; 15
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID OutputNN ");
  #endif
  UART_Transmit_Number(PID_Get_Output_NonNegative());
  Debug_Print_Seperation();
}
    272c:	08 95       	ret

0000272e <Debug_Print_PID_Output>:

void Debug_Print_PID_Output(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID Output ");
  #endif
  UART_Transmit_Number(PID_Get_Output());
    272e:	0e 94 0c 13 	call	0x2618	; 0x2618 <PID_Get_Output>
    2732:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2736:	8f e0       	ldi	r24, 0x0F	; 15
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID Output ");
  #endif
  UART_Transmit_Number(PID_Get_Output());
  Debug_Print_Seperation();
}
    273e:	08 95       	ret

00002740 <Debug_Print_PID_DError_Product>:

void Debug_Print_PID_DError_Product(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID DError Product ");
  #endif
  UART_Transmit_Number(PID_Get_DError_Product());
    2740:	0e 94 03 13 	call	0x2606	; 0x2606 <PID_Get_DError_Product>
    2744:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2748:	8f e0       	ldi	r24, 0x0F	; 15
    274a:	91 e0       	ldi	r25, 0x01	; 1
    274c:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID DError Product ");
  #endif
  UART_Transmit_Number(PID_Get_DError_Product());
  Debug_Print_Seperation();
}
    2750:	08 95       	ret

00002752 <Debug_Print_PID_IError_Product>:

void Debug_Print_PID_IError_Product(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID IError Product ");
  #endif
  UART_Transmit_Number(PID_Get_IError_Product());
    2752:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <PID_Get_IError_Product>
    2756:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    275a:	8f e0       	ldi	r24, 0x0F	; 15
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID IError Product ");
  #endif
  UART_Transmit_Number(PID_Get_IError_Product());
  Debug_Print_Seperation();
}
    2762:	08 95       	ret

00002764 <Debug_Print_PID_PError_Product>:

void Debug_Print_PID_PError_Product(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID PError Product ");
  #endif
  UART_Transmit_Number(PID_Get_PError_Product());
    2764:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <PID_Get_PError_Product>
    2768:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    276c:	8f e0       	ldi	r24, 0x0F	; 15
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID PError Product ");
  #endif
  UART_Transmit_Number(PID_Get_PError_Product());
  Debug_Print_Seperation();
}
    2774:	08 95       	ret

00002776 <Debug_Print_PID_Max_IError>:

void Debug_Print_PID_Max_IError(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID Max IError ");
  #endif
  UART_Transmit_Number(PID_Get_Max_IError());
    2776:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <PID_Get_Max_IError>
    277a:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    277e:	8f e0       	ldi	r24, 0x0F	; 15
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID Max IError ");
  #endif
  UART_Transmit_Number(PID_Get_Max_IError());
  Debug_Print_Seperation();
}
    2786:	08 95       	ret

00002788 <Debug_Print_PID_DError>:

void Debug_Print_PID_DError(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID DError ");
  #endif
  UART_Transmit_Number(PID_Get_DError());
    2788:	0e 94 df 12 	call	0x25be	; 0x25be <PID_Get_DError>
    278c:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2790:	8f e0       	ldi	r24, 0x0F	; 15
    2792:	91 e0       	ldi	r25, 0x01	; 1
    2794:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID DError ");
  #endif
  UART_Transmit_Number(PID_Get_DError());
  Debug_Print_Seperation();
}
    2798:	08 95       	ret

0000279a <Debug_Print_PID_IError>:

void Debug_Print_PID_IError(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID IError ");
  #endif
  UART_Transmit_Number(PID_Get_IError());
    279a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <PID_Get_IError>
    279e:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    27a2:	8f e0       	ldi	r24, 0x0F	; 15
    27a4:	91 e0       	ldi	r25, 0x01	; 1
    27a6:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID IError ");
  #endif
  UART_Transmit_Number(PID_Get_IError());
  Debug_Print_Seperation();
}
    27aa:	08 95       	ret

000027ac <Debug_Print_PID_PError>:

void Debug_Print_PID_PError(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID PError ");
  #endif
  UART_Transmit_Number(PID_Get_PError());
    27ac:	0e 94 cd 12 	call	0x259a	; 0x259a <PID_Get_PError>
    27b0:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    27b4:	8f e0       	ldi	r24, 0x0F	; 15
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID PError ");
  #endif
  UART_Transmit_Number(PID_Get_PError());
  Debug_Print_Seperation();
}
    27bc:	08 95       	ret

000027be <Debug_Print_PID_Process_Value>:

void Debug_Print_PID_Process_Value(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID PV ");
  #endif
  UART_Transmit_Number(PID_Get_Process_Value());
    27be:	0e 94 c4 12 	call	0x2588	; 0x2588 <PID_Get_Process_Value>
    27c2:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    27c6:	8f e0       	ldi	r24, 0x0F	; 15
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID PV ");
  #endif
  UART_Transmit_Number(PID_Get_Process_Value());
  Debug_Print_Seperation();
}
    27ce:	08 95       	ret

000027d0 <Debug_Print_PID_SetPoint>:

void Debug_Print_PID_SetPoint(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID SP ");
  #endif
  UART_Transmit_Number(PID_Get_Set_Point());
    27d0:	0e 94 bb 12 	call	0x2576	; 0x2576 <PID_Get_Set_Point>
    27d4:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    27d8:	8f e0       	ldi	r24, 0x0F	; 15
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("PID SP ");
  #endif
  UART_Transmit_Number(PID_Get_Set_Point());
  Debug_Print_Seperation();
}
    27e0:	08 95       	ret

000027e2 <Debug_Print_PID_Kd>:

void Debug_Print_PID_Kd(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Kd ");
  #endif
  UART_Transmit_Number(PID_Get_Kd());
    27e2:	0e 94 b2 12 	call	0x2564	; 0x2564 <PID_Get_Kd>
    27e6:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    27ea:	8f e0       	ldi	r24, 0x0F	; 15
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Kd ");
  #endif
  UART_Transmit_Number(PID_Get_Kd());
  Debug_Print_Seperation();
}
    27f2:	08 95       	ret

000027f4 <Debug_Print_PID_Ki>:

void Debug_Print_PID_Ki(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Ki ");
  #endif
  UART_Transmit_Number(PID_Get_Ki());
    27f4:	0e 94 a9 12 	call	0x2552	; 0x2552 <PID_Get_Ki>
    27f8:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    27fc:	8f e0       	ldi	r24, 0x0F	; 15
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Ki ");
  #endif
  UART_Transmit_Number(PID_Get_Ki());
  Debug_Print_Seperation();
}
    2804:	08 95       	ret

00002806 <Debug_Print_PID_Kp>:

void Debug_Print_PID_Kp(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Kp ");
  #endif
  UART_Transmit_Number(PID_Get_Kp());
    2806:	0e 94 a0 12 	call	0x2540	; 0x2540 <PID_Get_Kp>
    280a:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    280e:	8f e0       	ldi	r24, 0x0F	; 15
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("Kp ");
  #endif
  UART_Transmit_Number(PID_Get_Kp());
  Debug_Print_Seperation();
}
    2816:	08 95       	ret

00002818 <Debug_Print_SubSeconds>:

void Debug_Print_SubSeconds(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("SubSeconds ");
  #endif
  UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
    2818:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <Timebase_Timer_Get_SubSeconds>
    281c:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2820:	8f e0       	ldi	r24, 0x0F	; 15
    2822:	91 e0       	ldi	r25, 0x01	; 1
    2824:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("SubSeconds ");
  #endif
  UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
  Debug_Print_Seperation();
}
    2828:	08 95       	ret

0000282a <Debug_Print_UpTime>:

void Debug_Print_UpTime(void){
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("UpTime ");
  #endif
  UART_Transmit_Number(Timebase_Timer_Get_Seconds());
    282a:	0e 94 76 04 	call	0x8ec	; 0x8ec <Timebase_Timer_Get_Seconds>
    282e:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
  UART_Init(57600);
}

void Debug_Print_Seperation(void){
  #ifdef DEBUG_COMMA_SEPERATED
    UART_Transmit_Text(",");
    2832:	8f e0       	ldi	r24, 0x0F	; 15
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
  #ifdef DEBUG_VERBOSE_OUTPUT
    UART_Transmit_Text("UpTime ");
  #endif
  UART_Transmit_Number(Timebase_Timer_Get_Seconds());
  Debug_Print_Seperation();
}
    283a:	08 95       	ret

0000283c <Debug_Init>:
//#define  DEBUG_VERBOSE_OUTPUT
#define  DEBUG_COMMA_SEPERATED
//#define  DEBUG_SPACE_SEPERATED

void Debug_Init(void){
  UART_Init(57600);
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	71 ee       	ldi	r23, 0xE1	; 225
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 cd 02 	call	0x59a	; 0x59a <UART_Init>
}
    2848:	08 95       	ret

0000284a <__mulsi3>:
    284a:	62 9f       	mul	r22, r18
    284c:	d0 01       	movw	r26, r0
    284e:	73 9f       	mul	r23, r19
    2850:	f0 01       	movw	r30, r0
    2852:	82 9f       	mul	r24, r18
    2854:	e0 0d       	add	r30, r0
    2856:	f1 1d       	adc	r31, r1
    2858:	64 9f       	mul	r22, r20
    285a:	e0 0d       	add	r30, r0
    285c:	f1 1d       	adc	r31, r1
    285e:	92 9f       	mul	r25, r18
    2860:	f0 0d       	add	r31, r0
    2862:	83 9f       	mul	r24, r19
    2864:	f0 0d       	add	r31, r0
    2866:	74 9f       	mul	r23, r20
    2868:	f0 0d       	add	r31, r0
    286a:	65 9f       	mul	r22, r21
    286c:	f0 0d       	add	r31, r0
    286e:	99 27       	eor	r25, r25
    2870:	72 9f       	mul	r23, r18
    2872:	b0 0d       	add	r27, r0
    2874:	e1 1d       	adc	r30, r1
    2876:	f9 1f       	adc	r31, r25
    2878:	63 9f       	mul	r22, r19
    287a:	b0 0d       	add	r27, r0
    287c:	e1 1d       	adc	r30, r1
    287e:	f9 1f       	adc	r31, r25
    2880:	bd 01       	movw	r22, r26
    2882:	cf 01       	movw	r24, r30
    2884:	11 24       	eor	r1, r1
    2886:	08 95       	ret

00002888 <__udivmodhi4>:
    2888:	aa 1b       	sub	r26, r26
    288a:	bb 1b       	sub	r27, r27
    288c:	51 e1       	ldi	r21, 0x11	; 17
    288e:	07 c0       	rjmp	.+14     	; 0x289e <__udivmodhi4_ep>

00002890 <__udivmodhi4_loop>:
    2890:	aa 1f       	adc	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	a6 17       	cp	r26, r22
    2896:	b7 07       	cpc	r27, r23
    2898:	10 f0       	brcs	.+4      	; 0x289e <__udivmodhi4_ep>
    289a:	a6 1b       	sub	r26, r22
    289c:	b7 0b       	sbc	r27, r23

0000289e <__udivmodhi4_ep>:
    289e:	88 1f       	adc	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	5a 95       	dec	r21
    28a4:	a9 f7       	brne	.-22     	; 0x2890 <__udivmodhi4_loop>
    28a6:	80 95       	com	r24
    28a8:	90 95       	com	r25
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	08 95       	ret

000028b0 <__udivmodsi4>:
    28b0:	a1 e2       	ldi	r26, 0x21	; 33
    28b2:	1a 2e       	mov	r1, r26
    28b4:	aa 1b       	sub	r26, r26
    28b6:	bb 1b       	sub	r27, r27
    28b8:	fd 01       	movw	r30, r26
    28ba:	0d c0       	rjmp	.+26     	; 0x28d6 <__udivmodsi4_ep>

000028bc <__udivmodsi4_loop>:
    28bc:	aa 1f       	adc	r26, r26
    28be:	bb 1f       	adc	r27, r27
    28c0:	ee 1f       	adc	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	a2 17       	cp	r26, r18
    28c6:	b3 07       	cpc	r27, r19
    28c8:	e4 07       	cpc	r30, r20
    28ca:	f5 07       	cpc	r31, r21
    28cc:	20 f0       	brcs	.+8      	; 0x28d6 <__udivmodsi4_ep>
    28ce:	a2 1b       	sub	r26, r18
    28d0:	b3 0b       	sbc	r27, r19
    28d2:	e4 0b       	sbc	r30, r20
    28d4:	f5 0b       	sbc	r31, r21

000028d6 <__udivmodsi4_ep>:
    28d6:	66 1f       	adc	r22, r22
    28d8:	77 1f       	adc	r23, r23
    28da:	88 1f       	adc	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	1a 94       	dec	r1
    28e0:	69 f7       	brne	.-38     	; 0x28bc <__udivmodsi4_loop>
    28e2:	60 95       	com	r22
    28e4:	70 95       	com	r23
    28e6:	80 95       	com	r24
    28e8:	90 95       	com	r25
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	bd 01       	movw	r22, r26
    28f0:	cf 01       	movw	r24, r30
    28f2:	08 95       	ret

000028f4 <__divmodsi4>:
    28f4:	97 fb       	bst	r25, 7
    28f6:	09 2e       	mov	r0, r25
    28f8:	05 26       	eor	r0, r21
    28fa:	0e d0       	rcall	.+28     	; 0x2918 <__divmodsi4_neg1>
    28fc:	57 fd       	sbrc	r21, 7
    28fe:	04 d0       	rcall	.+8      	; 0x2908 <__divmodsi4_neg2>
    2900:	d7 df       	rcall	.-82     	; 0x28b0 <__udivmodsi4>
    2902:	0a d0       	rcall	.+20     	; 0x2918 <__divmodsi4_neg1>
    2904:	00 1c       	adc	r0, r0
    2906:	38 f4       	brcc	.+14     	; 0x2916 <__divmodsi4_exit>

00002908 <__divmodsi4_neg2>:
    2908:	50 95       	com	r21
    290a:	40 95       	com	r20
    290c:	30 95       	com	r19
    290e:	21 95       	neg	r18
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	4f 4f       	sbci	r20, 0xFF	; 255
    2914:	5f 4f       	sbci	r21, 0xFF	; 255

00002916 <__divmodsi4_exit>:
    2916:	08 95       	ret

00002918 <__divmodsi4_neg1>:
    2918:	f6 f7       	brtc	.-4      	; 0x2916 <__divmodsi4_exit>
    291a:	90 95       	com	r25
    291c:	80 95       	com	r24
    291e:	70 95       	com	r23
    2920:	61 95       	neg	r22
    2922:	7f 4f       	sbci	r23, 0xFF	; 255
    2924:	8f 4f       	sbci	r24, 0xFF	; 255
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	08 95       	ret

0000292a <_exit>:
    292a:	f8 94       	cli

0000292c <__stop_program>:
    292c:	ff cf       	rjmp	.-2      	; 0x292c <__stop_program>
